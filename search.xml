<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[GET，POST，PUT，DELETE的区别]]></title>
      <url>/2017/06/15/GET%EF%BC%8CPOST%EF%BC%8CPUT%EF%BC%8CDELETE%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>Http协议，发起请求成功，首先是通过DNS域名解析器，将www.baidu.com这个域名，解析到正确的ip地址的服务器上，一般情况没有指定后面具体的资源，浏览器会将自动定位到根目录”/“下即将www.baidu.com拼凑成www.baidu.com/ ,www.baidu.com只是DNS可以解析到ip的域名，”/“是指定资源的位置，一般根目录下会默认为index文件（当然这个随意服务器配置进行更改）。其实在浏览器直接输入对应ip地址，进行请求是一样的。因为服务器最后请求的实质，就是通过ip进行定位。比如在网站输入地址：www.baidu.com与直接输入111.13.100.92结果是一致的。</p>
<p>Http定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET，POST，PUT，DELETE。<br>URL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET，POST，PUT，DELETE就对应着对这个资源的查，改，增，删4个操作。<br>到这里，大家应该有个大概的了解了，GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。</p>
<h2 id="根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的。"><a href="#根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的。" class="headerlink" title="根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的。"></a>根据HTTP规范，GET用于信息获取，而且应该是安全的和幂等的。</h2><p>(1).所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET 请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像数据库查询一样，不会修改，增加数据，不会影响资源的状态。<br><strong>注意：这里安全的含义仅仅是指是非修改信息</strong></p>
<p>(2).幂等的意味着对同一URL的多个请求应该返回同样的结果。这里我再解释一下幂等这个概念：</p>
<blockquote>
<p>幂等（idempotent、idempotence）是一个数学或计算机学概念，常见于抽象代数中。<br>幂等有一下几种定义：<br>  对于单目运算，如果一个运算对于在范围内的所有的一个数多次进行该运算所得的结果和进行一次该运算所得的结果是一样的，那么我们就称该运算是幂等的。比如绝对值运算就是一个例子，在实数集中，有abs(a)=abs(abs(a))。<br>  对于双目运算，则要求当参与运算的两个值是等值的情况下，如果满足运算结果与参与运算的两个值相等，则称该运算幂等，如求两个数的最大值的函数，有在在实数集中幂等，即max(x,x) = x。</p>
</blockquote>
<p>看完上述解释后，应该可以理解GET幂等的含义了。</p>
<p>但在实际应用中，以上2条规定并没有这么严格。引用别人文章的例子：比如，新闻站点的头版不断更新。虽然第二次请求会返回不同的一批新闻，该操作仍然被认为是安全的和幂等的，因为它总是返回当前的新闻。从根本上说，如果目标是当用户打开一个链接时，他可以确信从自身的角度来看没有改变资源即可。</p>
<h2 id="根据HTTP规范，POST表示可能修改变服务器上的资源的请求"><a href="#根据HTTP规范，POST表示可能修改变服务器上的资源的请求" class="headerlink" title="根据HTTP规范，POST表示可能修改变服务器上的资源的请求"></a>根据HTTP规范，POST表示可能修改变服务器上的资源的请求</h2><p>继续引用上面的例子：还是新闻以网站为例，读者对新闻发表自己的评论应该通过POST实现，因为在评论提交后站点的资源已经不同了，或者说资源被修改了。 </p>
<p>上面大概说了一下HTTP规范中GET和POST的一些原理性的问题。但在实际的做的时候，很多人却没有按照HTTP规范去做，导致这个问题的原因有很多，比如说：<br>1.很多人贪方便，更新资源时用了GET，因为用POST必须要到FORM（表单），这样会麻烦一点。<br>2.对资源的增，删，改，查操作，其实都可以通过GET/POST完成，不需要用到PUT和DELETE。<br>3.另外一个是，早期的Web MVC框架设计者们并没有有意识地将URL当作抽象的资源来看待和设计，所以导致一个比较严重的问题是传统的Web MVC框架基本上都只支持GET和POST两种HTTP方法，而不支持PUT和DELETE方法。</p>
<h2 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h2><p>说完原理性的问题，我们再从表面现像上面看看GET和POST的区别：</p>
<h3 id="数据请求方式"><a href="#数据请求方式" class="headerlink" title="数据请求方式"></a>数据请求方式</h3><p>GET请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，参数之间以&amp;相连，如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0%E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。</p>
<p>POST把提交的数据则放置在是HTTP包的包体中。</p>
<h3 id="提交的数据长度"><a href="#提交的数据长度" class="headerlink" title="提交的数据长度"></a>提交的数据长度</h3><p>“GET方式提交的数据最多只能是1024字节，理论上POST没有限制，可传较大量的数据，IIS4中最大为80KB，IIS5中为100KB”？？！以上这句是我从其他文章转过来的，其实这样说是错误的，不准确的：</p>
<p>(1)首先是”GET方式提交的数据最多只能是1024字节”，因为GET是通过URL提交数据，那么GET可提交的数据量就跟URL的长度有直接关系了。而实际上，URL不存在参数上限的问题，HTTP协议规范没有对URL长度进行限制。这个限制是特定的浏览器及服务器对它的限制。IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持。</p>
<p>注意这是限制是整个URL长度，而不仅仅是你的参数值数据长度。</p>
<p>(2)理论上讲，POST是没有大小限制的，HTTP协议规范也没有进行大小限制，说“POST数据量存在80K/100K的大小限制”是不准确的，POST数据是没有限制的，起限制作用的是服务器的处理程序的处理能力。</p>
<h3 id="POST的安全性要比GET的安全性高"><a href="#POST的安全性要比GET的安全性高" class="headerlink" title="POST的安全性要比GET的安全性高"></a>POST的安全性要比GET的安全性高</h3><p>上面“安全”的含义仅仅是不作数据修改，而这里安全的含义是真正的Security的含义，比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为：</p>
<p>(1)登录页面有可能被浏览器缓存。</p>
<p>(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击。<br>其实就算是在POST下，我们也可以用charles等抓包工具将数据获取到，这里的安全也是相对的。</p>
<p>总结一下，Get是向服务器发索取数据的一种请求，而Post是向服务器提交数据的一种请求，在FORM（表单）中，Method默认为”GET”，实质上，GET和POST只是发送机制不同，并不是一个取一个发！</p>
]]></content>
      
        <categories>
            
            <category> 心得体会 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GET </tag>
            
            <tag> POST </tag>
            
            <tag> PUT </tag>
            
            <tag> DELETE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack之模板和图片例子]]></title>
      <url>/2017/06/08/webpack%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%92%8C%E5%9B%BE%E7%89%87%E4%BE%8B%E5%AD%90/</url>
      <content type="html"><![CDATA[<p>下面来讲解个例子，将component组件里面的js,css,html打包进模板index.html,<a href="https://github.com/manlili/webpack_learn" target="_blank" rel="external">源码地址https://github.com/manlili/webpack_learn里面的lesson10</a></p>
<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>在空白的文件夹正确的安装webpack，这一步<a href="https://manlili.github.io/2017/05/11/webpack%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/" target="_blank" rel="external">webpack入门指南</a>已经讲过了。<br>然后创建源文件夹src,在src下面创建app.js和components文件夹，组件components，下面放layer文件夹，里面分别创建layer的相关js,css,html，然后创建个目标文件夹dist,用来盛放打包生成的文件.<br>先来看看整个项目目录:<br><img src="https://manlili.github.io/img/170608/1.png" alt="图"><br>下面来分别看下各个文件的内容<br>layer.css<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.layer &#123;</div><div class="line">	background-color: red;</div><div class="line">	height: 100%;</div><div class="line">	font-size: 100px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>layer.html<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"layer"</span>&gt;</div><div class="line">	我是layer文件内容</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>layer.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import layerCss from <span class="string">"./layer.css"</span>;</div><div class="line">import template from <span class="string">"./layer.html"</span>;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">layer</span></span> () &#123;</div><div class="line">	<span class="built_in">return</span> &#123;</div><div class="line">		name: <span class="string">'layer'</span>,</div><div class="line">		layerCss: layerCss,</div><div class="line">		template: template</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">export</span> default layer</div></pre></td></tr></table></figure></p>
<p>上面代码需要关注的是我们用的ES6的import语法将这个组件的css和html载入js,然后将访问的接口通过export default给出去，方便app.js访问我们这个组件</p>
<p>app.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import Layer from <span class="string">'./components/layer/layer.js'</span>;</div><div class="line">const App = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">	<span class="built_in">let</span> dom = document.getElementById(<span class="string">'app'</span>);</div><div class="line">	<span class="built_in">let</span> layer = new Layer();</div><div class="line">	dom.innerHTML = layer.template;</div><div class="line">&#125;</div><div class="line"></div><div class="line">new App();</div></pre></td></tr></table></figure></p>
<p>上面的代码我们通过ES6的import语法将layer.js暴露的layer函数引入，然后用过new Layer()实例化这个函数，我们就可以访问layer内部的变量了，这里是找到id为app的标签，然后将定义的组件html插入id为app的标签里面</p>
<p>模板index.html<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">		&lt;title&gt;webapp&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;div id=<span class="string">"app"</span>&gt;&lt;/div&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>webpack.config.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">//使用html-loader</div><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</div><div class="line">module.exports = &#123;</div><div class="line">  entry: &#123;</div><div class="line">    app: <span class="string">'./src/app.js'</span>,</div><div class="line">  &#125;,</div><div class="line">  output: &#123;</div><div class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">    filename: <span class="string">'js/[name].bundle.js'</span> //区分文件有[name], [<span class="built_in">hash</span>], [chunkhash]</div><div class="line">  &#125;,</div><div class="line">  module: &#123;</div><div class="line">    rules: [&#123;</div><div class="line">      <span class="built_in">test</span>: /\.js$/, //用正则匹配找到所有的js文件</div><div class="line">      include: path.resolve(__dirname, <span class="string">'src'</span>), //指定babel-loaders寻找的文件路径，注意需是绝对路径</div><div class="line">      exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>), //排除node_modules文件下js，注意需是绝对路径</div><div class="line">      use: &#123;loader: <span class="string">'babel-loader'</span>&#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">test</span>: /\.css$/,</div><div class="line">      include: path.resolve(__dirname, <span class="string">'src'</span>), //指定babel-loaders寻找的文件路径，注意需是绝对路径</div><div class="line">      exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>), //排除node_modules文件下js，注意需是绝对路径</div><div class="line">      use: [</div><div class="line">      	&#123;loader: <span class="string">'style-loader'</span>&#125;, //注意先后顺序，一般都要先用css-loader处理完然后用style-loader生成style标签,但webpack读取的顺序是从右到左</div><div class="line">        &#123;loader: <span class="string">'css-loader'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">test</span>: /\.html$/,</div><div class="line">      use: &#123;loader: <span class="string">'html-loader'</span>&#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    new htmlWebpackPlugin(&#123;</div><div class="line">      filename: <span class="string">'index.html'</span>, //生成的文件名字</div><div class="line">      template: <span class="string">'index.html'</span>, //生成文件的 模板</div><div class="line">      inject: <span class="string">'body'</span>, //打包生成的js,css和其他东西插入的位置</div><div class="line">      title: <span class="string">'i am girl'</span>,</div><div class="line">      inject: <span class="string">'body'</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意上面使用了<a href="https://webpack.js.org/loaders/html-loader/" target="_blank" rel="external">html-loader</a>，这个是将.html文件转为字符串模板,处理模板文件的做法：<br>(1)webpack将模板文件当做一个字符串进行处理。(本次使用这种方法讲解)<br>(2)webpack将模板文件当成已经编译好的的模板的处理函数。<br>使用html-loader就要先安装:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -D html-loader --save-dev</div></pre></td></tr></table></figure></p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>打包后发现dist/js下面生成的app.bundle.js(打包后代码很乱，无需关注),这个时候我们来看下生成的index.html在浏览器里面的展示:<br><img src="https://manlili.github.io/img/170608/2.png" alt="图"><br>达到我们的预期了，layer.css和layer.html都插入到了index.html里面</p>
<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>在我们的实际项目中，我们的模板会用到模板语法，比如EJS模板，就需要用<a href="https://www.npmjs.com/package/ejs-loader" target="_blank" rel="external">ejs-loader</a>进行处理,紧接着来讲解下EJS模板<br><a href="https://github.com/manlili/webpack_learn" target="_blank" rel="external">源码地址https://github.com/manlili/webpack_learn里面的lesson11</a><br>这是我们在layer.html写入ejs语法:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"layer"</span>&gt;</div><div class="line">	&lt;%= name %&gt;</div><div class="line">	&lt;% <span class="keyword">for</span> (var i = 0; i &lt; arr.length ; i++) &#123; %&gt;</div><div class="line">		&lt;%= arr[i] %&gt;</div><div class="line">	&lt;% &#125; %&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>将app.js引用html时传入参数:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import Layer from <span class="string">'./components/layer/layer.js'</span>;</div><div class="line">const App = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">	<span class="built_in">let</span> dom = document.getElementById(<span class="string">'app'</span>);</div><div class="line">	<span class="built_in">let</span> layer = new Layer();</div><div class="line">	dom.innerHTML = layer.template(&#123;</div><div class="line">		name: <span class="string">'ejs模板'</span>,</div><div class="line">		arr: [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">new App();</div></pre></td></tr></table></figure></p>
<p>注意上面引入的layer.template不再是字符串，而是一个用ejs-loader生成的函数，这个时候可以传参</p>
<p>下面来看下webpack.config.js修改:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">//使用ejs-loader</div><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</div><div class="line">module.exports = &#123;</div><div class="line">  entry: &#123;</div><div class="line">    app: <span class="string">'./src/app.js'</span>,</div><div class="line">  &#125;,</div><div class="line">  output: &#123;</div><div class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">    filename: <span class="string">'js/[name].bundle.js'</span> //区分文件有[name], [<span class="built_in">hash</span>], [chunkhash]</div><div class="line">  &#125;,</div><div class="line">  module: &#123;</div><div class="line">    rules: [&#123;</div><div class="line">      <span class="built_in">test</span>: /\.js$/, //用正则匹配找到所有的js文件</div><div class="line">      include: path.resolve(__dirname, <span class="string">'src'</span>), //指定babel-loaders寻找的文件路径，注意需是绝对路径</div><div class="line">      exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>), //排除node_modules文件下js，注意需是绝对路径</div><div class="line">      use: &#123;loader: <span class="string">'babel-loader'</span>&#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">test</span>: /\.css$/,</div><div class="line">      include: path.resolve(__dirname, <span class="string">'src'</span>), //指定babel-loaders寻找的文件路径，注意需是绝对路径</div><div class="line">      exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>), //排除node_modules文件下js，注意需是绝对路径</div><div class="line">      use: [</div><div class="line">      	&#123;loader: <span class="string">'style-loader'</span>&#125;, //注意先后顺序，一般都要先用css-loader处理完然后用style-loader生成style标签,但webpack读取的顺序是从右到左</div><div class="line">        &#123;loader: <span class="string">'css-loader'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">test</span>: /\.html$/,</div><div class="line">      use: &#123;loader: <span class="string">'ejs-loader'</span>&#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    new htmlWebpackPlugin(&#123;</div><div class="line">      filename: <span class="string">'index.html'</span>, //生成的文件名字</div><div class="line">      template: <span class="string">'index.html'</span>, //生成文件的 模板</div><div class="line">      inject: <span class="string">'body'</span>, //打包生成的js,css和其他东西插入的位置</div><div class="line">      title: <span class="string">'i am girl'</span>,</div><div class="line">      inject: <span class="string">'body'</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从上面我们看出对html用ejs-loader处理,注意使用前需要先安装，安装语法如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install ejs-loader --save-dev</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>打包后发现dist/js下面生成的app.bundle.js(打包后代码很乱，无需关注),这个时候我们来看下生成的index.html在浏览器里面的展示:<br><img src="https://manlili.github.io/img/170608/3.png" alt="图"><br>达到我们的预期了,layer.html里面的ejs语法都转义后插入到了index.html里面。</p>
<h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>假设我们的项目里面需要用到图片，这个时候需要注意图片引入的地址<br><a href="https://github.com/manlili/webpack_learn" target="_blank" rel="external">源码地址https://github.com/manlili/webpack_learn里面的lesson12</a><br>我们在src文件下建立一个assets文件夹，放入一个smell.jpg,然后在我们的layer.css引入作为背景<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.layer &#123;</div><div class="line">	background-color: red;</div><div class="line">	height: 100%;</div><div class="line">	font-size: 100px;</div><div class="line">	background: url(../../assets/smell.jpg);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个时候需要修改webpack.config.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">//使用file-loader</div><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</div><div class="line">module.exports = &#123;</div><div class="line">  entry: &#123;</div><div class="line">    app: <span class="string">'./src/app.js'</span>,</div><div class="line">  &#125;,</div><div class="line">  output: &#123;</div><div class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">    filename: <span class="string">'js/[name].bundle.js'</span> //区分文件有[name], [<span class="built_in">hash</span>], [chunkhash]</div><div class="line">  &#125;,</div><div class="line">  module: &#123;</div><div class="line">    rules: [&#123;</div><div class="line">      <span class="built_in">test</span>: /\.js$/, //用正则匹配找到所有的js文件</div><div class="line">      include: path.resolve(__dirname, <span class="string">'src'</span>), //指定babel-loaders寻找的文件路径，注意需是绝对路径</div><div class="line">      exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>), //排除node_modules文件下js，注意需是绝对路径</div><div class="line">      use: &#123;loader: <span class="string">'babel-loader'</span>&#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">test</span>: /\.css$/,</div><div class="line">      include: path.resolve(__dirname, <span class="string">'src'</span>), //指定babel-loaders寻找的文件路径，注意需是绝对路径</div><div class="line">      exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>), //排除node_modules文件下js，注意需是绝对路径</div><div class="line">      use: [</div><div class="line">      	&#123;loader: <span class="string">'style-loader'</span>&#125;, //注意先后顺序，一般都要先用css-loader处理完然后用style-loader生成style标签,但webpack读取的顺序是从右到左</div><div class="line">        &#123;loader: <span class="string">'css-loader'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">test</span>: /\.html$/,</div><div class="line">      use: &#123;loader: <span class="string">'ejs-loader'</span>&#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">test</span>: /\.(jpg|png|gif|svg)$/,</div><div class="line">      use: &#123;</div><div class="line">      	loader: <span class="string">'file-loader?name=asset/[hash].[ext]'</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    new htmlWebpackPlugin(&#123;</div><div class="line">      filename: <span class="string">'index.html'</span>, //生成的文件名字</div><div class="line">      template: <span class="string">'index.html'</span>, //生成文件的 模板</div><div class="line">      inject: <span class="string">'body'</span>, //打包生成的js,css和其他东西插入的位置</div><div class="line">      title: <span class="string">'i am girl'</span>,</div><div class="line">      inject: <span class="string">'body'</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意上面我们使用了file-loader处理图片,使用之前需要先安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev file-loader</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>打包后发现dist/js下面生成一系列文件,这个时候我们来看下生成的index.html在浏览器里面的展示:<br><img src="https://manlili.github.io/img/170608/4.png" alt="图"><br>达到我们的预期了,背景图加载出来了，并且css也插入到了index.html里面。</p>
<p>如果我们在layer.html里面引入图片<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"layer"</span>&gt;</div><div class="line">	&lt;%= name %&gt;</div><div class="line">	&lt;% <span class="keyword">for</span> (var i = 0; i &lt; arr.length ; i++) &#123; %&gt;</div><div class="line">		&lt;%= arr[i] %&gt;</div><div class="line">	&lt;% &#125; %&gt;</div><div class="line">	&lt;img src=<span class="string">"<span class="variable">$&#123;require('../../assets/smell.jpg')&#125;</span>"</span>/&gt;  &lt;!--注意这里使用es6模板语法和require--&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>注意上面引入图片的写法。</p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>打包后发现dist/js下面生成一系列文件,这个时候我们来看下生成的index.html在浏览器里面的展示:<br><img src="https://manlili.github.io/img/170608/5.png" alt="图"><br>达到我们的预期了,背景图加载出来了,并且css也插入到了index.html里面,在img里面也引入了对应的图片。</p>
<h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>有时间图片太小，我们可以直接将图片用base64形式，减少向服务器的请求，这个时候可以借助<a href="https://www.npmjs.com/package/url-loader" target="_blank" rel="external">url-loader</a>里面limit参数进行处理。<br>这个时候需要修改webpack.config.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">//使用url-loader</div><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</div><div class="line">module.exports = &#123;</div><div class="line">  entry: &#123;</div><div class="line">    app: <span class="string">'./src/app.js'</span>,</div><div class="line">  &#125;,</div><div class="line">  output: &#123;</div><div class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">    filename: <span class="string">'js/[name].bundle.js'</span> //区分文件有[name], [<span class="built_in">hash</span>], [chunkhash]</div><div class="line">  &#125;,</div><div class="line">  module: &#123;</div><div class="line">    rules: [&#123;</div><div class="line">      <span class="built_in">test</span>: /\.js$/, //用正则匹配找到所有的js文件</div><div class="line">      include: path.resolve(__dirname, <span class="string">'src'</span>), //指定babel-loaders寻找的文件路径，注意需是绝对路径</div><div class="line">      exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>), //排除node_modules文件下js，注意需是绝对路径</div><div class="line">      use: &#123;loader: <span class="string">'babel-loader'</span>&#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">test</span>: /\.css$/,</div><div class="line">      include: path.resolve(__dirname, <span class="string">'src'</span>), //指定babel-loaders寻找的文件路径，注意需是绝对路径</div><div class="line">      exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>), //排除node_modules文件下js，注意需是绝对路径</div><div class="line">      use: [</div><div class="line">      	&#123;loader: <span class="string">'style-loader'</span>&#125;, //注意先后顺序，一般都要先用css-loader处理完然后用style-loader生成style标签,但webpack读取的顺序是从右到左</div><div class="line">        &#123;loader: <span class="string">'css-loader'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">test</span>: /\.html$/,</div><div class="line">      use: &#123;loader: <span class="string">'ejs-loader'</span>&#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">test</span>: /\.(jpg|png|gif|svg)$/,</div><div class="line">      use: &#123;</div><div class="line">      	loader: <span class="string">'url-loader?limit=30000!name=asset/[hash].[ext]'</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">  &#125;,</div><div class="line">  plugins: [</div><div class="line">    new htmlWebpackPlugin(&#123;</div><div class="line">      filename: <span class="string">'index.html'</span>, //生成的文件名字</div><div class="line">      template: <span class="string">'index.html'</span>, //生成文件的 模板</div><div class="line">      inject: <span class="string">'body'</span>, //打包生成的js,css和其他东西插入的位置</div><div class="line">      title: <span class="string">'i am girl'</span>,</div><div class="line">      inject: <span class="string">'body'</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意使用之前需要安装url-loader:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev url-loader</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>打包后发现dist/js下面生成一系列文件,这个时候我们来看下生成的index.html在浏览器里面的展示:<br><img src="https://manlili.github.io/img/170608/6.png" alt="图"><br>达到我们的预期了,背景图是用base64加载出来了,在img里面也是引用的base64图片。</p>
<h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><p>如果我们的图片太大，需要压缩一下，这个时候需要<a href="https://www.npmjs.com/package/img-loader" target="_blank" rel="external">img-loader</a><br>这个时候需要修改webpack.config.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">	    app: <span class="string">'./src/app.js'</span>,</div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">	    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">	    filename: <span class="string">'js/[name].bundle.js'</span> //区分文件有[name], [<span class="built_in">hash</span>], [chunkhash]</div><div class="line">	&#125;,</div><div class="line">	module: &#123;</div><div class="line">	    rules: [&#123;</div><div class="line">	      <span class="built_in">test</span>: /\.js$/, //用正则匹配找到所有的js文件</div><div class="line">	      include: path.resolve(__dirname, <span class="string">'src'</span>), //指定babel-loaders寻找的文件路径，注意需是绝对路径</div><div class="line">	      exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>), //排除node_modules文件下js，注意需是绝对路径</div><div class="line">	      use: &#123;loader: <span class="string">'babel-loader'</span>&#125;</div><div class="line">	    &#125;,</div><div class="line">	    &#123;</div><div class="line">	      <span class="built_in">test</span>: /\.css$/,</div><div class="line">	      include: path.resolve(__dirname, <span class="string">'src'</span>), //指定babel-loaders寻找的文件路径，注意需是绝对路径</div><div class="line">	      exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>), //排除node_modules文件下js，注意需是绝对路径</div><div class="line">	      use: [</div><div class="line">	      	&#123;loader: <span class="string">'style-loader'</span>&#125;, //注意先后顺序，一般都要先用css-loader处理完然后用style-loader生成style标签,但webpack读取的顺序是从右到左</div><div class="line">	        &#123;loader: <span class="string">'css-loader'</span>&#125;</div><div class="line">	      ]</div><div class="line">	    &#125;,</div><div class="line">	    &#123;</div><div class="line">	      <span class="built_in">test</span>: /\.html$/,</div><div class="line">	      use: &#123;loader: <span class="string">'ejs-loader'</span>&#125;</div><div class="line">	    &#125;,</div><div class="line">	    &#123;</div><div class="line">	      <span class="built_in">test</span>: /\.(jpg|png|gif|svg)$/,</div><div class="line">	      use: [</div><div class="line">		      &#123;loader: <span class="string">'file-loader?name=asset/[hash].[ext]'</span>&#125;,</div><div class="line">		      &#123;loader: <span class="string">'img-loader'</span>&#125;</div><div class="line">	      ]</div><div class="line">	    &#125;</div><div class="line">	]</div><div class="line">	&#125;,</div><div class="line">	plugins: [</div><div class="line">	    new htmlWebpackPlugin(&#123;</div><div class="line">	      filename: <span class="string">'index.html'</span>, //生成的文件名字</div><div class="line">	      template: <span class="string">'index.html'</span>, //生成文件的 模板</div><div class="line">	      inject: <span class="string">'body'</span>, //打包生成的js,css和其他东西插入的位置</div><div class="line">	      title: <span class="string">'i am girl'</span>,</div><div class="line">	      inject: <span class="string">'body'</span></div><div class="line">	    &#125;)</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意使用img-loader之前需要先安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install img-loader --save-dev</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>打包后发现dist/js下面生成一系列文件,这个时候我们来看下dist/asset/a36939881292c3d8606448723481f194.jpg,原始大小是22.2k,经过压缩后是7.33k,生成的index.html在浏览器里面的展示也是正确的，这样我们就达到了压缩图片功能。</p>
]]></content>
      
        <categories>
            
            <category> webpack技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webpack </tag>
            
            <tag> 模板 </tag>
            
            <tag> 图片 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack之loaders例子(css,sass-loader)]]></title>
      <url>/2017/06/01/webpack%E4%B9%8Bloaders%E4%BE%8B%E5%AD%90(css,sass-loader)/</url>
      <content type="html"><![CDATA[<p>下面来介绍css或者less的打包转义后插入html，一般打包用css-loader,插入html用的style-loader,<br><a href="https://github.com/manlili/webpack_learn" target="_blank" rel="external">源码地址https://github.com/manlili/webpack_learn里面的lesson09</a><br>下面来看下步骤</p>
<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>在空白的文件夹正确的安装webpack，这一步<a href="https://manlili.github.io/2017/05/11/webpack%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/" target="_blank" rel="external">webpack入门指南</a>已经讲过了。<br>然后创建源文件夹src,在src下面创建app.js和css文件夹，css文件夹下面创建个common.css，然后创建个目标文件夹dist,用来盛放打包生成的文件.</p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>在根目录下面创建index.html,内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">		&lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line"></div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>来看下common.css文件内容:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">html , body &#123;</div><div class="line">	padding: 0;</div><div class="line">	margin: 0;</div><div class="line">	background-color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>为了测试，我们将app.js用ES6的语言引入待打包的common.css，内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import style from <span class="string">'./css/common.css'</span></div><div class="line">const App = () =&gt; &#123;</div><div class="line">	console.log(<span class="string">"测试"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>配置webpack的打包配置文件webpack.config.js,内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">//使用css-loader</div><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">		app: <span class="string">'./src/app.js'</span>,</div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">		filename: <span class="string">'js/[name].bundle.js'</span>    //区分文件有[name], [<span class="built_in">hash</span>], [chunkhash]</div><div class="line">	&#125;,</div><div class="line">	module: &#123;</div><div class="line">		rules: [</div><div class="line">		    &#123;</div><div class="line">		      <span class="built_in">test</span>: /\.js$/,   //用正则匹配找到所有的js文件</div><div class="line">		      include: path.resolve(__dirname, <span class="string">'src'</span>), //指定babel-loaders寻找的文件路径，注意需是绝对路径</div><div class="line">		      exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>),  //排除node_modules文件下js，注意需是绝对路径</div><div class="line">		      use: &#123;</div><div class="line">		        loader: <span class="string">'babel-loader'</span></div><div class="line">		      &#125;</div><div class="line">		    &#125;,</div><div class="line">		    &#123;</div><div class="line">		    	<span class="built_in">test</span>: /\.css$/,</div><div class="line">		    	include: path.resolve(__dirname, <span class="string">'src'</span>), //指定babel-loaders寻找的文件路径，注意需是绝对路径</div><div class="line">		    	exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>),  //排除node_modules文件下js，注意需是绝对路径</div><div class="line">		    	use: [</div><div class="line">		      	&#123;loader: <span class="string">'style-loader'</span>&#125;,//注意先后顺序，一般都要先用css-loader处理完然后用style-loader生成style标签,但webpack读取的顺序是从右到左</div><div class="line">		      	&#123;loader: <span class="string">'css-loader'</span>&#125;</div><div class="line">		      ]</div><div class="line">		    &#125;</div><div class="line">		]</div><div class="line">	&#125;,</div><div class="line">	plugins: [</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">			filename: <span class="string">'index.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			inject: <span class="string">'body'</span>,    //打包生成的js,css和其他东西插入的位置</div><div class="line">			title: <span class="string">'i am girl'</span></div><div class="line">		&#125;)</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意上面使用了<a href="https://www.npmjs.com/package/css-loader" target="_blank" rel="external">css-loader</a>和<a href="https://www.npmjs.com/package/style-loader" target="_blank" rel="external">style-loader</a>,需要先安装才可以使用，可以在他们的官网找到安装的方法，这里我就讲安装的方法贴出来:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev css-loader</div><div class="line">npm install style-loader --save-dev</div></pre></td></tr></table></figure></p>
<p>接下来来看下我们的文件夹组成<br><img src="https://manlili.github.io/img/170601/1.png" alt="图"></p>
<h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>打包后发现dist/js下面生成的app.bundle.js(打包后代码很乱，无需关注),这时检查是否在html里面插入了css，这个时候我们来看下生成的index.html内容:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">		&lt;title&gt;i am girl&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		</div><div class="line">	&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"js/app.bundle.js"</span>&gt;&lt;/script&gt;&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>咦?为什么生成的index.html里面没有内嵌css，因为我们是在app.js里面引入的css，所以打包直接将css转义到了生成的app.bundle.js里面,感兴趣的同学可以自己去查下生成的app.bundle.js的代码。<br>既然不能直接打开生成的index.html查看，那么就需要在浏览器里面面打开，得到的效果如下：<br><img src="https://manlili.github.io/img/170601/2.png" alt="图"></p>
<h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>其实我们可以使用连着的loader，下面来看修改过的webpack.config.js:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">//loaders连着书写的方式进行css打包</div><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">		app: <span class="string">'./src/app.js'</span>,</div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">		filename: <span class="string">'js/[name].bundle.js'</span>    //区分文件有[name], [<span class="built_in">hash</span>], [chunkhash]</div><div class="line">	&#125;,</div><div class="line">	module: &#123;</div><div class="line">		rules: [</div><div class="line">		    &#123;</div><div class="line">		      <span class="built_in">test</span>: /\.js$/,   //用正则匹配找到所有的js文件</div><div class="line">		      include: path.resolve(__dirname, <span class="string">'src'</span>), //指定babel-loaders寻找的文件路径，注意需是绝对路径</div><div class="line">		      exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>),  //排除node_modules文件下js，注意需是绝对路径</div><div class="line">		      use: &#123;</div><div class="line">		        loader: <span class="string">'babel-loader'</span></div><div class="line">		      &#125;</div><div class="line">		    &#125;,</div><div class="line">		    &#123;</div><div class="line">		    	<span class="built_in">test</span>: /\.css$/,</div><div class="line">		    	include: path.resolve(__dirname, <span class="string">'src'</span>), //指定babel-loaders寻找的文件路径，注意需是绝对路径</div><div class="line">		    	exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>),  //排除node_modules文件下js，注意需是绝对路径</div><div class="line">		    	use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>]</div><div class="line">		    &#125;</div><div class="line">		]</div><div class="line">	&#125;,</div><div class="line">	plugins: [</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">			filename: <span class="string">'index.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			inject: <span class="string">'body'</span>,    //打包生成的js,css和其他东西插入的位置</div><div class="line">			title: <span class="string">'i am girl'</span></div><div class="line">		&#125;)</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>可以看出打包后的效果是一致的。</p>
<p>如果我们需要给css加浏览器前缀，比如将common.css修改为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">html , body &#123;</div><div class="line">	padding: 0;</div><div class="line">	margin: 0;</div><div class="line">	background-color: red;</div><div class="line">&#125;</div><div class="line">.box-flex &#123;</div><div class="line">	display: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们都知道flex的兼容性不是太好，需要加浏览器前缀，下面来看下<a href="https://www.npmjs.com/package/postcss" target="_blank" rel="external">postcss</a>,这个loader很牛逼，有200多个插件，主要是用来处理css，安装方法如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install postcss --save-dev</div><div class="line">npm install postcss-loader --save-dev</div></pre></td></tr></table></figure></p>
<p>下面来看修改过的webpack.config.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">		app: <span class="string">'./src/app.js'</span>,</div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">		filename: <span class="string">'js/[name].bundle.js'</span>    //区分文件有[name], [<span class="built_in">hash</span>], [chunkhash]</div><div class="line">	&#125;,</div><div class="line">	module: &#123;</div><div class="line">		rules: [</div><div class="line">		    &#123;</div><div class="line">		      <span class="built_in">test</span>: /\.js$/,   //用正则匹配找到所有的js文件</div><div class="line">		      include: path.resolve(__dirname, <span class="string">'src'</span>), //指定babel-loaders寻找的文件路径，注意需是绝对路径</div><div class="line">		      exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>),  //排除node_modules文件下js，注意需是绝对路径</div><div class="line">		      use: &#123;</div><div class="line">		        loader: <span class="string">'babel-loader'</span></div><div class="line">		      &#125;</div><div class="line">		    &#125;,</div><div class="line">		    &#123;</div><div class="line">		    	<span class="built_in">test</span>: /\.css$/,</div><div class="line">		    	include: path.resolve(__dirname, <span class="string">'src'</span>), //指定babel-loaders寻找的文件路径，注意需是绝对路径</div><div class="line">		      exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>),  //排除node_modules文件下js，注意需是绝对路径</div><div class="line">		      use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>, <span class="string">"postcss-loader"</span>]</div><div class="line">		    &#125;</div><div class="line">		]</div><div class="line">	&#125;,</div><div class="line">	plugins: [</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">			filename: <span class="string">'index.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			inject: <span class="string">'body'</span>,    //打包生成的js,css和其他东西插入的位置</div><div class="line">			title: <span class="string">'i am girl'</span></div><div class="line">		&#125;)</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>根据postcss-loader官网要求，如果需要给postcss-loader参加参数或者插件，需要在根目录下新建一个postcss.config.js，内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">	plugins: [</div><div class="line">	    require(<span class="string">'autoprefixer'</span>)   //自动给css新属性加浏览器前缀</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>发现生成的index.html在浏览器打开以后出现:<br><img src="https://manlili.github.io/img/170601/3.png" alt="图"><br>果然像我们预期的那样出现了浏览器的前缀</p>
<h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><p>有时候我们项目会使用less或者scss，这个时候打包我们就需要用到less-loader或者sass-loader，假设我们项目用到了scss，在src/css文件下创建一个test.scss,内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$blue</span> : red;　</div><div class="line">.test &#123;</div><div class="line">    color : <span class="variable">$blue</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>安装<a href="https://www.npmjs.com/package/sass-loader" target="_blank" rel="external">sass-loader</a>方法(这步很重要):<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install sass-loader node-sass webpack --save-dev</div></pre></td></tr></table></figure></p>
<p>接下来来看webpack.config.js配置:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">//使用sass-loader</div><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">		app: <span class="string">'./src/app.js'</span>,</div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">		filename: <span class="string">'js/[name].bundle.js'</span>    //区分文件有[name], [<span class="built_in">hash</span>], [chunkhash]</div><div class="line">	&#125;,</div><div class="line">	module: &#123;</div><div class="line">		rules: [</div><div class="line">		    &#123;</div><div class="line">		      <span class="built_in">test</span>: /\.js$/,   //用正则匹配找到所有的js文件</div><div class="line">		      include: path.resolve(__dirname, <span class="string">'src'</span>), //指定babel-loaders寻找的文件路径，注意需是绝对路径</div><div class="line">		      use: &#123;</div><div class="line">		        loader: <span class="string">'babel-loader'</span></div><div class="line">		      &#125;</div><div class="line">		    &#125;,</div><div class="line">		    &#123;</div><div class="line">		      <span class="built_in">test</span>: /\.css$/,</div><div class="line">		      include: path.resolve(__dirname, <span class="string">'src'</span>), //指定babel-loaders寻找的文件路径，注意需是绝对路径</div><div class="line">		      use: [&#123;</div><div class="line">		          loader: <span class="string">"style-loader"</span> </div><div class="line">		        &#125;, &#123;</div><div class="line">		          loader: <span class="string">"css-loader"</span> </div><div class="line">		        &#125;,&#123;</div><div class="line">		          loader: <span class="string">"postcss-loader"</span></div><div class="line">		        &#125;, &#123;</div><div class="line">		          loader: <span class="string">"sass-loader"</span></div><div class="line">		      &#125;]</div><div class="line">		    &#125;,</div><div class="line">		    &#123;</div><div class="line">		      <span class="built_in">test</span>: /\.scss$/,</div><div class="line">		      include: path.resolve(__dirname, <span class="string">'src'</span>), //指定babel-loaders寻找的文件路径，注意需是绝对路径</div><div class="line">		      use: [&#123;</div><div class="line">		          loader: <span class="string">"style-loader"</span></div><div class="line">		        &#125;, &#123;</div><div class="line">		          loader: <span class="string">"css-loader"</span> </div><div class="line">		        &#125;,&#123;</div><div class="line">		          loader: <span class="string">"postcss-loader"</span></div><div class="line">		        &#125;, &#123;</div><div class="line">		          loader: <span class="string">"sass-loader"</span></div><div class="line">		        &#125;]</div><div class="line">		    &#125;</div><div class="line">		]</div><div class="line">	&#125;,</div><div class="line">	plugins: [</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">			filename: <span class="string">'index.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			inject: <span class="string">'body'</span>,    //打包生成的js,css和其他东西插入的位置</div><div class="line">			title: <span class="string">'i am girl'</span></div><div class="line">		&#125;)</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>发现生成的index.html在浏览器打开以后出现:<br><img src="https://manlili.github.io/img/170601/4.png" alt="图"><br>从上图我们发现了按我们预期的将scss转义成了css，并且插入了到了html里面</p>
]]></content>
      
        <categories>
            
            <category> webpack技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webpack </tag>
            
            <tag> loaders </tag>
            
            <tag> 打包例子 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack之loaders例子(babel-loader)]]></title>
      <url>/2017/05/24/webpack%E4%B9%8Bloaders%E4%BE%8B%E5%AD%90(babel-loader)/</url>
      <content type="html"><![CDATA[<p>这里讲解下loaders的例子<br><a href="https://github.com/manlili/webpack_learn" target="_blank" rel="external">源码地址https://github.com/manlili/webpack_learn里面的lesson08</a>,主要讲babel将ES6语法转化为ES5语法。</p>
<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>在空白的文件夹正确的安装webpack，这一步<a href="https://manlili.github.io/2017/05/11/webpack%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/" target="_blank" rel="external">webpack入门指南</a>已经讲过了。<br>然后创建源文件夹src,在src下面创建app.js，然后创建个目标文件夹dist,用来盛放打包生成的文件.</p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>在根目录下面创建index.html,内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">		&lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line"></div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>为了测试，我们将app.js用ES6的语言来写，内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const App = () =&gt; &#123;</div><div class="line">	console.log(<span class="string">"测试"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>配置webpack的打包配置文件webpack.config.js,内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">//用babel-loader将js文件转义为浏览器可识别的js</div><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">		app: <span class="string">'./src/app.js'</span>,</div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">		filename: <span class="string">'js/[name].bundle.js'</span>    //区分文件有[name], [<span class="built_in">hash</span>], [chunkhash]</div><div class="line">	&#125;,</div><div class="line">	module: &#123;</div><div class="line">		rules: [</div><div class="line">		    &#123;</div><div class="line">		      <span class="built_in">test</span>: /\.js$/,   //用正则匹配找到所有的js文件</div><div class="line">		      exclude: /node_modules/,  //排除node_modules文件下js</div><div class="line">		      use: &#123;</div><div class="line">		        loader: <span class="string">'babel-loader'</span>,  //使用babel-loader处理找到js文件</div><div class="line">		        options: &#123;      //采用babel-loader的<span class="string">"es2015"</span>规则将找的js为浏览器可识别的js</div><div class="line">		          presets: [<span class="string">"es2015"</span>],</div><div class="line">		          plugins: [<span class="string">"transform-remove-strict-mode"</span>]</div><div class="line">		        &#125;</div><div class="line">		      &#125;</div><div class="line">		    &#125;</div><div class="line">		]</div><div class="line">	&#125;,</div><div class="line">	plugins: [</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">			filename: <span class="string">'index.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			inject: <span class="string">'body'</span>,    //打包生成的js,css和其他东西插入的位置</div><div class="line">			title: <span class="string">'i am girl'</span></div><div class="line">		&#125;)</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的module配置意思是配置loaders，然后定义loaders使用的规则rules，请注意使用loaders之前必须先安装对应的loaders,比如上面用到了babel-loader，需要我们去<a href="http://babeljs.io/docs/setup/" target="_blank" rel="external">babel官网</a>找到webpack的安装方式:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev babel-loader babel-core</div></pre></td></tr></table></figure></p>
<p>babel的官网将webpack的使用方法都写的很详细:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">module: &#123;</div><div class="line">  rules: [</div><div class="line">    &#123; <span class="built_in">test</span>: /\.js$/, exclude: /node_modules/, loader: <span class="string">"babel-loader"</span> &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当然关于使用babel-loader转义的options,我们可以使用的配置:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">module: &#123;</div><div class="line">	rules: [</div><div class="line">	    &#123;</div><div class="line">	      <span class="built_in">test</span>: /\.js$/,   //用正则匹配找到所有的js文件</div><div class="line">	      exclude: /node_modules/,  //排除node_modules文件下js</div><div class="line">	      use: &#123;</div><div class="line">	        loader: <span class="string">'babel-loader'</span>,  //使用babel-loader处理找到js文件</div><div class="line">	        options: &#123;      //采用babel-loader的<span class="string">"es2015"</span>规则将找的js为浏览器可识别的js</div><div class="line">	          presets: [<span class="string">"es2015"</span>],</div><div class="line">	          plugins: [<span class="string">"transform-remove-strict-mode"</span>]</div><div class="line">	        &#125;</div><div class="line">	      &#125;</div><div class="line">	    &#125;</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里还有个坑，我们使用的babel-loader转义的options，比如<a href="http://babeljs.io/docs/plugins/preset-es2015/" target="_blank" rel="external">es2015</a>， <a href="https://www.npmjs.com/package/babel-plugin-transform-remove-strict-mode" target="_blank" rel="external">transform-remove-strict-mode</a>都需要先安装再使用，可以在npm官网上查找安装方法，这里我直接贴出它们的安装语法如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev babel-cli babel-preset-es2015</div><div class="line">npm install --save-dev babel-plugin-transform-remove-strict-mode</div></pre></td></tr></table></figure></p>
<p>接下来来看下我们的文件夹组成<br><img src="https://manlili.github.io/img/170524/1.png" alt="图"></p>
<h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>打包后发现dist/js下面生成的app.bundle.js内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/******/ ([</div><div class="line">/* 0 */</div><div class="line">/***/ (<span class="keyword">function</span>(module, exports) &#123;</div><div class="line"></div><div class="line">var App = <span class="keyword">function</span> <span class="function"><span class="title">App</span></span>() &#123;</div><div class="line">	console.log(<span class="string">"测试"</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">/***/ &#125;)</div><div class="line">/******/ ]);</div></pre></td></tr></table></figure></p>
<p>上面我们可以看出生成的app.bundle.js中没有”use strict”,说明plugins: [“transform-remove-strict-mode”]起了效果。</p>
<h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>将上面的用loaders打包换一种方法实现如下,就是将babel的参数移到package.json里面,下面来看package.json关于babel的内容配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"webpack_learn"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"babel"</span>: &#123;</div><div class="line">		<span class="string">"presets"</span>: [<span class="string">"es2015"</span>],</div><div class="line">		<span class="string">"plugins"</span>: [<span class="string">"transform-remove-strict-mode"</span>]</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"repository"</span>: &#123;</div><div class="line">    <span class="string">"type"</span>: <span class="string">"git"</span>,</div><div class="line">    <span class="string">"url"</span>: <span class="string">"git+https://github.com/manlili/webpack_learn.git"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="string">"bugs"</span>: &#123;</div><div class="line">    <span class="string">"url"</span>: <span class="string">"https://github.com/manlili/webpack_learn/issues"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"homepage"</span>: <span class="string">"https://github.com/manlili/webpack_learn#readme"</span>,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"babel-cli"</span>: <span class="string">"^6.24.1"</span>,</div><div class="line">    <span class="string">"babel-core"</span>: <span class="string">"^6.24.1"</span>,</div><div class="line">    <span class="string">"babel-loader"</span>: <span class="string">"^7.0.0"</span>,</div><div class="line">    <span class="string">"babel-plugin-transform-remove-strict-mode"</span>: <span class="string">"0.0.2"</span>,</div><div class="line">    <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.24.1"</span>,</div><div class="line">    <span class="string">"html-webpack-plugin"</span>: <span class="string">"^2.28.0"</span>,</div><div class="line">    <span class="string">"webpack"</span>: <span class="string">"^2.6.1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"babel-plugin-config-export"</span>: <span class="string">"^1.0.0"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>打包后发现dist/js下面生成的app.bundle.js内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/******/ ([</div><div class="line">/* 0 */</div><div class="line">/***/ (<span class="keyword">function</span>(module, exports) &#123;</div><div class="line"></div><div class="line">var App = <span class="keyword">function</span> <span class="function"><span class="title">App</span></span>() &#123;</div><div class="line">	console.log(<span class="string">"测试"</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">/***/ &#125;)</div><div class="line">/******/ ]);</div></pre></td></tr></table></figure></p>
<p>上面我们可以看出生成的app.bundle.js中没有”use strict”,而且app.bundle.js内容和上面的直接配置plugins: [“transform-remove-strict-mode”]一模一样，说明起了效果。</p>
<h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><p>将上面的用loaders打包换第三种方法实现如下，其实也可以像babel官网介绍的那样创建一个.babelrc结尾的文件写上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [</div><div class="line">    <span class="string">'es2015'</span></div><div class="line">  ],</div><div class="line">  <span class="string">"plugins"</span>: [</div><div class="line">    <span class="string">"transform-remove-strict-mode"</span></div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着修改webpack的打包配置文件webpack.config.js,内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">//用.babelrc结尾的文件配置后打包</div><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">		app: <span class="string">'./src/app.js'</span>,</div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">		filename: <span class="string">'js/[name].bundle.js'</span>    //区分文件有[name], [<span class="built_in">hash</span>], [chunkhash]</div><div class="line">	&#125;,</div><div class="line">	module: &#123;</div><div class="line">		rules: [</div><div class="line">		    &#123;</div><div class="line">		      <span class="built_in">test</span>: /\.js$/,   //用正则匹配找到所有的js文件</div><div class="line">		      exclude: /node_modules/,  //排除node_modules文件下js</div><div class="line">		      use: &#123;</div><div class="line">		        loader: <span class="string">'babel-loader'</span></div><div class="line">		      &#125;</div><div class="line">		    &#125;</div><div class="line">		]</div><div class="line">	&#125;,</div><div class="line">	plugins: [</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">			filename: <span class="string">'index.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			inject: <span class="string">'body'</span>,    //打包生成的js,css和其他东西插入的位置</div><div class="line">			title: <span class="string">'i am girl'</span></div><div class="line">		&#125;)</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>打包后发现dist/js下面生成的app.bundle.js内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/******/ ([</div><div class="line">/* 0 */</div><div class="line">/***/ (<span class="keyword">function</span>(module, exports) &#123;</div><div class="line"></div><div class="line">var App = <span class="keyword">function</span> <span class="function"><span class="title">App</span></span>() &#123;</div><div class="line">	console.log(<span class="string">"测试"</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">/***/ &#125;)</div><div class="line">/******/ ]);</div></pre></td></tr></table></figure></p>
<p>上面我们可以看出生成的app.bundle.js中也没有”use strict”,而且app.bundle.js内容和上面的直接配置plugins: [“transform-remove-strict-mode”]结果一模一样，说明这种方法挺好,官网上比较推荐这种用法。</p>
<h2 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h2><p>上面打包都说过了，但是我们也发现了运行完打包命令后，很长时间才能看到打包的结果，这是因为我们没有给babel-loaders指定待打包的文件路径，导致它需要在整个目录下一个一个寻找，下面我们来优化下打包的时间,修改webpack的打包配置文件webpack.config.js,内容如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">		app: <span class="string">'./src/app.js'</span>,</div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">		filename: <span class="string">'js/[name].bundle.js'</span>    //区分文件有[name], [<span class="built_in">hash</span>], [chunkhash]</div><div class="line">	&#125;,</div><div class="line">	module: &#123;</div><div class="line">		rules: [</div><div class="line">		    &#123;</div><div class="line">		      <span class="built_in">test</span>: /\.js$/,   //用正则匹配找到所有的js文件</div><div class="line">		      include: path.resolve(__dirname, <span class="string">'src'</span>), //指定babel-loaders寻找的文件路径，注意需是绝对路径</div><div class="line">		      exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>),  //排除node_modules文件下js，注意需是绝对路径</div><div class="line">		      use: &#123;</div><div class="line">		        loader: <span class="string">'babel-loader'</span></div><div class="line">		      &#125;</div><div class="line">		    &#125;</div><div class="line">		]</div><div class="line">	&#125;,</div><div class="line">	plugins: [</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">			filename: <span class="string">'index.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			inject: <span class="string">'body'</span>,    //打包生成的js,css和其他东西插入的位置</div><div class="line">			title: <span class="string">'i am girl'</span></div><div class="line">		&#125;)</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>发现命令行打包的命令里面时间比以前稍微少一点，主要是我们的测试打包的文件太少，等到打包一个大项目的时候就会发现节约很多时间。</p>
]]></content>
      
        <categories>
            
            <category> webpack技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webpack </tag>
            
            <tag> loaders </tag>
            
            <tag> 打包例子 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack之plugins例子]]></title>
      <url>/2017/05/19/webpack%E4%B9%8Bplugins%E4%BE%8B%E5%AD%90/</url>
      <content type="html"><![CDATA[<h2 id="webpack打包例子"><a href="#webpack打包例子" class="headerlink" title="webpack打包例子"></a>webpack打包例子</h2><p><a href="https://github.com/manlili/webpack_learn" target="_blank" rel="external">源码地址https://github.com/manlili/webpack_learn里面的lesson03</a></p>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>在空白的文件夹正确的安装webpack，这一步<a href="https://manlili.github.io/2017/05/11/webpack%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/" target="_blank" rel="external">webpack入门指南</a>已经讲过了。<br>然后创建源文件夹src,在src下面创建script和style文件夹用来盛放我们的测试原文件，比如js和css，然后创建个目标文件夹dist,用来盛放打包生成的文件</p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>在根目录下面创建index.html,内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">		&lt;title&gt;&lt;/title&gt;</div><div class="line">		</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;script src=<span class="string">"bundle.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>接着在src/script文件创建main.js,内容是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">helloWord</span></span> () &#123;</div><div class="line">	<span class="built_in">return</span> &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着在src/script文件创建test.js,内容是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span> () &#123;</div><div class="line">	alert(<span class="string">"123"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>配置webpack的打包配置文件webpack.config.js,内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var path = require(<span class="string">"path"</span>);  //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">module.exports = &#123;</div><div class="line">	entry: <span class="string">'./src/script/main.js'</span>,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, <span class="string">'./dist/js'</span>),</div><div class="line">		filename: <span class="string">'bundle.js'</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的配置意思是将main.js打包到bundle.js<br>接下来来看下我们的文件夹组成<br><img src="https://manlili.github.io/img/170519/1.png" alt="图"></p>
<h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>上面的过程是在根目录下面寻找webpack.config.js，然后按照配置进行打包.<br><img src="https://manlili.github.io/img/170519/2.png" alt="图"><br>这时我们就会看到dist下面多了个js文件夹，并且js文件夹里面多了个bundle.js,我们来看下文件目录:<br><img src="https://manlili.github.io/img/170519/3.png" alt="图"><br>下面我们来看下bundle.js内容(以后都省略打包自动生成的webpack代码)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/******/ ([</div><div class="line">/* 0 */</div><div class="line">/***/ (<span class="keyword">function</span>(module, exports) &#123;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">helloWord</span></span> () &#123;</div><div class="line">	<span class="built_in">return</span> &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/***/ &#125;)</div><div class="line">/******/ ]);</div></pre></td></tr></table></figure></p>
<p>上面我们可以看出生成了一个chunk,0代表第一个chunk</p>
<h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><p>将两个js文件打包成一个js，此时我们只需要修改webpack的打包配置文件webpack.config.js,内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">module.exports = &#123;</div><div class="line">	entry: [<span class="string">'./src/script/main.js'</span>, <span class="string">"./src/script/test.js"</span>],</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, <span class="string">'./dist/js'</span>),</div><div class="line">		filename: <span class="string">'bundle.js'</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>出现：<br><img src="https://manlili.github.io/img/170519/4.png" alt="图"><br>注意上面生成了3个chunks,每个chunks的详细内容都标的很清楚，接着我们发现打包生成的bundle.js内容改变了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">/******/ ([</div><div class="line">/* 0 */</div><div class="line">/***/ (<span class="keyword">function</span>(module, exports) &#123;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">helloWord</span></span> () &#123;</div><div class="line">	<span class="built_in">return</span> &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/***/ &#125;),</div><div class="line">/* 1 */</div><div class="line">/***/ (<span class="keyword">function</span>(module, exports) &#123;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span> () &#123;</div><div class="line">	alert(<span class="string">"123"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/***/ &#125;),</div><div class="line">/* 2 */</div><div class="line">/***/ (<span class="keyword">function</span>(module, exports, __webpack_require__) &#123;</div><div class="line"></div><div class="line">__webpack_require__(0);</div><div class="line">module.exports = __webpack_require__(1);</div><div class="line"></div><div class="line"></div><div class="line">/***/ &#125;)</div><div class="line">/******/ ]);</div></pre></td></tr></table></figure></p>
<p>从上面生成的代码看出正好对应着打包运行时生成的3个chunks，其中第三个chunk是将两个不相干的模块_webpack_require<strong>(0)与</strong>webpack<em>require__(1)联系起来</em>。</p>
<h3 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h3><p>假设我们需要将两个文件打包完分别输出各自的打包文件，webpack.config.js里面entry就不能用字符串或者数组的方式，就需要用对象的方式，我们修改webpack.config.js文件内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">		mian: <span class="string">'./src/script/main.js'</span>,</div><div class="line">		<span class="built_in">test</span>: <span class="string">'./src/script/test.js'</span></div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, <span class="string">'./dist/js'</span>),</div><div class="line">		filename: <span class="string">'bundle.js'</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>出现：<br><img src="https://manlili.github.io/img/170519/5.png" alt="图"><br>此时上面出现报错，把这个写出来主要是想说明，如果entry用对象的方式写出来，打包生成的是多个文件，我们上面将output写死输出一个bundle.js很明显是不正确的,这时生成的错误bundle.js文件内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/******/ ([</div><div class="line">/* 0 */,</div><div class="line">/* 1 */</div><div class="line">/***/ (<span class="keyword">function</span>(module, exports) &#123;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span> () &#123;</div><div class="line">	alert(<span class="string">"123"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/***/ &#125;)</div><div class="line">/******/ ]);</div></pre></td></tr></table></figure></p>
<p>咦？上面我们明明是将main.js和test.js两个打包，最后生成的bundle.js却只有test.js里面的内容，原因是因为覆盖，先打包main.js，然后test.js打包完将mian.js打包结果覆盖掉了，这时我们就需要用到动态命名<br>我们修改webpack.config.js文件内容是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//将多个文件打包生成多个文件的配置</div><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">		mian: <span class="string">'./src/script/main.js'</span>,</div><div class="line">		<span class="built_in">test</span>: <span class="string">'./src/script/test.js'</span></div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, <span class="string">'./dist/js'</span>),</div><div class="line">		filename: <span class="string">'[name]-[hash].js'</span>    //区分文件有[name], [<span class="built_in">hash</span>], [chunkhash]</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中hash是整个文件打包的hash，chunkhash是打包生成的文件hash，如果两次要打包的文件内容无任何修改，那么两个打包的hash，以及chunkhash是不变的，<br>但是如果我改了其中一个要打包的文件程序，比如修改了main.js内容，再次打包，整个文件的hash会变，打包生成的main.js的chunkhash就变了，但是打包生成的test.js的chunkhash不变，这样我们实际项目如果只发版修改的文件，只要比较chunkhash是就可以了。<br>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>出现：<br><img src="https://manlili.github.io/img/170519/6.png" alt="图"><br>这个时候我们发现dist/js文件下面生成<br>mian-c60ca74dfdc7a4138dce.js和test-c60ca74dfdc7a4138dce.js，其中mian-c60ca74dfdc7a4138dce.js内容是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/******/ ([</div><div class="line">/* 0 */</div><div class="line">/***/ (<span class="keyword">function</span>(module, exports) &#123;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">helloWord</span></span> () &#123;</div><div class="line">	<span class="built_in">return</span> &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/***/ &#125;)</div><div class="line">/******/ ]);</div></pre></td></tr></table></figure></p>
<p>test-c60ca74dfdc7a4138dce.js内容是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/******/ ([</div><div class="line">/* 0 */,</div><div class="line">/* 1 */</div><div class="line">/***/ (<span class="keyword">function</span>(module, exports) &#123;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span> () &#123;</div><div class="line">	alert(<span class="string">"123"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/***/ &#125;)</div><div class="line">/******/ ]);</div></pre></td></tr></table></figure></p>
<h3 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h3><p><a href="https://github.com/manlili/webpack_learn" target="_blank" rel="external">源码地址https://github.com/manlili/webpack_learn里面的lesson04</a><br>紧接着上面的六个步骤，下面介绍下使用plugins，这里介绍<a href="https://www.npmjs.com/package/html-webpack-plugin" target="_blank" rel="external">html-webpack-plugin插件</a>,在根目录下面打开命令行执行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install html-webpack-plugin --save-dev</div></pre></td></tr></table></figure></p>
<p>就会发现package.json多了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"html-webpack-plugin"</span>: <span class="string">"^2.28.0"</span>,</div><div class="line">    <span class="string">"webpack"</span>: <span class="string">"^2.6.1"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在webpack.config.js里面配置下plugin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var path = require(&quot;path&quot;); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">		mian: &apos;./src/script/main.js&apos;,</div><div class="line">		test: &apos;./src/script/test.js&apos;</div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, &apos;./dist/js&apos;),</div><div class="line">		filename: &apos;[name]-[hash].js&apos;    //区分文件有[name], [hash], [chunkhash]</div><div class="line">	&#125;,</div><div class="line">	plugins: [</div><div class="line">		new htmlWebpackPlugin()</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>出现：<br><img src="https://manlili.github.io/img/170519/7.png" alt="图"><br>从图上的结果我们可以发现使用了html-webpack-plugin进行打包，这时发现dist/js下面多了<br>index.html, mian-31a798066f1ba8f0dc49.js,test-31a798066f1ba8f0dc49.js,细心的就会发现比前面的六步多了个index.html,<br>下面来看下index.html的代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;title&gt;Webpack App&lt;/title&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">  &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"test-31a798066f1ba8f0dc49.js"</span>&gt;&lt;/script&gt;&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"mian-31a798066f1ba8f0dc49.js"</span>&gt;&lt;/script&gt;&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>竟然是自动引入打包后的test-hash名字.js和mian-hash名字.js，当然这都是html-webpack-plugin的功劳，但是实际项目中html并不是自动生成的，而是需要我们自定义html，然后打包生成固定的html，也就是以根目录下面的index.html为模板，生成dist下面的index.html.<br>下面来看下我们根目录的index.html文件内容:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">		&lt;title&gt;我是根目录的index.html&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;script src=<span class="string">"bundle.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>然后在webpack.config.js里面配置下plugin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var path = require(&quot;path&quot;); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">		mian: &apos;./src/script/main.js&apos;,</div><div class="line">		test: &apos;./src/script/test.js&apos;</div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, &apos;./dist/js&apos;),</div><div class="line">		filename: &apos;[name]-[hash].js&apos;    //区分文件有[name], [hash], [chunkhash]</div><div class="line">	&#125;,</div><div class="line">	plugins: [</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">			template: &apos;index.html&apos;</div><div class="line">		&#125;)</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>发现dist/js文件下index.html内容改变为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">		&lt;title&gt;我是根目录的index.html&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;script src=<span class="string">"bundle.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">	&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"test-a6e4cd93aae2ba8c9b3b.js"</span>&gt;&lt;/script&gt;&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"mian-a6e4cd93aae2ba8c9b3b.js"</span>&gt;&lt;/script&gt;&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>这时生成的index.html是根据根目录下面的index.html生成的。<br>但是此时生成的index.html在dist/js文件下，我们想根据js和html分类放置文件，可以修改webpack.config.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var path = require(&quot;path&quot;); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">		mian: &apos;./src/script/main.js&apos;,</div><div class="line">		test: &apos;./src/script/test.js&apos;</div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, &apos;./dist&apos;),</div><div class="line">		filename: &apos;js/[name]-[hash].js&apos;    //区分文件有[name], [hash], [chunkhash]</div><div class="line">	&#125;,</div><div class="line">	plugins: [</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">			template: &apos;index.html&apos;</div><div class="line">		&#125;)</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>发现dist下面打包生成的js和html已分类，如下图<br><img src="https://manlili.github.io/img/170519/8.png" alt="图"></p>
<p>下面再来介绍下html-webpack-plugin的<a href="https://www.npmjs.com/package/html-webpack-plugin" target="_blank" rel="external">其他options</a>，直接就写在webpack.config.js注释里面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">var path = require(&quot;path&quot;); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">		mian: &apos;./src/script/main.js&apos;,</div><div class="line">		test: &apos;./src/script/test.js&apos;</div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, &apos;./dist&apos;),</div><div class="line">		filename: &apos;js/[name]-[hash].js&apos;    //区分文件有[name], [hash], [chunkhash]</div><div class="line">	&#125;,</div><div class="line">	plugins: [</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">			filename: &apos;index-[hash].html&apos;, //生成的文件名字</div><div class="line">			template: &apos;index.html&apos;,  //生成文件的 模板</div><div class="line">			inject: &apos;body&apos;,    //打包生成的js,css和其他东西插入的位置</div><div class="line">			title: &apos;i am girl&apos;,</div><div class="line">			minify: &#123;  //压缩代码</div><div class="line">				collapseWhitespace: true,</div><div class="line">				html5: true</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于minify参数可以看<a href="https://github.com/kangax/html-minifier#options-quick-reference" target="_blank" rel="external">minify官网介绍</a><br>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>会发现生成index-0c16345fd56a0ca2d11b.html，内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=<span class="string">"UTF-8"</span>&gt;&lt;title&gt;我是根目录的index.html&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;script src=<span class="string">"bundle.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"js/test-3f78db648c587041fa54.js"</span>&gt;&lt;/script&gt;&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"js/mian-3f78db648c587041fa54.js"</span>&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="第八步"><a href="#第八步" class="headerlink" title="第八步"></a>第八步</h2><p>有时候我们想让plugin与将要打包的模板产生交互，这个时候就需要用到EJS语言，这个不懂的就自己去百度，源代码在<br><a href="https://github.com/manlili/webpack_learn" target="_blank" rel="external">源码地址https://github.com/manlili/webpack_learn里面的lesson05</a><br>下面我们来看一下怎么让他们产生交互,假设我们想让根目录index.html下面的模板调取webpack.config.js里面plugins的title，下面我们就需要在根目录index.html用EJS:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">		&lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;script src=<span class="string">"bundle.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>发现dist文件夹下面生成的index.html内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">		&lt;title&gt;i am girl&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;script src=<span class="string">"bundle.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">	&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"js/test-2d74c122198fd85be94e.js"</span>&gt;&lt;/script&gt;&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"js/mian-2d74c122198fd85be94e.js"</span>&gt;&lt;/script&gt;&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>从上面代码可以发现名字改变了，取得是webpack.config.js里面plugins的title。如果我们想进一步在根目录下面的index.html获取webpack.config.js里面plugins的全部options，这时候需要在根目录index.html用EJS:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">		&lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;script src=<span class="string">"bundle.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">		&lt;% <span class="keyword">for</span> (key <span class="keyword">in</span> htmlWebpackPlugin.files) &#123;%&gt;</div><div class="line">		&lt;%= key%&gt; : &lt;%= JSON.stringify(htmlWebpackPlugin.files[key]) %&gt;</div><div class="line">		&lt;% &#125; %&gt;</div><div class="line">		</div><div class="line"></div><div class="line">		&lt;% <span class="keyword">for</span> (key <span class="keyword">in</span> htmlWebpackPlugin.options) &#123;%&gt;</div><div class="line">		&lt;%= key%&gt; : &lt;%= JSON.stringify(htmlWebpackPlugin.options[key]) %&gt;</div><div class="line">		&lt;% &#125; %&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>发现dist文件夹下面生成的index.html内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">		&lt;title&gt;i am girl&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;script src=<span class="string">"bundle.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">		</div><div class="line">		publicPath : <span class="string">""</span></div><div class="line">		</div><div class="line">		chunks : &#123;<span class="string">"test"</span>:&#123;<span class="string">"size"</span>:39,<span class="string">"entry"</span>:<span class="string">"js/test-29163aeea83bc2442a2e.js"</span>,<span class="string">"hash"</span>:<span class="string">"f81274a02f5687ec6c31"</span>,<span class="string">"css"</span>:[]&#125;,<span class="string">"mian"</span>:&#123;<span class="string">"size"</span>:40,<span class="string">"entry"</span>:<span class="string">"js/mian-29163aeea83bc2442a2e.js"</span>,<span class="string">"hash"</span>:<span class="string">"bf812322b142ae514e99"</span>,<span class="string">"css"</span>:[]&#125;&#125;</div><div class="line">		</div><div class="line">		js : [<span class="string">"js/test-29163aeea83bc2442a2e.js"</span>,<span class="string">"js/mian-29163aeea83bc2442a2e.js"</span>]</div><div class="line">		</div><div class="line">		css : []</div><div class="line">		</div><div class="line">		manifest : </div><div class="line">		</div><div class="line">		</div><div class="line"></div><div class="line">		</div><div class="line">		template : <span class="string">"F:\\manlili\\github\\webpack_learn\\node_modules\\html-webpack-plugin\\lib\\loader.js!F:\\manlili\\github\\webpack_learn\\lesson05\\index.html"</span></div><div class="line">		</div><div class="line">		filename : <span class="string">"index-[hash].html"</span></div><div class="line">		</div><div class="line">		<span class="built_in">hash</span> : <span class="literal">false</span></div><div class="line">		</div><div class="line">		inject : <span class="string">"body"</span></div><div class="line">		</div><div class="line">		compile : <span class="literal">true</span></div><div class="line">		</div><div class="line">		favicon : <span class="literal">false</span></div><div class="line">		</div><div class="line">		minify : <span class="literal">false</span></div><div class="line">		</div><div class="line">		cache : <span class="literal">true</span></div><div class="line">		</div><div class="line">		showErrors : <span class="literal">true</span></div><div class="line">		</div><div class="line">		chunks : <span class="string">"all"</span></div><div class="line">		</div><div class="line">		excludeChunks : []</div><div class="line">		</div><div class="line">		title : <span class="string">"i am girl"</span></div><div class="line">		</div><div class="line">		xhtml : <span class="literal">false</span></div><div class="line">		</div><div class="line">	&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"js/test-29163aeea83bc2442a2e.js"</span>&gt;&lt;/script&gt;&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"js/mian-29163aeea83bc2442a2e.js"</span>&gt;&lt;/script&gt;&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>上面需要注意的是htmlWebpackPlugin.files.chunks.模块名.entry是打包生成的chunks路径，这个后面深入讲解的时候需要用到。<br>关于<a href="https://www.npmjs.com/package/html-webpack-plugin" target="_blank" rel="external">html-webpack-plugin插件</a>各种参数，它的官网讲的很清楚,自己可以点开链接查看。<br>下面来讲下htmlWebpackPlugin.files.chunks.模块名.entry,我们知道了路径就可以直接使用，比如在根目录index.html用EJS:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">		&lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</div><div class="line">		&lt;script src=<span class="string">"&lt;%=htmlWebpackPlugin.files.chunks.mian.entry %&gt;"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">		&lt;script src=<span class="string">"&lt;%=htmlWebpackPlugin.files.chunks.test.entry %&gt;"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>此时为了看这个效果需要将webpack.config.js中inject关闭一下，这样就不用将生成的js文件插入到生成的index.html中，专门测我们用htmlWebpackPlugin.files.chunks.模块名.entry写进去的引入方式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">		mian: <span class="string">'./src/script/main.js'</span>,</div><div class="line">		<span class="built_in">test</span>: <span class="string">'./src/script/test.js'</span></div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">		filename: <span class="string">'js/[name]-[hash].js'</span>    //区分文件有[name], [<span class="built_in">hash</span>], [chunkhash]</div><div class="line">	&#125;,</div><div class="line">	plugins: [</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">			filename: <span class="string">'index-[hash].html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			inject: <span class="literal">false</span>,    //打包生成的js,css和其他东西插入的位置</div><div class="line">			title: <span class="string">'i am girl'</span></div><div class="line">		&#125;)</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>发现dist文件夹下面生成的index.html内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">		&lt;title&gt;i am girl&lt;/title&gt;</div><div class="line">		&lt;script src=<span class="string">"js/mian-dbf6e0fc56af854ef09d.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">		&lt;script src=<span class="string">"js/test-dbf6e0fc56af854ef09d.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line"></div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>果然像我们预测那样，直接将生成的js插入了head那里。</p>
<p>如果我们想将打包后的html引入的js换成线上的地址，这个时候需要给output配置publicPath，webpack.config.js内容修改为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">		mian: <span class="string">'./src/script/main.js'</span>,</div><div class="line">		<span class="built_in">test</span>: <span class="string">'./src/script/test.js'</span></div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">		publicPath: <span class="string">'https://cdn.example.com/'</span>,</div><div class="line">		filename: <span class="string">'js/[name]-[hash].js'</span>    //区分文件有[name], [<span class="built_in">hash</span>], [chunkhash]</div><div class="line">	&#125;,</div><div class="line">	plugins: [</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">		  	filename: <span class="string">'index-[hash].html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			inject: <span class="literal">false</span>,    //打包生成的js,css和其他东西插入的位置</div><div class="line">			title: <span class="string">'i am girl'</span></div><div class="line">		&#125;)</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>发现dist文件夹下面生成的index.html内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">		&lt;title&gt;i am girl&lt;/title&gt;</div><div class="line">		&lt;script src=<span class="string">"https://cdn.example.com/js/mian-c1f69861024d42a0ffc6.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">		&lt;script src=<span class="string">"https://cdn.example.com/js/test-c1f69861024d42a0ffc6.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>从上面我们可以看出引入的是我们配置的publicPath地址，即线上的地址。</p>
<h2 id="第九步"><a href="#第九步" class="headerlink" title="第九步"></a>第九步</h2><p><a href="https://github.com/manlili/webpack_learn" target="_blank" rel="external">源码地址https://github.com/manlili/webpack_learn里面的lesson06</a><br>前面讲的都是单页面打包，下面我们对多个页面生成多个页面的方法举例说明一下:下面需要在src/script/下面创建多个待打包的js，比如a.js,b.js,c.js,d.js,这些js里面随便写一点js脚本就行，下面来看下整个目录:<br><img src="https://manlili.github.io/img/170519/9.png" alt="图"><br>接着需要修改webpack.config.js内容为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">		a: <span class="string">'./src/script/a.js'</span>,</div><div class="line">		b: <span class="string">'./src/script/a.js'</span>,</div><div class="line">		c: <span class="string">'./src/script/a.js'</span>,</div><div class="line">		d: <span class="string">'./src/script/a.js'</span></div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">		filename: <span class="string">'js/[name].js'</span>    //区分文件有[name], [<span class="built_in">hash</span>], [chunkhash]</div><div class="line">	&#125;,</div><div class="line">	plugins: [</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">		  	filename: <span class="string">'a.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			title: <span class="string">'我是a'</span></div><div class="line">		&#125;),</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">		  	filename: <span class="string">'b.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			title: <span class="string">'我是b'</span></div><div class="line">		&#125;),</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">		  	filename: <span class="string">'c.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			title: <span class="string">'我是c'</span></div><div class="line">		&#125;),</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">		  	filename: <span class="string">'d.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			title: <span class="string">'我是d'</span></div><div class="line">		&#125;)</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>发现dist文件夹下面生成的目录如下:<br><img src="https://manlili.github.io/img/170519/10.png" alt="图"><br>这里就不贴出来每个文件的代码了，打包结果是正确的。但是这个时候发现a.html里面引入的是打包后的a.js,b.js,c.js,d.js, b.html，c.html，d.html也是，下面来看下打包后的a.html内容如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">		&lt;title&gt;我是a&lt;/title&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;script src=<span class="string">"bundle.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">	&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"js/a.js"</span>&gt;&lt;/script&gt;&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"js/b.js"</span>&gt;&lt;/script&gt;&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"js/c.js"</span>&gt;&lt;/script&gt;&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"js/d.js"</span>&gt;&lt;/script&gt;&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>这与我们预期在打包后的a.html只引入a.js,b.html只引入b.js,c.html只引入c.js,d.html只引入d.js,这个时候就要去看html-webpack-plugin里面的<a href="https://www.npmjs.com/package/html-webpack-plugin" target="_blank" rel="external">chunks和excludeChunks</a>:<br>(1) chunks: 指定载入哪些chunk到打包生成的html页面<br>(2) excludeChunks: 指定排除哪些页面将剩下的chunks载入到打包生成的html页面<br>接着需要修改webpack.config.js内容为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">		a: <span class="string">'./src/script/a.js'</span>,</div><div class="line">		b: <span class="string">'./src/script/a.js'</span>,</div><div class="line">		c: <span class="string">'./src/script/a.js'</span>,</div><div class="line">		d: <span class="string">'./src/script/a.js'</span></div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">		filename: <span class="string">'js/[name].js'</span>    //区分文件有[name], [<span class="built_in">hash</span>], [chunkhash]</div><div class="line">	&#125;,</div><div class="line">	plugins: [</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">		  	filename: <span class="string">'a.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			title: <span class="string">'我是a'</span>,</div><div class="line">			chunks: [<span class="string">'a'</span>]  //注意是数组</div><div class="line">		&#125;),</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">		  	filename: <span class="string">'b.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			title: <span class="string">'我是b'</span>,</div><div class="line">			chunks: [<span class="string">'b'</span>]</div><div class="line">		&#125;),</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">		  	filename: <span class="string">'c.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			title: <span class="string">'我是c'</span>,</div><div class="line">			chunks: [<span class="string">'c'</span>]</div><div class="line">		&#125;),</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">		  	filename: <span class="string">'d.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			title: <span class="string">'我是d'</span>,</div><div class="line">			chunks: [<span class="string">'d'</span>]</div><div class="line">		&#125;)</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">		a: <span class="string">'./src/script/a.js'</span>,</div><div class="line">		b: <span class="string">'./src/script/a.js'</span>,</div><div class="line">		c: <span class="string">'./src/script/a.js'</span>,</div><div class="line">		d: <span class="string">'./src/script/a.js'</span></div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">		filename: <span class="string">'js/[name].js'</span>    //区分文件有[name], [<span class="built_in">hash</span>], [chunkhash]</div><div class="line">	&#125;,</div><div class="line">	plugins: [</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">		  	filename: <span class="string">'a.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			title: <span class="string">'我是a'</span>,</div><div class="line">			excludeChunks: [<span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]  //注意是数组</div><div class="line">		&#125;),</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">		  	filename: <span class="string">'b.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			title: <span class="string">'我是b'</span>,</div><div class="line">			excludeChunks: [<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]  //注意是数组</div><div class="line">		&#125;),</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">		  	filename: <span class="string">'c.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			title: <span class="string">'我是c'</span>,</div><div class="line">			excludeChunks: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>]  //注意是数组</div><div class="line">		&#125;),</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">		  	filename: <span class="string">'d.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			title: <span class="string">'我是d'</span>,</div><div class="line">			excludeChunks: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]  //注意是数组</div><div class="line">		&#125;)</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>发现dist文件夹下a.html只引入a.js,b.html只引入b.js,c.html只引入c.js,d.html只引入d.js,达到我们的预期。</p>
<h2 id="第十步"><a href="#第十步" class="headerlink" title="第十步"></a>第十步</h2><p><a href="https://github.com/manlili/webpack_learn" target="_blank" rel="external">源码地址https://github.com/manlili/webpack_learn里面的lesson07</a><br>我们都知道当html页面引入多个js的时候就需要多次向服务器发送请求，这样会增加带宽消耗和时间消耗，如果我们追求极致的话,其实是可以将共用的js源码直接写在html，不共用js再外链引入，这样可以节约一点时间和带宽，下面来重点讲解一下:<br>之前插件html-webpack-plugin并没有考虑这种内联情况，但是庆幸的是插件的作者给出了在webpack里面打包的解决方法，<a href="https://github.com/jantimon/html-webpack-plugin/blob/master/examples/inline/template.jade" target="_blank" rel="external">传送门</a>,首先根据官网给的例子改写我们的模板index.html:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">		&lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</div><div class="line">		&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">			&lt;%= compilation.assets[htmlWebpackPlugin.files.chunks.test.entry.substr(htmlWebpackPlugin.files.publicPath.length)].source() %&gt;  //内联化引入js</div><div class="line">		&lt;/script&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;script src=<span class="string">"&lt;%= htmlWebpackPlugin.files.chunks.d.entry %&gt;"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>上面是将test.js作为内联js嵌入每个打包生成的html里面，紧接着为了跟外链js作比较，可以在打包生成的a.html只引入a.js,b.html只引入b.js,c.html只引入c.js,d.html只引入d.js,<br>然后修改webpack.config.js内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">//将共用的js源码直接写在html，不共用js再外链引入,外链对应的js</div><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>);</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">		a: <span class="string">'./src/script/a.js'</span>,</div><div class="line">		b: <span class="string">'./src/script/b.js'</span>,</div><div class="line">		c: <span class="string">'./src/script/c.js'</span>,</div><div class="line">		d: <span class="string">'./src/script/d.js'</span>,</div><div class="line">		<span class="built_in">test</span>: <span class="string">'./src/script/test.js'</span></div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">		publicPath: <span class="string">'https://cdn.example.com/'</span>,</div><div class="line">		filename: <span class="string">'js/[name].js'</span>    //区分文件有[name], [<span class="built_in">hash</span>], [chunkhash]</div><div class="line">	&#125;,</div><div class="line">	plugins: [</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">		  	filename: <span class="string">'a.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			title: <span class="string">'我是a'</span>,</div><div class="line">			inject: <span class="literal">false</span>,</div><div class="line">			excludeChunks: [<span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]  //注意是数组</div><div class="line">		&#125;),</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">		  	filename: <span class="string">'b.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			title: <span class="string">'我是b'</span>,</div><div class="line">			inject: <span class="literal">false</span>,</div><div class="line">			excludeChunks: [<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]  //注意是数组</div><div class="line">		&#125;),</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">		  	filename: <span class="string">'c.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			title: <span class="string">'我是c'</span>,</div><div class="line">			inject: <span class="literal">false</span>,</div><div class="line">			excludeChunks: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>]  //注意是数组</div><div class="line">		&#125;),</div><div class="line">		new htmlWebpackPlugin(&#123;</div><div class="line">		  	filename: <span class="string">'d.html'</span>, //生成的文件名字</div><div class="line">			template: <span class="string">'index.html'</span>,  //生成文件的 模板</div><div class="line">			title: <span class="string">'我是d'</span>,</div><div class="line">			inject: <span class="literal">false</span>,</div><div class="line">			excludeChunks: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]  //注意是数组</div><div class="line">		&#125;)</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在根目录下打开命名行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure></p>
<p>发现dist文件夹下面生成a.html内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">		&lt;title&gt;我是a&lt;/title&gt;</div><div class="line">		&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">			/******/ (<span class="keyword">function</span>(modules) &#123; // webpackBootstrap</div><div class="line">/******/ 	// The module cache</div><div class="line">/******/ 	var installedModules = &#123;&#125;;</div><div class="line">/******/</div><div class="line">/******/ 	// The require <span class="keyword">function</span></div><div class="line">/******/ 	<span class="keyword">function</span> __webpack_require__(moduleId) &#123;</div><div class="line">/******/</div><div class="line">/******/ 		// Check <span class="keyword">if</span> module is <span class="keyword">in</span> cache</div><div class="line">/******/ 		<span class="keyword">if</span>(installedModules[moduleId]) &#123;</div><div class="line">/******/ 			<span class="built_in">return</span> installedModules[moduleId].exports;</div><div class="line">/******/ 		&#125;</div><div class="line">/******/ 		// Create a new module (and put it into the cache)</div><div class="line">/******/ 		var module = installedModules[moduleId] = &#123;</div><div class="line">/******/ 			i: moduleId,</div><div class="line">/******/ 			l: <span class="literal">false</span>,</div><div class="line">/******/ 			exports: &#123;&#125;</div><div class="line">/******/ 		&#125;;</div><div class="line">/******/</div><div class="line">/******/ 		// Execute the module <span class="keyword">function</span></div><div class="line">/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);</div><div class="line">/******/</div><div class="line">/******/ 		// Flag the module as loaded</div><div class="line">/******/ 		module.l = <span class="literal">true</span>;</div><div class="line">/******/</div><div class="line">/******/ 		// Return the exports of the module</div><div class="line">/******/ 		<span class="built_in">return</span> module.exports;</div><div class="line">/******/ 	&#125;</div><div class="line">/******/</div><div class="line">/******/</div><div class="line">/******/ 	// expose the modules object (__webpack_modules__)</div><div class="line">/******/ 	__webpack_require__.m = modules;</div><div class="line">/******/</div><div class="line">/******/ 	// expose the module cache</div><div class="line">/******/ 	__webpack_require__.c = installedModules;</div><div class="line">/******/</div><div class="line">/******/ 	// identity <span class="keyword">function</span> <span class="keyword">for</span> calling harmony imports with the correct context</div><div class="line">/******/ 	__webpack_require__.i = <span class="keyword">function</span>(value) &#123; <span class="built_in">return</span> value; &#125;;</div><div class="line">/******/</div><div class="line">/******/ 	// define getter <span class="keyword">function</span> <span class="keyword">for</span> harmony exports</div><div class="line">/******/ 	__webpack_require__.d = <span class="keyword">function</span>(exports, name, getter) &#123;</div><div class="line">/******/ 		<span class="keyword">if</span>(!__webpack_require__.o(exports, name)) &#123;</div><div class="line">/******/ 			Object.defineProperty(exports, name, &#123;</div><div class="line">/******/ 				configurable: <span class="literal">false</span>,</div><div class="line">/******/ 				enumerable: <span class="literal">true</span>,</div><div class="line">/******/ 				get: getter</div><div class="line">/******/ 			&#125;);</div><div class="line">/******/ 		&#125;</div><div class="line">/******/ 	&#125;;</div><div class="line">/******/</div><div class="line">/******/ 	// getDefaultExport <span class="keyword">function</span> <span class="keyword">for</span> compatibility with non-harmony modules</div><div class="line">/******/ 	__webpack_require__.n = <span class="keyword">function</span>(module) &#123;</div><div class="line">/******/ 		var getter = module &amp;&amp; module.__esModule ?</div><div class="line">/******/ 			<span class="keyword">function</span> <span class="function"><span class="title">getDefault</span></span>() &#123; <span class="built_in">return</span> module[<span class="string">'default'</span>]; &#125; :</div><div class="line">/******/ 			<span class="keyword">function</span> <span class="function"><span class="title">getModuleExports</span></span>() &#123; <span class="built_in">return</span> module; &#125;;</div><div class="line">/******/ 		__webpack_require__.d(getter, <span class="string">'a'</span>, getter);</div><div class="line">/******/ 		<span class="built_in">return</span> getter;</div><div class="line">/******/ 	&#125;;</div><div class="line">/******/</div><div class="line">/******/ 	// Object.prototype.hasOwnProperty.call</div><div class="line">/******/ 	__webpack_require__.o = <span class="keyword">function</span>(object, property) &#123; <span class="built_in">return</span> Object.prototype.hasOwnProperty.call(object, property); &#125;;</div><div class="line">/******/</div><div class="line">/******/ 	// __webpack_public_path__</div><div class="line">/******/ 	__webpack_require__.p = <span class="string">"https://cdn.example.com/"</span>;</div><div class="line">/******/</div><div class="line">/******/ 	// Load entry module and <span class="built_in">return</span> exports</div><div class="line">/******/ 	<span class="built_in">return</span> __webpack_require__(__webpack_require__.s = 4);</div><div class="line">/******/ &#125;)</div><div class="line">/************************************************************************/</div><div class="line">/******/ (&#123;</div><div class="line"></div><div class="line">/***/ 4:</div><div class="line">/***/ (<span class="keyword">function</span>(module, exports) &#123;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span> () &#123;</div><div class="line">	alert(<span class="string">"test"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/***/ &#125;)</div><div class="line"></div><div class="line">/******/ &#125;);  //内联化引入js</div><div class="line">		&lt;/script&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		</div><div class="line">			</div><div class="line">		</div><div class="line">			</div><div class="line">				&lt;script src=<span class="string">"https://cdn.example.com/js/a.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">			</div><div class="line">		</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>通过上面的代码我们可以看出，test.js内嵌在了a.html，并且通过<script src="https://cdn.example.com/js/a.js" type="text/javascript" charset="utf-8"></script>引入了a.js,到此为止也算是将plugin大部分讲透彻了。</p>
]]></content>
      
        <categories>
            
            <category> webpack技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webpack </tag>
            
            <tag> 打包例子 </tag>
            
            <tag> plugins </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack四大核心概念]]></title>
      <url>/2017/05/14/webpack%E5%9B%9B%E5%A4%A7%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<p>基本上每个项目都配置有一个 webpack.config.js ，它的作用如同常规的 gulpfile.js/Gruntfile.js ，就是一个配置项,上一节中提到一段代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">var webpack = require(<span class="string">'webpack'</span>);</div><div class="line">var commonsPlugin = new webpack.optimize.CommonsChunkPlugin(<span class="string">'common.js'</span>);</div><div class="line"> </div><div class="line">module.exports = &#123;</div><div class="line">    //插件项</div><div class="line">    plugins: [commonsPlugin],</div><div class="line">    //页面入口文件配置</div><div class="line">    entry: &#123;</div><div class="line">        index : <span class="string">'./src/js/page/index.js'</span></div><div class="line">    &#125;,</div><div class="line">    //入口文件输出配置</div><div class="line">    output: &#123;</div><div class="line">        path: <span class="string">'dist/js/page'</span>,</div><div class="line">        filename: <span class="string">'[name].js'</span></div><div class="line">    &#125;,</div><div class="line">    module: &#123;</div><div class="line">        //加载器配置</div><div class="line">        rules: [</div><div class="line">	      	&#123;<span class="built_in">test</span>: /\.css$/, use: <span class="string">'css-loader'</span>&#125;,</div><div class="line">	      	&#123; <span class="built_in">test</span>: /\.css$/, use: <span class="string">'style-loader!css-loader'</span> &#125;,</div><div class="line">	        &#123; <span class="built_in">test</span>: /\.js$/, use: <span class="string">'jsx-loader?harmony'</span> &#125;,</div><div class="line">	        &#123; <span class="built_in">test</span>: /\.scss$/, use: <span class="string">'style!css!sass?sourceMap'</span>&#125;,</div><div class="line">	        &#123; <span class="built_in">test</span>: /\.(png|jpg)$/, use: <span class="string">'url-loader?limit=8192'</span>&#125;</div><div class="line">	      ]</div><div class="line">    &#125;,</div><div class="line">    //其它解决方案配置</div><div class="line">    resolve: &#123;</div><div class="line">        root: <span class="string">'E:/github/flux-example/src'</span>, //绝对路径</div><div class="line">        extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.scss'</span>],</div><div class="line">        <span class="built_in">alias</span>: &#123;</div><div class="line">            AppStore : <span class="string">'js/stores/AppStores.js'</span>,</div><div class="line">            ActionType : <span class="string">'js/actions/ActionType.js'</span>,</div><div class="line">            AppAction : <span class="string">'js/actions/AppAction.js'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>下面来详细介绍一下webpack的四大核心概念</p>
<h2 id="入口entry"><a href="#入口entry" class="headerlink" title="入口entry"></a>入口entry</h2><h3 id="entry的字符串或者数组写法"><a href="#entry的字符串或者数组写法" class="headerlink" title="entry的字符串或者数组写法"></a>entry的字符串或者数组写法</h3><p>语法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">用法：entry: string|Array&lt;string&gt;</div></pre></td></tr></table></figure></p>
<p>举个例子，我们需要在webpack.config.js引入一个入口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const config = &#123;</div><div class="line">  entry: &#123;</div><div class="line">    main: <span class="string">'file.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">module.exports = config;</div></pre></td></tr></table></figure></p>
<p>由于上面是entry 属性的单个入口语法，可以简写为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const config = &#123;</div><div class="line">  entry: <span class="string">'file.js'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">module.exports = config;</div></pre></td></tr></table></figure></p>
<p>但是我们经常遇见将两个不相干的文件打包成一个文件，这样就需要写成数组方式，举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const config = &#123;</div><div class="line">  entry: [<span class="string">'file.js'</span>, <span class="string">'index.js'</span>]</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module.exports = config;</div></pre></td></tr></table></figure></p>
<h3 id="entry-对象写法"><a href="#entry-对象写法" class="headerlink" title="entry 对象写法"></a>entry 对象写法</h3><p>语法:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">用法：entry: &#123;[entryChunkName: string]: string|Array&lt;string&gt;&#125;</div></pre></td></tr></table></figure></p>
<p>举个例子，我们需要在webpack.config.js引入多个入口（多页面应用），就需要采用对象的方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const config = &#123;</div><div class="line">  entry: &#123;</div><div class="line">    app: <span class="string">'./src/app.js'</span>,</div><div class="line">    vendors: <span class="string">'./src/vendors.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">module.exports = config;</div></pre></td></tr></table></figure></p>
<p>上面需要注意的是entry使用了对象的方式，输出的output需要采用动态命名的方法，这个后面介绍到output会详细说明</p>
<h2 id="打包输出output"><a href="#打包输出output" class="headerlink" title="打包输出output"></a>打包输出output</h2><p>需要注意的是output使用的绝对路径，webpack1.0可以不用担心，但是webpack2.0需要对路径引进path进行处理一下</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">const config = &#123;</div><div class="line">  output: &#123;</div><div class="line">    filename: <span class="string">'bundle.js'</span>,  </div><div class="line">    path: path.resolve(__dirname, <span class="string">'./dist/js'</span>),    //打包后文件放在本地，并且在生成的html引入本地路径js,css等比如</div><div class="line">    publicPath: <span class="string">"http://cdn.example.com/assets/"</span>    //打包后文件放在本地，但是当本地文件被推到生产服务器，比如地址是http://cdn.example.com/assets/，这个时候文件需要引进http://cdn.example.com/assets/打包后文件的名字，publicPath就是将打包后的文件在本地直接引进线上的文件</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module.exports = config;</div></pre></td></tr></table></figure>
<p>下面来介绍下output的主要参数</p>
<h3 id="output-filename"><a href="#output-filename" class="headerlink" title="output.filename"></a>output.filename</h3><p>指定硬盘每个输出文件的名称。在这里你不能指定为绝对路径！output.path 选项规定了文件被写入硬盘的位置。filename 仅用于命名每个文件。<br>单个入口你可以写成：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">const config = &#123;</div><div class="line">  entry: <span class="string">'file.js'</span>,</div><div class="line">  output: &#123;</div><div class="line">    filename: <span class="string">'bundle.js'</span>,  </div><div class="line">    path: path.resolve(__dirname, <span class="string">'./dist/js'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module.exports = config;</div></pre></td></tr></table></figure></p>
<p>多个入口的话：<br>你应该使用以下的替换方式来确保每个文件名都不重复。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[name] 被 chunk 的 name 替换。</div><div class="line">[<span class="built_in">hash</span>] 被 compilation 生命周期的 <span class="built_in">hash</span> 替换。</div><div class="line">[chunkhash] 被 chunk 的 <span class="built_in">hash</span> 替换。</div></pre></td></tr></table></figure></p>
<p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">const config = &#123;</div><div class="line">  entry: &#123;</div><div class="line">  	a: <span class="string">'file.js'</span>,</div><div class="line">  	b: <span class="string">'test.js'</span></div><div class="line">  &#125;</div><div class="line">  output: &#123;</div><div class="line">    filename: <span class="string">'[name]-[hash].js'</span>,  </div><div class="line">    path: path.resolve(__dirname, <span class="string">'./dist/js'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module.exports = config;</div></pre></td></tr></table></figure></p>
<h3 id="output-path-必选"><a href="#output-path-必选" class="headerlink" title="output.path(必选)"></a>output.path(必选)</h3><p>导出目录为绝对路径，需要注意的是output使用的绝对路径，webpack1.0可以不用担心，但是webpack2.0需要对路径引进path进行处理一下<br>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">const config = &#123;</div><div class="line">  entry: &#123;</div><div class="line">  	a: <span class="string">'file.js'</span>,</div><div class="line">  	b: <span class="string">'test.js'</span></div><div class="line">  &#125;</div><div class="line">  output: &#123;</div><div class="line">    filename: <span class="string">'[name]-[hash].js'</span>,  </div><div class="line">    path: path.resolve(__dirname, <span class="string">'./dist/js'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">module.exports = config;</div></pre></td></tr></table></figure></p>
<p>其他参数详见<a href="https://webpack.js.org/concepts/output/" target="_blank" rel="external">output.options</a></p>
<h2 id="加载器Loaders"><a href="#加载器Loaders" class="headerlink" title="加载器Loaders"></a>加载器Loaders</h2><p>loader 是对应用程序中资源文件进行转换。它们是（运行在 Node.js 中的）函数，可以将资源文件作为参数的来源，然后返回新的资源文件,说成大白话就是将本地文件翻译成浏览器识别的文件。</p>
<h3 id="webpack中有三种方式引用loaders"><a href="#webpack中有三种方式引用loaders" class="headerlink" title="webpack中有三种方式引用loaders"></a>webpack中有三种方式引用loaders</h3><p>(1) require方式<br>举个例子:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">require(<span class="string">'style-loader!css-loader?modules!./styles.css'</span>);</div></pre></td></tr></table></figure></p>
<p>上面！是区分多个loaders的标志，?是loaders带的处理参数，类似于web的query。</p>
<p>(2) webpack CLI<br>也就是直接在gitBash里面执行打包代码的时候直接带上<br>举个例子:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --module-bind jade-loader --module-bind <span class="string">'css=style-loader!css-loader'</span></div></pre></td></tr></table></figure></p>
<p>上面这句话是将.jade后缀的文件用jade-loader处理，将.css后缀的文件用style-loader和css-loader处理。</p>
<p>(3)直接在webpack.config.js配置(这个常用)<br>举个例子:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;<span class="built_in">test</span>: /\.css$/, use: <span class="string">'css-loader'</span>&#125;,</div><div class="line">      &#123;<span class="built_in">test</span>: /\.ts$/, use: <span class="string">'ts-loader'</span>&#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>上面的意思是将所有以.css后缀结尾的文件用css-loader处理，将所有以.ts后缀结尾的文件用ts-loader处理<br>如果我们绑定多个loaders,配置如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;<span class="built_in">test</span>: /\.css$/, use: <span class="string">'css-loader'</span>&#125;,</div><div class="line">      &#123;</div><div class="line">      	<span class="built_in">test</span>: /\.ts$/, </div><div class="line">      	use: [</div><div class="line">          &#123; loader: <span class="string">'style-loader'</span>&#125;,</div><div class="line">          &#123; loader: <span class="string">'css-loader'</span>&#125;</div><div class="line">        ]</div><div class="line">       &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>如果给loaders配置参数,配置如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  module: &#123;</div><div class="line">    rules: [</div><div class="line">      &#123;<span class="built_in">test</span>: /\.css$/, use: <span class="string">'css-loader'</span>&#125;,</div><div class="line">      &#123;</div><div class="line">      	<span class="built_in">test</span>: /\.ts$/, </div><div class="line">      	use: [</div><div class="line">          &#123; loader: <span class="string">'style-loader'</span>&#125;,</div><div class="line">          &#123; </div><div class="line">          	loader: <span class="string">'css-loader'</span>,</div><div class="line">          	options: &#123;</div><div class="line">              modules: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        ]</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="插件Plugins"><a href="#插件Plugins" class="headerlink" title="插件Plugins"></a>插件Plugins</h2><p>插件是 webpack 的支柱功能。在你使用 webpack 配置时，webpack 自身也构建于同样的插件系统上，插件目的在于解决 loader 无法实现的其他事。</p>
<h3 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h3><p>由于 plugin 可以携带参数/选项，你必须在 wepback 配置中，向 plugins 属性传入 new 实例。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var path = require(<span class="string">"path"</span>); //webpack升级到2.0以后，路径需要引用这个模块</div><div class="line">var htmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>); //采用CMD的方式引进html-webpack-plugin插件</div><div class="line">module.exports = &#123;</div><div class="line">	entry: &#123;</div><div class="line">		mian: <span class="string">'./src/script/main.js'</span>,</div><div class="line">		<span class="built_in">test</span>: <span class="string">'./src/script/test.js'</span></div><div class="line">	&#125;,</div><div class="line">	output: &#123;</div><div class="line">		path: path.resolve(__dirname, <span class="string">'./dist/js'</span>),</div><div class="line">		filename: <span class="string">'[name]-[hash].js'</span>    //区分文件有[name], [<span class="built_in">hash</span>], [chunkhash]</div><div class="line">	&#125;,</div><div class="line">	plugins: [  //注意这里是数组的方式</div><div class="line">		new htmlWebpackPlugin()</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关于plugin的寻找，可以去npm官网上找你需要的插件，上面有配套的参数说明</p>
]]></content>
      
        <categories>
            
            <category> webpack技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webpack </tag>
            
            <tag> loaders </tag>
            
            <tag> plugins </tag>
            
            <tag> entry </tag>
            
            <tag> output </tag>
            
            <tag> 四大核心 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack入门指南]]></title>
      <url>/2017/05/11/webpack%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<p>gitHub地址:<a href="https://github.com/manlili/webpack_learn" target="_blank" rel="external">https://github.com/manlili/webpack_learn里面的lesson01和lesson02</a></p>
<h2 id="什么是webpack"><a href="#什么是webpack" class="headerlink" title="什么是webpack"></a>什么是webpack</h2><p>WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。</p>
<h2 id="WebPack和Grunt以及Gulp相比有什么特性"><a href="#WebPack和Grunt以及Gulp相比有什么特性" class="headerlink" title="WebPack和Grunt以及Gulp相比有什么特性"></a>WebPack和Grunt以及Gulp相比有什么特性</h2><p>其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack可以替代Gulp/Grunt类的工具。<br>Grunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，这个工具之后可以自动替你完成这些任务,用下面的图说明：<br><img src="https://manlili.github.io/img/170511/1.png" alt="图"><br>Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个浏览器可识别的JavaScript文件,用下面的图说明:<br><img src="https://manlili.github.io/img/170511/2.jpg" alt="图"></p>
<h2 id="webpack-的优势"><a href="#webpack-的优势" class="headerlink" title="webpack 的优势"></a>webpack 的优势</h2><p>其优势主要可以归类为如下几个：</p>
<ol>
<li>webpack 是以 commonJS 的形式来书写脚本滴，但对 AMD/CMD 的支持也很全面，方便旧项目进行代码迁移。</li>
<li>能被模块化的不仅仅是 JS 了。</li>
<li>开发便捷，能替代部分 grunt/gulp 的工作，比如打包、压缩混淆、图片转base64等。</li>
<li>扩展性强，插件机制完善，特别是支持 React 热插拔（见 react-hot-loader ）的功能让人眼前一亮。<br>我们谈谈第一点。以 AMD/CMD 模式来说，鉴于模块是异步加载的，所以我们常规需要使用 define 函数来帮我们搞回调：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'package/lib'</span>], <span class="keyword">function</span>(lib)&#123;</div><div class="line">  <span class="keyword">function</span> <span class="function"><span class="title">foo</span></span>()&#123;</div><div class="line">      lib.log(<span class="string">'hello world!'</span>);</div><div class="line">  &#125; </div><div class="line">  <span class="built_in">return</span> &#123;</div><div class="line">      foo: foo</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>另外为了可以兼容 commonJS 的写法，我们也可以将 define 这么写：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">define(<span class="keyword">function</span> (require, exports, module)&#123;</div><div class="line">  var someModule = require(<span class="string">"someModule"</span>);</div><div class="line">  var anotherModule = require(<span class="string">"anotherModule"</span>);    </div><div class="line"></div><div class="line">  someModule.doTehAwesome();</div><div class="line">  anotherModule.doMoarAwesome();</div><div class="line"></div><div class="line">  exports.asplode = <span class="function"><span class="title">function</span></span> ()&#123;</div><div class="line">      someModule.doTehAwesome();</div><div class="line">      anotherModule.doMoarAwesome();</div><div class="line">  &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>然而对 webpack 来说，我们可以直接在上面书写 commonJS 形式的语法，无须任何 define （毕竟最终模块都打包在一起，webpack 也会最终自动加上自己的加载器）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var someModule = require(<span class="string">"someModule"</span>);</div><div class="line">var anotherModule = require(<span class="string">"anotherModule"</span>);    </div><div class="line"></div><div class="line">someModule.doTehAwesome();</div><div class="line">anotherModule.doMoarAwesome();</div><div class="line"></div><div class="line">exports.asplode = <span class="function"><span class="title">function</span></span> ()&#123;</div><div class="line">  someModule.doTehAwesome();</div><div class="line">  anotherModule.doMoarAwesome();</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>这样撸码自然更简单，跟回调神马的说 byebye~<br>不过即使你保留了之前 define 的写法也是可以滴，毕竟 webpack 的兼容性相当出色，方便你旧项目的模块直接迁移过来。</p>
<p>由于webapck跟grunt很相似，那么就按照grunt博客模式写一遍webpack的说明，正好来比较一下两者的区别,详见grunt博客说明地址:<a href="https://manlili.github.io/categories/grunt%E6%8A%80%E6%9C%AF/" target="_blank" rel="external">传送门</a></p>
<h2 id="webpack项目准备"><a href="#webpack项目准备" class="headerlink" title="webpack项目准备"></a>webpack项目准备</h2><p>首先需要创建一个空白的文件夹，然后按以下步骤生成</p>
<h3 id="准备package-json文件"><a href="#准备package-json文件" class="headerlink" title="准备package.json文件"></a>准备package.json文件</h3><p>package.json:此文件被npm用于存储项目的元数据，以便将此项目发布为npm模块。你可以在此文件中列出项目依赖的webpack插件，放置于devDependencies配置字段内。<br>生成package.json命令,右键gitBash输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure></p>
<p>然后按提示输入参数，结果如下图：<br><img src="https://manlili.github.io/img/170511/3.png" alt="图"><br>生成的package.json内容是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"lesson01"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">"manlili"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h2><p>安装命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//全局安装</div><div class="line">npm install -g webpack</div></pre></td></tr></table></figure></p>
<p>向已经存在的package.json 文件中添加webpack插件的最简单方式是通过npm install –save-dev命令。此命令不光安装了，还会自动将其添加到devDependencies 配置段中，命令如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack --save-dev</div></pre></td></tr></table></figure></p>
<p>再去看package.json内容是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"lesson01"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">"manlili"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"webpack"</span>: <span class="string">"^2.5.1"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码发现多了devDependencies字段</p>
<h2 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h2><p>基本上每个项目都配置有一个 webpack.config.js ，它的作用如同常规的 gulpfile.js/Gruntfile.js ，就是一个配置项，告诉 webpack 它需要做什么。<br>下面来看一个例子:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">var webpack = require(<span class="string">'webpack'</span>);</div><div class="line">var commonsPlugin = new webpack.optimize.CommonsChunkPlugin(<span class="string">'common.js'</span>);</div><div class="line"> </div><div class="line">module.exports = &#123;</div><div class="line">    //插件项</div><div class="line">    plugins: [commonsPlugin],</div><div class="line">    //页面入口文件配置</div><div class="line">    entry: &#123;</div><div class="line">        index : <span class="string">'./src/js/page/index.js'</span></div><div class="line">    &#125;,</div><div class="line">    //入口文件输出配置</div><div class="line">    output: &#123;</div><div class="line">        path: <span class="string">'dist/js/page'</span>,</div><div class="line">        filename: <span class="string">'[name].js'</span></div><div class="line">    &#125;,</div><div class="line">    module: &#123;</div><div class="line">        //加载器配置</div><div class="line">        loaders: [</div><div class="line">            &#123; <span class="built_in">test</span>: /\.css$/, loader: <span class="string">'style-loader!css-loader'</span> &#125;,</div><div class="line">            &#123; <span class="built_in">test</span>: /\.js$/, loader: <span class="string">'jsx-loader?harmony'</span> &#125;,</div><div class="line">            &#123; <span class="built_in">test</span>: /\.scss$/, loader: <span class="string">'style!css!sass?sourceMap'</span>&#125;,</div><div class="line">            &#123; <span class="built_in">test</span>: /\.(png|jpg)$/, loader: <span class="string">'url-loader?limit=8192'</span>&#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    //其它解决方案配置</div><div class="line">    resolve: &#123;</div><div class="line">        root: <span class="string">'E:/github/flux-example/src'</span>, //绝对路径</div><div class="line">        extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.scss'</span>],</div><div class="line">        <span class="built_in">alias</span>: &#123;</div><div class="line">            AppStore : <span class="string">'js/stores/AppStores.js'</span>,</div><div class="line">            ActionType : <span class="string">'js/actions/ActionType.js'</span>,</div><div class="line">            AppAction : <span class="string">'js/actions/AppAction.js'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="plugins-是插件项"><a href="#plugins-是插件项" class="headerlink" title="plugins 是插件项"></a>plugins 是插件项</h3><p>这里我们使用了一个 CommonsChunkPlugin 的插件，它用于提取多个入口文件的公共脚本部分，然后生成一个 common.js 来方便多页面之间进行复用。</p>
<h3 id="entry-amp-amp-output"><a href="#entry-amp-amp-output" class="headerlink" title="entry&amp;&amp;output"></a>entry&amp;&amp;output</h3><p>它是页面入口文件配置，output 是对应输出项配置（即入口文件最终要生成什么名字的文件、存放到哪里），其语法大致为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    entry: &#123;</div><div class="line">        page1: <span class="string">"./page1"</span>,</div><div class="line">        //支持数组形式，将加载数组中的所有模块，但以最后一个模块作为输出</div><div class="line">        page2: [<span class="string">"./entry1"</span>, <span class="string">"./entry2"</span>]</div><div class="line">    &#125;,</div><div class="line">    output: &#123;</div><div class="line">        path: <span class="string">"dist/js/page"</span>,</div><div class="line">        filename: <span class="string">"[name].bundle.js"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该段代码最终会生成一个 page1.bundle.js 和 page2.bundle.js，并存放到 ./dist/js/page 文件夹下。</p>
<h3 id="module-loaders"><a href="#module-loaders" class="headerlink" title="module.loaders"></a>module.loaders</h3><p>它是最关键的一块配置。它告知 webpack 每一种文件都需要使用什么加载器来处理：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">module: &#123;</div><div class="line">  //加载器配置</div><div class="line">  loaders: [</div><div class="line">      //.css 文件使用 style-loader 和 css-loader 来处理</div><div class="line">      &#123; <span class="built_in">test</span>: /\.css$/, loader: <span class="string">'style-loader!css-loader'</span> &#125;,</div><div class="line">      //.js 文件使用 jsx-loader 来编译处理</div><div class="line">      &#123; <span class="built_in">test</span>: /\.js$/, loader: <span class="string">'jsx-loader?harmony'</span> &#125;,</div><div class="line">      //.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理</div><div class="line">      &#123; <span class="built_in">test</span>: /\.scss$/, loader: <span class="string">'style!css!sass?sourceMap'</span>&#125;,</div><div class="line">      //图片文件使用 url-loader 来处理，小于8kb的直接转为base64</div><div class="line">      &#123; <span class="built_in">test</span>: /\.(png|jpg)$/, loader: <span class="string">'url-loader?limit=8192'</span>&#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如上，”-loader”其实是可以省略不写的，多个loader之间用“!”连接起来,注意所有的加载器都需要通过 npm 来加载.<br>拿最后一个 url-loader 来说，它会将样式中引用到的图片转为模块来处理，使用该加载器需要先进行安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install url-loader -save-dev</div></pre></td></tr></table></figure></p>
<p>配置信息的参数“?limit=8192”表示将所有小于8kb的图片都转为base64形式（其实应该说超过8kb的才使用 url-loader 来映射到文件，否则转为data url形式）。</p>
<h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><p>最后是 resolve 配置，这块很好理解，直接写注释了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line">    //查找module的话从这里开始查找</div><div class="line">    root: <span class="string">'E:/github/flux-example/src'</span>, //绝对路径</div><div class="line">    //自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名</div><div class="line">    extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.scss'</span>],</div><div class="line">    //模块别名定义，方便后续直接引用别名，无须多写长长的地址</div><div class="line">    <span class="built_in">alias</span>: &#123;</div><div class="line">        AppStore : <span class="string">'js/stores/AppStores.js'</span>,//后续直接 require(<span class="string">'AppStore'</span>) 即可</div><div class="line">        ActionType : <span class="string">'js/actions/ActionType.js'</span>,</div><div class="line">        AppAction : <span class="string">'js/actions/AppAction.js'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="webpack使用小例子-1"><a href="#webpack使用小例子-1" class="headerlink" title="webpack使用小例子(1)"></a>webpack使用小例子(1)</h2><p><a href="https://github.com/manlili/webpack_learn" target="_blank" rel="external">https://github.com/manlili/webpack_learn里面的lesson02</a></p>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>在空白的文件夹正确的安装webpack，这一步上面有介绍。</p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>创建index.js,内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.write(<span class="string">'你好'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>打开所在的文件夹运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack index.js index.bundle.js</div></pre></td></tr></table></figure></p>
<p>出现<br><img src="https://manlili.github.io/img/170511/8.png" alt="图"><br>注意上面的四个title:<br>Asset: 生成的目标文件<br>Size: 生成的文件大小<br>Chunks: 生成的文件中不同的分块<br>Chunks Name: 生成的文件中不同的分块名字</p>
<p>关于Chunks下面来看下生成的index.bundle.js详细内容:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">/******/ (<span class="keyword">function</span>(modules) &#123; // webpackBootstrap</div><div class="line">/******/ 	// The module cache</div><div class="line">/******/ 	var installedModules = &#123;&#125;;</div><div class="line">/******/</div><div class="line">/******/ 	// The require <span class="keyword">function</span></div><div class="line">/******/ 	<span class="keyword">function</span> __webpack_require__(moduleId) &#123;</div><div class="line">/******/</div><div class="line">/******/ 		// Check <span class="keyword">if</span> module is <span class="keyword">in</span> cache</div><div class="line">/******/ 		<span class="keyword">if</span>(installedModules[moduleId]) &#123;</div><div class="line">/******/ 			<span class="built_in">return</span> installedModules[moduleId].exports;</div><div class="line">/******/ 		&#125;</div><div class="line">/******/ 		// Create a new module (and put it into the cache)</div><div class="line">/******/ 		var module = installedModules[moduleId] = &#123;</div><div class="line">/******/ 			i: moduleId,</div><div class="line">/******/ 			l: <span class="literal">false</span>,</div><div class="line">/******/ 			exports: &#123;&#125;</div><div class="line">/******/ 		&#125;;</div><div class="line">/******/</div><div class="line">/******/ 		// Execute the module <span class="keyword">function</span></div><div class="line">/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);</div><div class="line">/******/</div><div class="line">/******/ 		// Flag the module as loaded</div><div class="line">/******/ 		module.l = <span class="literal">true</span>;</div><div class="line">/******/</div><div class="line">/******/ 		// Return the exports of the module</div><div class="line">/******/ 		<span class="built_in">return</span> module.exports;</div><div class="line">/******/ 	&#125;</div><div class="line">/******/</div><div class="line">/******/</div><div class="line">/******/ 	// expose the modules object (__webpack_modules__)</div><div class="line">/******/ 	__webpack_require__.m = modules;</div><div class="line">/******/</div><div class="line">/******/ 	// expose the module cache</div><div class="line">/******/ 	__webpack_require__.c = installedModules;</div><div class="line">/******/</div><div class="line">/******/ 	// identity <span class="keyword">function</span> <span class="keyword">for</span> calling harmony imports with the correct context</div><div class="line">/******/ 	__webpack_require__.i = <span class="keyword">function</span>(value) &#123; <span class="built_in">return</span> value; &#125;;</div><div class="line">/******/</div><div class="line">/******/ 	// define getter <span class="keyword">function</span> <span class="keyword">for</span> harmony exports</div><div class="line">/******/ 	__webpack_require__.d = <span class="keyword">function</span>(exports, name, getter) &#123;</div><div class="line">/******/ 		<span class="keyword">if</span>(!__webpack_require__.o(exports, name)) &#123;</div><div class="line">/******/ 			Object.defineProperty(exports, name, &#123;</div><div class="line">/******/ 				configurable: <span class="literal">false</span>,</div><div class="line">/******/ 				enumerable: <span class="literal">true</span>,</div><div class="line">/******/ 				get: getter</div><div class="line">/******/ 			&#125;);</div><div class="line">/******/ 		&#125;</div><div class="line">/******/ 	&#125;;</div><div class="line">/******/</div><div class="line">/******/ 	// getDefaultExport <span class="keyword">function</span> <span class="keyword">for</span> compatibility with non-harmony modules</div><div class="line">/******/ 	__webpack_require__.n = <span class="keyword">function</span>(module) &#123;</div><div class="line">/******/ 		var getter = module &amp;&amp; module.__esModule ?</div><div class="line">/******/ 			<span class="keyword">function</span> <span class="function"><span class="title">getDefault</span></span>() &#123; <span class="built_in">return</span> module[<span class="string">'default'</span>]; &#125; :</div><div class="line">/******/ 			<span class="keyword">function</span> <span class="function"><span class="title">getModuleExports</span></span>() &#123; <span class="built_in">return</span> module; &#125;;</div><div class="line">/******/ 		__webpack_require__.d(getter, <span class="string">'a'</span>, getter);</div><div class="line">/******/ 		<span class="built_in">return</span> getter;</div><div class="line">/******/ 	&#125;;</div><div class="line">/******/</div><div class="line">/******/ 	// Object.prototype.hasOwnProperty.call</div><div class="line">/******/ 	__webpack_require__.o = <span class="keyword">function</span>(object, property) &#123; <span class="built_in">return</span> Object.prototype.hasOwnProperty.call(object, property); &#125;;</div><div class="line">/******/</div><div class="line">/******/ 	// __webpack_public_path__</div><div class="line">/******/ 	__webpack_require__.p = <span class="string">""</span>;</div><div class="line">/******/</div><div class="line">/******/ 	// Load entry module and <span class="built_in">return</span> exports</div><div class="line">/******/ 	<span class="built_in">return</span> __webpack_require__(__webpack_require__.s = 0);</div><div class="line">/******/ &#125;)</div><div class="line">/************************************************************************/</div><div class="line">/******/ ([</div><div class="line">/* 0 */</div><div class="line">/***/ (<span class="keyword">function</span>(module, exports) &#123;</div><div class="line"></div><div class="line">document.write(<span class="string">'你好'</span>);</div><div class="line"></div><div class="line">/***/ &#125;)</div><div class="line">/******/ ]);</div></pre></td></tr></table></figure></p>
<p>最上面的那一大段是webpack打包自动生成的，一般无需理会，需要理会的只有<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/******/ ([</div><div class="line">/* 0 */</div><div class="line">/***/ (<span class="keyword">function</span>(module, exports) &#123;</div><div class="line"></div><div class="line">document.write(<span class="string">'你好'</span>);</div><div class="line"></div><div class="line">/***/ &#125;)</div><div class="line">/******/ ]);</div></pre></td></tr></table></figure></p>
<p>0代表第一个Chunks,如果还有其他Chunks就会出现:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/******/ ([</div><div class="line">/* 0 */</div><div class="line">/***/ (<span class="keyword">function</span>(module, exports) &#123;</div><div class="line"></div><div class="line">document.write(<span class="string">'你好'</span>);</div><div class="line"></div><div class="line">/***/ &#125;)</div><div class="line">/******/ ]);</div><div class="line">/******/ ([</div><div class="line">/* 1 */</div><div class="line">/***/ (<span class="keyword">function</span>(module, exports) &#123;</div><div class="line"></div><div class="line">document.write(<span class="string">'你好1'</span>);</div><div class="line"></div><div class="line">/***/ &#125;)</div><div class="line">/******/ ]);</div><div class="line">/* 2 */</div><div class="line">/***/ (<span class="keyword">function</span>(module, exports) &#123;</div><div class="line"></div><div class="line">document.write(<span class="string">'你好2'</span>);</div><div class="line"></div><div class="line">/***/ &#125;)</div><div class="line">/******/ ]);</div></pre></td></tr></table></figure></p>
<h2 id="webpack使用小例子-2"><a href="#webpack使用小例子-2" class="headerlink" title="webpack使用小例子(2)"></a>webpack使用小例子(2)</h2><p><a href="https://github.com/manlili/webpack_learn" target="_blank" rel="external">https://github.com/manlili/webpack_learn里面的lesson01</a></p>
<h3 id="第一步-1"><a href="#第一步-1" class="headerlink" title="第一步"></a>第一步</h3><p>在空白的文件夹正确的安装webpack，这一步上面有介绍。</p>
<h3 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h3><p>创建index.js,内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.write(<span class="string">'你好'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="第三步-1"><a href="#第三步-1" class="headerlink" title="第三步"></a>第三步</h3><p>创建index.html,内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">  &lt;meta charset=<span class="string">"utf-8"</span>&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span> src=<span class="string">"bundle.js"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>此时文件目录内容是:<br><img src="https://manlili.github.io/img/170511/4.png" alt="图">,而打开index.html页面显示是空白</p>
<h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>将index.js转化为bundle.js,执行命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack ./index.js bundle.js</div></pre></td></tr></table></figure></p>
<p>命令行如下:<br><img src="https://manlili.github.io/img/170511/5.png" alt="图"><br>此时发现文件夹下面多了个bundle.js<br><img src="https://manlili.github.io/img/170511/6.png" alt="图"><br>再打开index.html发现出现了文字<br><img src="https://manlili.github.io/img/170511/7.png" alt="图"></p>
]]></content>
      
        <categories>
            
            <category> webpack技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[try-catch-throw]]></title>
      <url>/2017/05/07/try-catch-throw/</url>
      <content type="html"><![CDATA[<p>今天介绍下JavaScript 测试和捕捉以及自定义错误。<br>try 语句测试代码块的错误。<br>catch 语句处理错误。<br>throw 语句创建自定义错误。</p>
<h2 id="try-amp-amp-catch"><a href="#try-amp-amp-catch" class="headerlink" title="try&amp;&amp;catch"></a>try&amp;&amp;catch</h2><p>try 语句允许我们定义在执行时进行错误测试的代码块。catch 语句允许我们定义当 try 代码块发生错误时，所执行的代码块。JavaScript 语句 try 和 catch 是成对出现的。<br>语法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">try</div><div class="line">  &#123;</div><div class="line">  //在这里运行代码</div><div class="line">  &#125;</div><div class="line">catch(err)</div><div class="line">  &#123;</div><div class="line">    //在这里处理错误</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>实例如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">  adddlert(<span class="string">"Welcome guest!"</span>);</div><div class="line">&#125;</div><div class="line">catch(err)&#123;   //err为try捕捉的错误</div><div class="line">  alert(err.message);  //弹出adddlert is not defined</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h2><p>throw 语句用来抛出一个用户自定义的异常。当前函数的执行将被停止（throw之后的语句将不会执行），这点很重要。</p>
<h3 id="throw直接抛出异常"><a href="#throw直接抛出异常" class="headerlink" title="throw直接抛出异常"></a>throw直接抛出异常</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">  <span class="keyword">if</span> (typeof <span class="string">'123'</span> ===number ) &#123;</div><div class="line">    throw <span class="string">'不是数字'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">catch(err) &#123;</div><div class="line">  console.log(err);  //输出不是数字</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="throw抛出新对象"><a href="#throw抛出新对象" class="headerlink" title="throw抛出新对象"></a>throw抛出新对象</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> UserException(error) &#123;</div><div class="line">   this.message = error;</div><div class="line">   this.name = <span class="string">"名字是测试"</span>;</div><div class="line">&#125;</div><div class="line">try &#123;</div><div class="line">  <span class="keyword">if</span> (typeof <span class="string">'123'</span> !== <span class="string">'number'</span> ) &#123;</div><div class="line">    throw new UserException(<span class="string">'不是数字'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">catch(e) &#123;</div><div class="line">  console.log(e.message, e.name); //输出<span class="string">'不是数字'</span>和<span class="string">'名字是测试'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> js技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> try </tag>
            
            <tag> catch </tag>
            
            <tag> throw </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数组的6个迭代方法]]></title>
      <url>/2017/05/04/%E6%95%B0%E7%BB%84%E8%BF%AD%E4%BB%A3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>最近在看红宝书，把数组的6个迭代方法图形描述一下:<br><img src="https://manlili.github.io/img/170504/1.png" alt="图"></p>
]]></content>
      
        <categories>
            
            <category> js技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> forEach </tag>
            
            <tag> map </tag>
            
            <tag> filter </tag>
            
            <tag> reduce </tag>
            
            <tag> every </tag>
            
            <tag> some </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6之Promise]]></title>
      <url>/2017/04/24/ES6%E4%B9%8BPromise/</url>
      <content type="html"><![CDATA[<p>Promise 是异步编程的一种解决方案.</p>
<h2 id="Promise对象特点"><a href="#Promise对象特点" class="headerlink" title="Promise对象特点"></a>Promise对象特点</h2><p>Promise对象有以下两个特点。<br>(1)对象的状态不受外界影响。<br>Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p>
<p>(2)一旦状态改变，就不会再变，任何时候都可以得到这个结果。<br>Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>
<h2 id="Promise缺点"><a href="#Promise缺点" class="headerlink" title="Promise缺点"></a>Promise缺点</h2><p>(1)首先，无法取消Promise，一旦新建它就会立即执行，无法中途取消。<br>(2)如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。<br>(3)当处于Pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p>
<h2 id="Promise用法"><a href="#Promise用法" class="headerlink" title="Promise用法"></a>Promise用法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var promise = new Promise(<span class="keyword">function</span>(resolve, reject) &#123;</div><div class="line">  <span class="keyword">if</span> (/* 异步操作成功 */)&#123;</div><div class="line">    resolve(value);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    reject(error);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">promise.then(<span class="keyword">function</span>(value) &#123;  //Promise实例生成以后，可以用<span class="keyword">then</span>方法分别指定Resolved状态和Reject状态的回调函数。</div><div class="line">  // success</div><div class="line">&#125;, <span class="keyword">function</span>(error) &#123;</div><div class="line">  // failure</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由JavaScript引擎提供，不用自己部署。</p>
<p>Promise新建后就会立即执行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> promise = new Promise(<span class="keyword">function</span>(resolve, reject) &#123;</div><div class="line">  console.log(<span class="string">'Promise'</span>);</div><div class="line">  resolve();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">promise.then(<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">  console.log(<span class="string">'Resolved.'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">console.log(<span class="string">'Hi!'</span>);</div><div class="line">// Promise</div><div class="line">// Hi!</div><div class="line">// Resolved</div></pre></td></tr></table></figure></p>
<p>下面是一个用Promise对象实现的Ajax操作的例子:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">var getJSON = <span class="keyword">function</span>(url) &#123;</div><div class="line">  var promise = new Promise(<span class="keyword">function</span>(resolve, reject)&#123;</div><div class="line">    var client = new XMLHttpRequest();</div><div class="line">    client.open(<span class="string">"GET"</span>, url);</div><div class="line">    client.onreadystatechange = handler;</div><div class="line">    client.responseType = <span class="string">"json"</span>;</div><div class="line">    client.setRequestHeader(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>);</div><div class="line">    client.send();</div><div class="line"></div><div class="line">    <span class="keyword">function</span> <span class="function"><span class="title">handler</span></span>() &#123;</div><div class="line">      <span class="keyword">if</span> (this.readyState !== 4) &#123;</div><div class="line">        <span class="built_in">return</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (this.status === 200) &#123;</div><div class="line">        resolve(this.response);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        reject(new Error(this.statusText));</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="built_in">return</span> promise;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">getJSON(<span class="string">"/posts.json"</span>).then(<span class="keyword">function</span>(json) &#123;</div><div class="line">  console.log(<span class="string">'Contents: '</span> + json);</div><div class="line">&#125;, <span class="keyword">function</span>(error) &#123;</div><div class="line">  console.error(<span class="string">'出错了'</span>, error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>针对嵌套回调函数:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var p1 = new Promise(<span class="keyword">function</span> (resolve, reject) &#123;</div><div class="line">  <span class="built_in">set</span>Timeout(() =&gt; reject(new Error(<span class="string">'fail'</span>)), 3000)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">var p2 = new Promise(<span class="keyword">function</span> (resolve, reject) &#123;</div><div class="line">  <span class="built_in">set</span>Timeout(() =&gt; resolve(p1), 1000)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">p2</div><div class="line">  .then(result =&gt; console.log(result))</div><div class="line">  .catch(error =&gt; console.log(error))</div><div class="line">// Error: fail</div></pre></td></tr></table></figure></p>
<p>上面代码中，p1是一个Promise，3秒之后变为rejected。p2的状态在1秒之后改变，resolve方法返回的是p1。由于p2返回的是另一个 Promise，导致p2自己的状态无效了，由p1的状态决定p2的状态。所以，后面的then语句都变成针对后者（p1）。又过了2秒，p1变为rejected，导致触发catch方法指定的回调函数。</p>
<h2 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h2><p>它的作用是为Promise实例添加状态改变时的回调函数,then方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">getJSON(<span class="string">"/posts.json"</span>).then(<span class="keyword">function</span>(json) &#123;</div><div class="line">  <span class="built_in">return</span> json.post;    //将结果传给第二个<span class="keyword">then</span></div><div class="line">&#125;).then(<span class="keyword">function</span>(post) &#123;</div><div class="line">  // ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>上面的代码使用then方法，依次指定了两个回调函数。第一个回调函数完成以后，注意第一个回调函数就算还有promise也要等它结束，会将返回结果return作为参数，传入第二个回调函数。</p>
<h2 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h2><p>Promise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">p.then((val) =&gt; console.log(<span class="string">'fulfilled:'</span>, val))</div><div class="line">  .catch((err) =&gt; console.log(<span class="string">'rejected'</span>, err));</div><div class="line"></div><div class="line">// 等同于</div><div class="line">p.then((val) =&gt; console.log(<span class="string">'fulfilled:'</span>, val))</div><div class="line">  .then(null, (err) =&gt; console.log(<span class="string">"rejected:"</span>, err));</div></pre></td></tr></table></figure></p>
<p>then方法指定的回调函数，如果运行中抛出错误，也会被catch方法捕获。</p>
<p>如果Promise状态已经变成Resolved，再抛出错误是无效的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var promise = new Promise(<span class="keyword">function</span>(resolve, reject) &#123;</div><div class="line">  resolve(<span class="string">'ok'</span>);</div><div class="line">  throw new Error(<span class="string">'test'</span>);</div><div class="line">&#125;);</div><div class="line">promise</div><div class="line">  .then(<span class="keyword">function</span>(value) &#123; console.log(value) &#125;)</div><div class="line">  .catch(<span class="keyword">function</span>(error) &#123; console.log(error) &#125;);</div><div class="line">// ok</div></pre></td></tr></table></figure></p>
<p>上面代码中，Promise 在resolve语句后面，再抛出错误，不会被捕获，等于没有抛出。因为 Promise 的状态一旦改变，就永久保持该状态，不会再变了。</p>
<p>Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个catch语句捕获。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">getJSON(<span class="string">'/post/1.json'</span>).then(<span class="keyword">function</span>(post) &#123;</div><div class="line">  <span class="built_in">return</span> getJSON(post.commentURL);</div><div class="line">&#125;).then(<span class="keyword">function</span>(comments) &#123;</div><div class="line">  // some code</div><div class="line">&#125;).catch(<span class="keyword">function</span>(error) &#123;</div><div class="line">  // 处理前面三个Promise产生的错误</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>上面代码中，一共有三个Promise对象：一个由getJSON产生，两个由then产生。它们之中任何一个抛出的错误，都会被最后一个catch捕获。</p>
<p>需要注意的是，catch方法返回的还是一个 Promise 对象，因此后面还可以接着调用then方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">promise</div><div class="line">  .then(<span class="keyword">function</span>(data) &#123;</div><div class="line">    // success</div><div class="line">  &#125;, <span class="keyword">function</span>(err) &#123;</div><div class="line">    // error</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">// good</div><div class="line">promise</div><div class="line">  .then(<span class="keyword">function</span>(data) &#123; //cb</div><div class="line">    // success</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="keyword">function</span>(err) &#123;</div><div class="line">    // error</div><div class="line">  &#125;)</div><div class="line">  .then (<span class="keyword">function</span>(data) &#123; //cb</div><div class="line">    // success</div><div class="line">  &#125;)</div></pre></td></tr></table></figure></p>
<p>第二种写法要好于第一种写法，理由是第二种写法可以捕获前面then方法执行中的错误，也更接近同步的写法（try/catch）。因此，建议总是使用catch方法，而不使用then方法的第二个参数。</p>
<h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h2><p>Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例,参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是Promise实例。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var p = Promise.all([p1, p2, p3]);</div></pre></td></tr></table></figure></p>
<p>p的状态由p1、p2、p3决定，分成两种情况。<br>(1)只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。<br>(2)只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">const databasePromise = connectDatabase();</div><div class="line"></div><div class="line">const booksPromise = databasePromise</div><div class="line">  .then(findAllBooks);</div><div class="line"></div><div class="line">const userPromise = databasePromise</div><div class="line">  .then(getCurrentUser);</div><div class="line"></div><div class="line">Promise.all([</div><div class="line">  booksPromise,</div><div class="line">  userPromise</div><div class="line">])</div><div class="line">.then(([books, user]) =&gt; pickTopRecommentations(books, user));</div></pre></td></tr></table></figure></p>
<p>上面代码中，booksPromise和userPromise是两个异步操作，只有等到它们的结果都返回了，才会触发pickTopRecommentations这个回调函数。</p>
<h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h2><p>Promise.race方法同样是将多个Promise实例，包装成一个新的Promise实例。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var p = Promise.race([p1, p2, p3]);</div></pre></td></tr></table></figure></p>
<p>上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">const databasePromise = connectDatabase();</div><div class="line"></div><div class="line">const booksPromise = databasePromise</div><div class="line">  .then(findAllBooks);</div><div class="line"></div><div class="line">const userPromise = databasePromise</div><div class="line">  .then(getCurrentUser);</div><div class="line"></div><div class="line">Promise.all([</div><div class="line">  booksPromise,</div><div class="line">  userPromise</div><div class="line">])</div><div class="line">.then(one =&gt; pickTopRecommentations(one));</div></pre></td></tr></table></figure></p>
<h2 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h2><p>有时需要将现有对象转为Promise对象，Promise.resolve方法就起到这个作用,Promise.resolve方法允许调用时不带参数，直接返回一个Resolved状态的Promise对象。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Promise.resolve(<span class="string">'foo'</span>)</div><div class="line"></div><div class="line">// 等价于</div><div class="line">new Promise(resolve =&gt; resolve(<span class="string">'foo'</span>))</div></pre></td></tr></table></figure></p>
<h2 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h2><p>Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为rejected。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var p = Promise.reject(<span class="string">'出错了'</span>);</div><div class="line">// 等同于</div><div class="line">var p = new Promise((resolve, reject) =&gt; reject(<span class="string">'出错了'</span>))</div></pre></td></tr></table></figure></p>
<h2 id="不是ES6，但是很有用的方法"><a href="#不是ES6，但是很有用的方法" class="headerlink" title="不是ES6，但是很有用的方法"></a>不是ES6，但是很有用的方法</h2><h3 id="done"><a href="#done" class="headerlink" title="done()"></a>done()</h3><p>Promise对象的回调链，不管以then方法或catch方法结尾，要是最后一个方法抛出错误，都有可能无法捕捉到（因为Promise内部的错误不会冒泡到全局）。因此，我们可以提供一个done方法，总是处于回调链的尾端，保证抛出任何可能出现的错误。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">asyncFunc()</div><div class="line">  .then(f1)</div><div class="line">  .catch(r1)</div><div class="line">  .then(f2)</div><div class="line">  .done();</div></pre></td></tr></table></figure></p>
<h3 id="finally"><a href="#finally" class="headerlink" title="finally()"></a>finally()</h3><p>finally方法用于指定不管Promise对象最后状态如何，都会执行的操作。它与done方法的最大区别，它接受一个普通的回调函数作为参数，该函数不管怎样都必须执行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">asyncFunc()</div><div class="line">  .then(f1)</div><div class="line">  .catch(r1)</div><div class="line">  .then(f2)</div><div class="line">  .finally(<span class="keyword">do</span>Something());</div></pre></td></tr></table></figure></p>
<h2 id="Promise-try"><a href="#Promise-try" class="headerlink" title="Promise.try()"></a>Promise.try()</h2><p>不知道或者不想区分，函数f是同步函数还是异步操作，但是想用 Promise 来处理它,<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const f = () =&gt; console.log(<span class="string">'now'</span>);</div><div class="line">Promise.resolve().then(f);</div><div class="line">console.log(<span class="string">'next'</span>);</div><div class="line">// next</div><div class="line">// now</div></pre></td></tr></table></figure></p>
<p>如果上面f是同步函数，输出的步骤就不一样了，那么能不能同步的函数同步执行，异步的函数异步执行？<br>方法一：async函数来写<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const f = () =&gt; console.log(<span class="string">'now'</span>);</div><div class="line">(async () =&gt; f())()</div><div class="line">.then(...)</div><div class="line">  .catch(...)</div><div class="line">console.log(<span class="string">'next'</span>);</div><div class="line">// now</div><div class="line">// next</div></pre></td></tr></table></figure></p>
<p>方法二：使用new Promise()<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">const f = () =&gt; console.log(<span class="string">'now'</span>);</div><div class="line">(</div><div class="line">  () =&gt; new Promise(</div><div class="line">    resolve =&gt; resolve(f())</div><div class="line">  )</div><div class="line">)();</div><div class="line">console.log(<span class="string">'next'</span>);</div><div class="line">// now</div><div class="line">// next</div></pre></td></tr></table></figure></p>
<p>方法三：Promise.try方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const f = () =&gt; console.log(<span class="string">'now'</span>);</div><div class="line">Promise.try(f);</div><div class="line">console.log(<span class="string">'next'</span>);</div><div class="line">// now</div><div class="line">// next</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ES6技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> Promise </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6之Reflect]]></title>
      <url>/2017/04/23/ES6%E4%B9%8BReflect/</url>
      <content type="html"><![CDATA[<p>Reflect对象与Proxy对象一样，也是 ES6 为了操作对象而提供的新 API。Reflect对象的设计目的有这样几个:<br>（1） 将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上。现阶段，某些方法同时在Object和Reflect对象上部署，未来的新方法将只部署在Reflect对象上。也就是说，从Reflect对象上可以拿到语言内部的方法。<br>（2） 修改某些Object方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 老写法</div><div class="line">try &#123;</div><div class="line">  Object.defineProperty(target, property, attributes);</div><div class="line">  // success</div><div class="line">&#125; catch (e) &#123;</div><div class="line">  // failure</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 新写法</div><div class="line"><span class="keyword">if</span> (Reflect.defineProperty(target, property, attributes)) &#123;</div><div class="line">  // success</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  // failure</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>（3） 让Object操作都变成函数行为。某些Object操作是命令式，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 老写法</div><div class="line"><span class="string">'assign'</span> <span class="keyword">in</span> Object // <span class="literal">true</span></div><div class="line"></div><div class="line">// 新写法</div><div class="line">Reflect.has(Object, <span class="string">'assign'</span>) // <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>(4)Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Proxy(target, &#123;</div><div class="line">  <span class="built_in">set</span>: <span class="keyword">function</span>(target, name, value, receiver) &#123;</div><div class="line">    var success = Reflect.set(target,name, value, receiver);</div><div class="line">    <span class="keyword">if</span> (success) &#123;</div><div class="line">      <span class="built_in">log</span>(<span class="string">'property '</span> + name + <span class="string">' on '</span> + target + <span class="string">' set to '</span> + value);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> success;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="Reflect-实例的方法"><a href="#Reflect-实例的方法" class="headerlink" title="Reflect 实例的方法"></a>Reflect 实例的方法</h2><p><strong>Reflect 实例的方法与Proxy对象的方法是一一对应的</strong><br>Reflect.get方法查找并返回target对象的name属性，如果没有该属性，则返回undefined。</p>
<h3 id="get-target-propKey-receiver"><a href="#get-target-propKey-receiver" class="headerlink" title="get(target, propKey, receiver)"></a>get(target, propKey, receiver)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var myObject = &#123;</div><div class="line">  foo: 1,</div><div class="line">  bar: 2,</div><div class="line">  get <span class="function"><span class="title">baz</span></span>() &#123;</div><div class="line">    <span class="built_in">return</span> this.foo + this.bar;</div><div class="line">  &#125;,</div><div class="line">&#125;</div><div class="line"></div><div class="line">Reflect.get(myObject, <span class="string">'foo'</span>) // 1</div><div class="line">Reflect.get(myObject, <span class="string">'bar'</span>) // 2</div><div class="line">Reflect.get(myObject, <span class="string">'baz'</span>) // 3</div></pre></td></tr></table></figure>
<h3 id="set-target-propKey-value-receiver"><a href="#set-target-propKey-value-receiver" class="headerlink" title="set(target, propKey, value, receiver)"></a>set(target, propKey, value, receiver)</h3><p>Reflect.set方法设置target对象的name属性等于value。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var myObject = &#123;</div><div class="line">  foo: 1,</div><div class="line">  <span class="built_in">set</span> bar(value) &#123;</div><div class="line">    <span class="built_in">return</span> this.foo = value;</div><div class="line">  &#125;,</div><div class="line">&#125;</div><div class="line"></div><div class="line">myObject.foo // 1</div><div class="line"></div><div class="line">Reflect.set(myObject, <span class="string">'foo'</span>, 2);</div><div class="line">myObject.foo // 2</div><div class="line"></div><div class="line">Reflect.set(myObject, <span class="string">'bar'</span>, 3)</div><div class="line">myObject.foo // 3</div></pre></td></tr></table></figure></p>
<h3 id="has-target-propKey"><a href="#has-target-propKey" class="headerlink" title="has(target, propKey)"></a>has(target, propKey)</h3><p>Reflect.has方法对应name in obj里面的in运算符。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var myObject = &#123;</div><div class="line">  foo: 1,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 旧写法</div><div class="line"><span class="string">'foo'</span> <span class="keyword">in</span> myObject // <span class="literal">true</span></div><div class="line"></div><div class="line">// 新写法</div><div class="line">Reflect.has(myObject, <span class="string">'foo'</span>) // <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<h3 id="deleteProperty-target-propKey"><a href="#deleteProperty-target-propKey" class="headerlink" title="deleteProperty(target, propKey)"></a>deleteProperty(target, propKey)</h3><p>Reflect.deleteProperty方法等同于delete obj[name]，用于删除对象的属性。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const myObj = &#123; foo: <span class="string">'bar'</span> &#125;;</div><div class="line"></div><div class="line">// 旧写法</div><div class="line">delete myObj.foo;</div><div class="line"></div><div class="line">// 新写法</div><div class="line">Reflect.deleteProperty(myObj, <span class="string">'foo'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="ownKeys-target"><a href="#ownKeys-target" class="headerlink" title="ownKeys(target)"></a>ownKeys(target)</h3><p>Reflect.ownKeys方法用于返回对象的所有属性，基本等同于Object.getOwnPropertyNames与Object.getOwnPropertySymbols之和。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">var myObject = &#123;</div><div class="line">  foo: 1,</div><div class="line">  bar: 2,</div><div class="line">  [Symbol.for(<span class="string">'baz'</span>)]: 3,</div><div class="line">  [Symbol.for(<span class="string">'bing'</span>)]: 4,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 旧写法</div><div class="line">Object.getOwnPropertyNames(myObject)</div><div class="line">// [<span class="string">'foo'</span>, <span class="string">'bar'</span>]</div><div class="line"></div><div class="line">Object.getOwnPropertySymbols(myObject)</div><div class="line">//[Symbol.for(<span class="string">'baz'</span>), Symbol.for(<span class="string">'bing'</span>)]</div><div class="line"></div><div class="line">// 新写法</div><div class="line">Reflect.ownKeys(myObject)</div><div class="line">// [<span class="string">'foo'</span>, <span class="string">'bar'</span>, Symbol.for(<span class="string">'baz'</span>), Symbol.for(<span class="string">'bing'</span>)]</div></pre></td></tr></table></figure></p>
<h3 id="getOwnPropertyDescriptor-target-propKey"><a href="#getOwnPropertyDescriptor-target-propKey" class="headerlink" title="getOwnPropertyDescriptor(target, propKey)"></a>getOwnPropertyDescriptor(target, propKey)</h3><p>Reflect.getOwnPropertyDescriptor基本等同于Object.getOwnPropertyDescriptor，用于得到指定属性的描述对象，将来会替代掉后者。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var myObject = &#123;&#125;;</div><div class="line">Object.defineProperty(myObject, <span class="string">'hidden'</span>, &#123;</div><div class="line">  value: <span class="literal">true</span>,</div><div class="line">  enumerable: <span class="literal">false</span>,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 旧写法</div><div class="line">var theDescriptor = Object.getOwnPropertyDescriptor(myObject, <span class="string">'hidden'</span>);</div><div class="line"></div><div class="line">// 新写法</div><div class="line">var theDescriptor = Reflect.getOwnPropertyDescriptor(myObject, <span class="string">'hidden'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="defineProperty-target-propertyKey-attributes"><a href="#defineProperty-target-propertyKey-attributes" class="headerlink" title="defineProperty(target, propertyKey, attributes)"></a>defineProperty(target, propertyKey, attributes)</h3><p>Reflect.defineProperty方法基本等同于Object.defineProperty，用来为对象定义属性。未来，后者会被逐渐废除，请从现在开始就使用Reflect.defineProperty代替它。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">MyDate</span></span>() &#123;</div><div class="line">  /*…*/</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 旧写法</div><div class="line">Object.defineProperty(MyDate, <span class="string">'now'</span>, &#123;</div><div class="line">  value: () =&gt; Date.now()</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 新写法</div><div class="line">Reflect.defineProperty(MyDate, <span class="string">'now'</span>, &#123;</div><div class="line">  value: () =&gt; Date.now()</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="preventExtensions-target"><a href="#preventExtensions-target" class="headerlink" title="preventExtensions(target)"></a>preventExtensions(target)</h3><p>Reflect.preventExtensions对应Object.preventExtensions方法，用于让一个对象变为不可扩展。它返回一个布尔值，表示是否操作成功<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var myObject = &#123;&#125;;</div><div class="line"></div><div class="line">// 旧写法</div><div class="line">Object.isExtensible(myObject) // <span class="literal">true</span></div><div class="line"></div><div class="line">// 新写法</div><div class="line">Reflect.preventExtensions(myObject) // <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<h3 id="getPrototypeOf-target"><a href="#getPrototypeOf-target" class="headerlink" title="getPrototypeOf(target)"></a>getPrototypeOf(target)</h3><p>Reflect.getPrototypeOf方法用于读取对象的<strong>proto</strong>属性，对应Object.getPrototypeOf(obj)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const myObj = new FancyThing();</div><div class="line"></div><div class="line">// 旧写法</div><div class="line">Object.getPrototypeOf(myObj) === FancyThing.prototype;</div><div class="line"></div><div class="line">// 新写法</div><div class="line">Reflect.getPrototypeOf(myObj) === FancyThing.prototype;</div></pre></td></tr></table></figure></p>
<h3 id="isExtensible-target"><a href="#isExtensible-target" class="headerlink" title="isExtensible(target)"></a>isExtensible(target)</h3><p>Reflect.isExtensible方法对应Object.isExtensible，返回一个布尔值，表示当前对象是否可扩展。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const myObject = &#123;&#125;;</div><div class="line"></div><div class="line">// 旧写法</div><div class="line">Object.isExtensible(myObject) // <span class="literal">true</span></div><div class="line"></div><div class="line">// 新写法</div><div class="line">Reflect.isExtensible(myObject) // <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<h3 id="setPrototypeOf-target-proto"><a href="#setPrototypeOf-target-proto" class="headerlink" title="setPrototypeOf(target, proto)"></a>setPrototypeOf(target, proto)</h3><p>Reflect.setPrototypeOf方法用于设置对象的<strong>proto</strong>属性，返回第一个参数对象，对应Object.setPrototypeOf(obj, newProto)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const myObj = new FancyThing();</div><div class="line"></div><div class="line">// 旧写法</div><div class="line">Object.setPrototypeOf(myObj, OtherThing.prototype);</div><div class="line"></div><div class="line">// 新写法</div><div class="line">Reflect.setPrototypeOf(myObj, OtherThing.prototype);</div></pre></td></tr></table></figure></p>
<h3 id="apply-func-thisArg-args"><a href="#apply-func-thisArg-args" class="headerlink" title="apply(func, thisArg, args)"></a>apply(func, thisArg, args)</h3><p>Reflect.apply方法等同于Function.prototype.apply.call(func, thisArg, args)，用于绑定this对象后执行给定函数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const ages = [11, 33, 12, 54, 18, 96];</div><div class="line"></div><div class="line">// 旧写法</div><div class="line">const youngest = Math.min.apply(Math, ages);</div><div class="line">const oldest = Math.max.apply(Math, ages);</div><div class="line">const <span class="built_in">type</span> = Object.prototype.toString.call(youngest);</div><div class="line"></div><div class="line">// 新写法</div><div class="line">const youngest = Reflect.apply(Math.min, Math, ages);</div><div class="line">const oldest = Reflect.apply(Math.max, Math, ages);</div><div class="line">const <span class="built_in">type</span> = Reflect.apply(Object.prototype.toString, youngest, []);</div></pre></td></tr></table></figure></p>
<h3 id="construct-target-args"><a href="#construct-target-args" class="headerlink" title="construct(target, args)"></a>construct(target, args)</h3><p>Reflect.construct方法等同于new target(…args)，这提供了一种不使用new，来调用构造函数的方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Greeting(name) &#123;</div><div class="line">  this.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// new 的写法</div><div class="line">const instance = new Greeting(<span class="string">'张三'</span>);</div><div class="line"></div><div class="line">// Reflect.construct 的写法</div><div class="line">const instance = Reflect.construct(Greeting, [<span class="string">'张三'</span>]);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ES6技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> Reflect </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6之Proxy]]></title>
      <url>/2017/04/21/ES6%E4%B9%8BProxy/</url>
      <content type="html"><![CDATA[<p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var proxy = new Proxy(target, handler);</div></pre></td></tr></table></figure></p>
<p>new Proxy()表示生成一个Proxy实例，target参数表示所要拦截的目标对象，handler参数也是一个对象，用来定制拦截行为.可省略。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var target = &#123;&#125;;</div><div class="line">var handler = &#123;&#125;;</div><div class="line">var proxy = new Proxy(target, handler);</div><div class="line">proxy.a = <span class="string">'b'</span>;</div><div class="line">target.a // <span class="string">"b"</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，handler是一个空对象，没有任何拦截效果，访问proxy就等同于访问target。</p>
<h2 id="Proxy-实例的方法"><a href="#Proxy-实例的方法" class="headerlink" title="Proxy 实例的方法"></a>Proxy 实例的方法</h2><p>get方法用于拦截某个属性的读取操作。</p>
<h3 id="get-target-propKey-receiver"><a href="#get-target-propKey-receiver" class="headerlink" title="get(target, propKey, receiver)"></a>get(target, propKey, receiver)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var person = &#123;</div><div class="line">  name: <span class="string">"张三"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">var proxy = new Proxy(person, &#123;</div><div class="line">  get: <span class="keyword">function</span>(target, property) &#123;</div><div class="line">    <span class="keyword">if</span> (property <span class="keyword">in</span> target) &#123;</div><div class="line">      <span class="built_in">return</span> target[property];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      throw new ReferenceError(<span class="string">"Property \""</span> + property + <span class="string">"\" does not exist."</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">proxy.name // <span class="string">"张三"</span></div><div class="line">proxy.age // 抛出一个错误</div></pre></td></tr></table></figure>
<p>get方法可以继承:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> proto = new Proxy(&#123;&#125;, &#123;</div><div class="line">  get(target, propertyKey, receiver) &#123;</div><div class="line">    console.log(<span class="string">'GET '</span>+propertyKey);</div><div class="line">    <span class="built_in">return</span> target[propertyKey];</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">let</span> obj = Object.create(proto);</div><div class="line">obj.xxx // <span class="string">"GET xxx"</span></div></pre></td></tr></table></figure></p>
<h3 id="set-target-propKey-value-receiver"><a href="#set-target-propKey-value-receiver" class="headerlink" title="set(target, propKey, value, receiver)"></a>set(target, propKey, value, receiver)</h3><p>set方法用来拦截某个属性的赋值操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> validator = &#123;</div><div class="line">  <span class="built_in">set</span>: <span class="keyword">function</span>(obj, prop, value) &#123;</div><div class="line">    <span class="keyword">if</span> (prop === <span class="string">'age'</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (!Number.isInteger(value)) &#123;</div><div class="line">        throw new TypeError(<span class="string">'The age is not an integer'</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (value &gt; 200) &#123;</div><div class="line">        throw new RangeError(<span class="string">'The age seems invalid'</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 对于age以外的属性，直接保存</div><div class="line">    obj[prop] = value;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">let</span> person = new Proxy(&#123;&#125;, validator);</div><div class="line"></div><div class="line">person.age = 100;</div><div class="line"></div><div class="line">person.age // 100</div><div class="line">person.age = <span class="string">'young'</span> // The age is not an <span class="built_in">integer</span></div><div class="line">person.age = 300 // The age seems invalid</div></pre></td></tr></table></figure></p>
<h3 id="has-target-propKey"><a href="#has-target-propKey" class="headerlink" title="has(target, propKey)"></a>has(target, propKey)</h3><p>has方法用来拦截HasProperty操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var handler = &#123;</div><div class="line">  has (target, key) &#123;</div><div class="line">    <span class="keyword">if</span> (key[0] === <span class="string">'_'</span>) &#123;</div><div class="line">      <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> <span class="string">'存在'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">var target = &#123; _prop: <span class="string">'foo'</span>, prop: <span class="string">'foo'</span> &#125;;</div><div class="line">var proxy = new Proxy(target, handler);</div><div class="line"><span class="string">'_prop'</span> <span class="keyword">in</span> proxy // <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<h3 id="deleteProperty-target-propKey"><a href="#deleteProperty-target-propKey" class="headerlink" title="deleteProperty(target, propKey)"></a>deleteProperty(target, propKey)</h3><p>deleteProperty方法用于拦截delete操作，如果这个方法抛出错误或者返回false，当前属性就无法被delete命令删除。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var handler = &#123;</div><div class="line">  deleteProperty (target, key) &#123;</div><div class="line">    invariant(key, <span class="string">'delete'</span>);</div><div class="line">    <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">function</span> invariant (key, action) &#123;</div><div class="line">  <span class="keyword">if</span> (key[0] === <span class="string">'_'</span>) &#123;</div><div class="line">    throw new Error(`Invalid attempt to <span class="variable">$&#123;action&#125;</span> private <span class="string">"<span class="variable">$&#123;key&#125;</span>"</span> property`);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var target = &#123; _prop: <span class="string">'foo'</span> &#125;;</div><div class="line">var proxy = new Proxy(target, handler);</div><div class="line">delete proxy._prop // Error: Invalid attempt to delete private <span class="string">"_prop"</span> property</div></pre></td></tr></table></figure></p>
<h3 id="ownKeys-target"><a href="#ownKeys-target" class="headerlink" title="ownKeys(target)"></a>ownKeys(target)</h3><p>ownKeys方法用来拦截对象自身属性的读取操作。具体来说，拦截以下操作:<br>(1)Object.getOwnPropertyNames()<br>(2)Object.getOwnPropertySymbols()<br>(3)Object.keys()<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> target = &#123;</div><div class="line">  a: 1,</div><div class="line">  b: 2,</div><div class="line">  c: 3</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">let</span> handler = &#123;</div><div class="line">  ownKeys(target) &#123;</div><div class="line">    <span class="built_in">return</span> [<span class="string">'a'</span>];</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">let</span> proxy = new Proxy(target, handler);</div><div class="line">Object.keys(proxy) // [ <span class="string">'a'</span> ]</div><div class="line"></div><div class="line">var p = new Proxy(&#123;&#125;, &#123;</div><div class="line">  ownKeys: <span class="keyword">function</span>(target) &#123;</div><div class="line">    <span class="built_in">return</span> [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">Object.getOwnPropertyNames(p)</div><div class="line">// [ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ]</div></pre></td></tr></table></figure></p>
<h3 id="getOwnPropertyDescriptor-target-propKey"><a href="#getOwnPropertyDescriptor-target-propKey" class="headerlink" title="getOwnPropertyDescriptor(target, propKey)"></a>getOwnPropertyDescriptor(target, propKey)</h3><p>getOwnPropertyDescriptor方法拦截Object.getOwnPropertyDescriptor()，返回一个属性描述对象或者undefined。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var handler = &#123;</div><div class="line">  getOwnPropertyDescriptor (target, key) &#123;</div><div class="line">    <span class="keyword">if</span> (key[0] === <span class="string">'_'</span>) &#123;</div><div class="line">      <span class="built_in">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> Object.getOwnPropertyDescriptor(target, key);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">var target = &#123; _foo: <span class="string">'bar'</span>, baz: <span class="string">'tar'</span> &#125;;</div><div class="line">var proxy = new Proxy(target, handler);</div><div class="line">Object.getOwnPropertyDescriptor(proxy, <span class="string">'wat'</span>); // undefined</div><div class="line">Object.getOwnPropertyDescriptor(proxy, <span class="string">'_foo'</span>); // undefined</div><div class="line">Object.getOwnPropertyDescriptor(proxy, <span class="string">'baz'</span>); // &#123; value: <span class="string">'tar'</span>, writable: <span class="literal">true</span>, enumerable: <span class="literal">true</span>, configurable: <span class="literal">true</span> &#125;</div></pre></td></tr></table></figure></p>
<h3 id="defineProperty-target-propKey-propDesc"><a href="#defineProperty-target-propKey-propDesc" class="headerlink" title="defineProperty(target, propKey, propDesc)"></a>defineProperty(target, propKey, propDesc)</h3><p>defineProperty方法拦截了Object.defineProperty操作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var handler = &#123;</div><div class="line">  defineProperty (target, key, descriptor) &#123;</div><div class="line">    <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">var target = &#123;&#125;;</div><div class="line">var proxy = new Proxy(target, handler);</div><div class="line">proxy.foo = <span class="string">'bar'</span>; // TypeError: proxy defineProperty handler returned <span class="literal">false</span> <span class="keyword">for</span> property <span class="string">'"foo"'</span></div></pre></td></tr></table></figure></p>
<h3 id="preventExtensions-target"><a href="#preventExtensions-target" class="headerlink" title="preventExtensions(target)"></a>preventExtensions(target)</h3><p>preventExtensions方法拦截Object.preventExtensions()。该方法必须返回一个布尔值，否则会被自动转为布尔值。<br>这个方法有一个限制，只有目标对象不可扩展时（即Object.isExtensible(proxy)为false），proxy.preventExtensions才能返回true，否则会报错。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var p = new Proxy(&#123;&#125;, &#123;</div><div class="line">  preventExtensions: <span class="keyword">function</span>(target) &#123;</div><div class="line">    <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">Object.preventExtensions(p) // 报错</div></pre></td></tr></table></figure></p>
<p>上面代码中，proxy.preventExtensions方法返回true，但这时Object.isExtensible(proxy)会返回true，因此报错。<br>为了防止出现这个问题，通常要在proxy.preventExtensions方法里面，调用一次Object.preventExtensions:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var p = new Proxy(&#123;&#125;, &#123;</div><div class="line">  preventExtensions: <span class="keyword">function</span>(target) &#123;</div><div class="line">    console.log(<span class="string">'called'</span>);</div><div class="line">    Object.preventExtensions(target);</div><div class="line">    <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">Object.preventExtensions(p)  // <span class="string">"called"</span>   // <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<h3 id="getPrototypeOf-target"><a href="#getPrototypeOf-target" class="headerlink" title="getPrototypeOf(target)"></a>getPrototypeOf(target)</h3><p>getPrototypeOf方法主要用来拦截获取对象原型。具体来说，拦截下面这些操作。<br>(1)Object.prototype.<strong>proto</strong><br>(2)Object.prototype.isPrototypeOf()<br>(3)Object.getPrototypeOf()<br>(4)Reflect.getPrototypeOf()<br>(5)instanceof<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var proto = &#123;&#125;;</div><div class="line">var p = new Proxy(&#123;&#125;, &#123;</div><div class="line">  getPrototypeOf(target) &#123;</div><div class="line">    <span class="built_in">return</span> proto;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">Object.getPrototypeOf(p) === proto // <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<h3 id="isExtensible-target"><a href="#isExtensible-target" class="headerlink" title="isExtensible(target)"></a>isExtensible(target)</h3><p>isExtensible方法拦截Object.isExtensible操作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var p = new Proxy(&#123;&#125;, &#123;</div><div class="line">  isExtensible: <span class="keyword">function</span>(target) &#123;</div><div class="line">    console.log(<span class="string">"called"</span>);</div><div class="line">    <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">Object.isExtensible(p) // <span class="string">"called"</span>    <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<h3 id="setPrototypeOf-target-proto"><a href="#setPrototypeOf-target-proto" class="headerlink" title="setPrototypeOf(target, proto)"></a>setPrototypeOf(target, proto)</h3><p>setPrototypeOf方法主要用来拦截Object.setPrototypeOf方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var handler = &#123;</div><div class="line">  <span class="built_in">set</span>PrototypeOf (target, proto) &#123;</div><div class="line">    throw new Error(<span class="string">'Changing the prototype is forbidden'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">var proto = &#123;&#125;;</div><div class="line">var target = <span class="function"><span class="title">function</span></span> () &#123;&#125;;</div><div class="line">var proxy = new Proxy(target, handler);</div><div class="line">Object.setPrototypeOf(proxy, proto);   // Error: Changing the prototype is forbidden</div></pre></td></tr></table></figure></p>
<h3 id="apply-target-object-args"><a href="#apply-target-object-args" class="headerlink" title="apply(target, object, args)"></a>apply(target, object, args)</h3><p>apply方法拦截函数的调用、call和apply操作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var target = <span class="function"><span class="title">function</span></span> () &#123; <span class="built_in">return</span> <span class="string">'I am the target'</span>; &#125;;</div><div class="line">var handler = &#123;</div><div class="line">  <span class="function"><span class="title">apply</span></span> () &#123;</div><div class="line">    <span class="built_in">return</span> <span class="string">'I am the proxy'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">var p = new Proxy(target, handler);</div><div class="line">p(); // <span class="string">"I am the proxy"</span></div><div class="line"></div><div class="line"></div><div class="line">var twice = &#123;</div><div class="line">  apply (target, ctx, args) &#123;</div><div class="line">    <span class="built_in">return</span> Reflect.apply(...arguments) * 2;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">function</span> sum (left, right) &#123;</div><div class="line">  <span class="built_in">return</span> left + right;</div><div class="line">&#125;;</div><div class="line">var proxy = new Proxy(sum, twice);</div><div class="line">proxy(1, 2) // 6</div><div class="line">proxy.call(null, 5, 6) // 22</div><div class="line">proxy.apply(null, [7, 8]) // 30</div><div class="line">Reflect.apply(proxy, null, [9, 10]) // 38</div></pre></td></tr></table></figure></p>
<h3 id="construct-target-args"><a href="#construct-target-args" class="headerlink" title="construct(target, args)"></a>construct(target, args)</h3><p>construct方法用于拦截new命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var p = new Proxy(<span class="function"><span class="title">function</span></span> () &#123;&#125;, &#123;</div><div class="line">  construct: <span class="keyword">function</span>(target, args) &#123;</div><div class="line">    console.log(<span class="string">'called: '</span> + args.join(<span class="string">', '</span>));</div><div class="line">    <span class="built_in">return</span> &#123; value: args[0] * 10 &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">(new p(1)).value; // <span class="string">"called: 1"</span>     // 10</div></pre></td></tr></table></figure></p>
<h2 id="Proxy-revocable"><a href="#Proxy-revocable" class="headerlink" title="Proxy.revocable()"></a>Proxy.revocable()</h2><p>Proxy.revocable方法返回一个可取消的 Proxy 实例。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> target = &#123;&#125;;</div><div class="line"><span class="built_in">let</span> handler = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="built_in">let</span> &#123;proxy, revoke&#125; = Proxy.revocable(target, handler);</div><div class="line"></div><div class="line">proxy.foo = 123;</div><div class="line">proxy.foo // 123</div><div class="line"></div><div class="line">revoke();</div><div class="line">proxy.foo // TypeError: Revoked</div></pre></td></tr></table></figure></p>
<p>Proxy.revocable方法返回一个对象，该对象的proxy属性是Proxy实例，revoke属性是一个函数，可以取消Proxy实例。上面代码中，当执行revoke函数之后，再访问Proxy实例，就会抛出一个错误。</p>
<h2 id="this-问题"><a href="#this-问题" class="headerlink" title="this 问题"></a>this 问题</h2><p>虽然 Proxy 可以代理针对目标对象的访问，但它不是目标对象的透明代理，即不做任何拦截的情况下，也无法保证与目标对象的行为一致。主要原因就是在 Proxy 代理的情况下，目标对象内部的this关键字会指向 Proxy 代理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const target = &#123;</div><div class="line">  m: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    console.log(this === proxy);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">const handler = &#123;&#125;;</div><div class="line"></div><div class="line">const proxy = new Proxy(target, handler);</div><div class="line"></div><div class="line">target.m() // <span class="literal">false</span></div><div class="line">proxy.m()  // <span class="literal">true</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ES6技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> proxy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6之Set和Map数据结构]]></title>
      <url>/2017/04/19/ES6%E4%B9%8BSet%E5%92%8CMap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p>
<h2 id="Set创建方法"><a href="#Set创建方法" class="headerlink" title="Set创建方法"></a>Set创建方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const <span class="built_in">set</span> = new Set([1, 2, 3, 4, 4]);</div><div class="line">[...set]  // [1, 2, 3, 4]</div></pre></td></tr></table></figure>
<h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[...new Set(array)]</div></pre></td></tr></table></figure>
<h2 id="Set-实例的属性和方法"><a href="#Set-实例的属性和方法" class="headerlink" title="Set 实例的属性和方法"></a>Set 实例的属性和方法</h2><p>Set 结构的实例有以下属性。<br>(1)Set.prototype.constructor：构造函数，默认就是Set函数。<br>(2)Set.prototype.size：返回Set实例的成员总数。</p>
<p>Set 实例的方法分为两大类：操作方法（用于操作数据）和遍历方法（用于遍历成员）。<br>下面先介绍四个操作方法:<br>(1)add(value)：添加某个值，返回Set结构本身。<br>(2)delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。<br>(3)has(value)：返回一个布尔值，表示该值是否为Set的成员。<br>(4)clear()：清除所有成员，没有返回值。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">s.add(1).add(2).add(2);// 注意2被加入了两次</div><div class="line"></div><div class="line">s.size // 2</div><div class="line"></div><div class="line">s.has(1) // <span class="literal">true</span></div><div class="line">s.has(2) // <span class="literal">true</span></div><div class="line">s.has(3) // <span class="literal">false</span></div><div class="line"></div><div class="line">s.delete(2);</div><div class="line">s.has(2) // <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<p>Set 结构的实例有四个遍历方法，可以用于遍历成员:<br>(1)keys()：返回键名的遍历器<br>(2)values()：返回键值的遍历器<br>(3)entries()：返回键值对的遍历器<br>(4)forEach()：使用回调函数遍历每个成员<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> <span class="built_in">set</span> = new Set([<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>]);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> item of set.keys()) &#123;</div><div class="line">  console.log(item); // red green blue</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> item of set.values()) &#123;</div><div class="line">  console.log(item); // red green blue</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> item of set.entries()) &#123;</div><div class="line">  console.log(item);</div><div class="line">&#125;</div><div class="line">// [<span class="string">"red"</span>, <span class="string">"red"</span>]</div><div class="line">// [<span class="string">"green"</span>, <span class="string">"green"</span>]</div><div class="line">// [<span class="string">"blue"</span>, <span class="string">"blue"</span>]</div><div class="line"></div><div class="line">set.forEach((value, key) =&gt; console.log(value * 2) )</div></pre></td></tr></table></figure></p>
<h2 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h2><p>WeakSet 结构与 Set 类似，也是不重复的值的集合。但是，它与 Set 有两个区别:<br>(1)WeakSet 的成员只能是对象，而不能是其他类型的值<br>(2)WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const ws = new WeakSet();</div></pre></td></tr></table></figure></p>
<p>WeakSet 结构有以下三个方法。<br>(1)WeakSet.prototype.add(value)：向 WeakSet 实例添加一个新成员。<br>(2)WeakSet.prototype.delete(value)：清除 WeakSet 实例的指定成员。<br>(3)WeakSet.prototype.has(value)：返回一个布尔值，表示某个值是否在 WeakSet 实例之中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">const ws = new WeakSet();</div><div class="line">const obj = &#123;&#125;;</div><div class="line">const foo = &#123;&#125;;</div><div class="line"></div><div class="line">ws.add(window);</div><div class="line">ws.add(obj);</div><div class="line"></div><div class="line">ws.has(window); // <span class="literal">true</span></div><div class="line">ws.has(foo);    // <span class="literal">false</span></div><div class="line"></div><div class="line">ws.delete(window);</div><div class="line">ws.has(window);    // <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const m = new Map();</div><div class="line">const o = &#123;p: <span class="string">'Hello World'</span>&#125;;</div><div class="line"></div><div class="line">m.set(o, <span class="string">'content'</span>)</div><div class="line">m.get(o) // <span class="string">"content"</span></div></pre></td></tr></table></figure></p>
<h2 id="Map实例的属性和操作方法"><a href="#Map实例的属性和操作方法" class="headerlink" title="Map实例的属性和操作方法"></a>Map实例的属性和操作方法</h2><h3 id="size属性"><a href="#size属性" class="headerlink" title="size属性"></a>size属性</h3><p>size属性返回 Map 结构的成员总数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const map = new Map();</div><div class="line">map.set(<span class="string">'foo'</span>, <span class="literal">true</span>);</div><div class="line">map.set(<span class="string">'bar'</span>, <span class="literal">false</span>);</div><div class="line">map.size // 2</div></pre></td></tr></table></figure></p>
<h3 id="set-key-value"><a href="#set-key-value" class="headerlink" title="set(key, value)"></a>set(key, value)</h3><p>set方法设置键名key对应的键值为value，然后返回整个 Map 结构。如果key已经有值，则键值会被更新，否则就新生成该键。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">const m = new Map();</div><div class="line">m.set(<span class="string">'edition'</span>, 6)        // 键是字符串</div><div class="line">m.set(262, <span class="string">'standard'</span>)     // 键是数值</div><div class="line">m.set(undefined, <span class="string">'nah'</span>)    // 键是 undefined</div><div class="line"></div><div class="line"><span class="built_in">let</span> map = new Map()</div><div class="line">  .set(1, <span class="string">'a'</span>)</div><div class="line">  .set(2, <span class="string">'b'</span>)</div><div class="line">  .set(3, <span class="string">'c'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="get-key"><a href="#get-key" class="headerlink" title="get(key)"></a>get(key)</h3><p>get方法读取key对应的键值，如果找不到key，返回undefined。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const m = new Map();</div><div class="line">const hello = <span class="function"><span class="title">function</span></span>() &#123;console.log(<span class="string">'hello'</span>);&#125;;</div><div class="line">m.set(hello, <span class="string">'Hello ES6!'</span>) // 键是函数</div><div class="line">m.get(hello)  // Hello ES6!</div></pre></td></tr></table></figure></p>
<h3 id="has-key"><a href="#has-key" class="headerlink" title="has(key)"></a>has(key)</h3><p>has方法返回一个布尔值，表示某个键是否在当前 Map 对象之中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const m = new Map();</div><div class="line"></div><div class="line">m.set(<span class="string">'edition'</span>, 6);</div><div class="line">m.set(262, <span class="string">'standard'</span>);</div><div class="line">m.set(undefined, <span class="string">'nah'</span>);</div><div class="line"></div><div class="line">m.has(<span class="string">'edition'</span>)     // <span class="literal">true</span></div><div class="line">m.has(<span class="string">'years'</span>)       // <span class="literal">false</span></div><div class="line">m.has(262)           // <span class="literal">true</span></div><div class="line">m.has(undefined)     // <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<h3 id="delete-key"><a href="#delete-key" class="headerlink" title="delete(key)"></a>delete(key)</h3><p>delete方法删除某个键，返回true。如果删除失败，返回false。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const m = new Map();</div><div class="line">m.set(undefined, <span class="string">'nah'</span>);</div><div class="line">m.has(undefined)     // <span class="literal">true</span></div><div class="line"></div><div class="line">m.delete(undefined)</div><div class="line">m.has(undefined)       // <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><p>clear方法清除所有成员，没有返回值。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> map = new Map();</div><div class="line">map.set(<span class="string">'foo'</span>, <span class="literal">true</span>);</div><div class="line">map.set(<span class="string">'bar'</span>, <span class="literal">false</span>);</div><div class="line"></div><div class="line">map.size // 2</div><div class="line">map.clear()</div><div class="line">map.size // 0</div></pre></td></tr></table></figure></p>
<h3 id="Map遍历"><a href="#Map遍历" class="headerlink" title="Map遍历"></a>Map遍历</h3><p>Map结构原生提供三个遍历器生成函数和一个遍历方法。<br>keys()：返回键名的遍历器。<br>values()：返回键值的遍历器。<br>entries()：返回所有成员的遍历器。<br>forEach()：遍历 Map 的所有成员。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">const map = new Map([</div><div class="line">  [<span class="string">'F'</span>, <span class="string">'no'</span>],</div><div class="line">  [<span class="string">'T'</span>,  <span class="string">'yes'</span>],</div><div class="line">]);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> key of map.keys()) &#123;</div><div class="line">  console.log(key);  //F, T</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> value of map.values()) &#123;</div><div class="line">  console.log(value);  //no yes</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> item of map.entries()) &#123;</div><div class="line">  console.log(item[0], item[1]); //<span class="string">"F"</span> <span class="string">"no"</span>  <span class="string">"T"</span> <span class="string">"yes"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> [key, value] of map.entries()) &#123;</div><div class="line">  console.log(key, value); //<span class="string">"F"</span> <span class="string">"no"</span>  <span class="string">"T"</span> <span class="string">"yes"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">// 等同于使用map.entries()</div><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> [key, value] of map) &#123;</div><div class="line">  console.log(key, value); //<span class="string">"F"</span> <span class="string">"no"</span>  <span class="string">"T"</span> <span class="string">"yes"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">map.forEach(<span class="keyword">function</span>(value, key, map) &#123;</div><div class="line">  console.log(<span class="string">"Key: %s, Value: %s"</span>, key, value);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h2><p>WeakMap与Map的区别有两点:<br>(1) WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名<br>(2) WeakMap它的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">const map = new WeakMap();</div><div class="line">map.set(1, 2); // TypeError: 1 is not an object!</div><div class="line"></div><div class="line">const wm = new WeakMap();</div><div class="line"><span class="built_in">let</span> key = &#123;&#125;;</div><div class="line"><span class="built_in">let</span> obj = &#123;foo: 1&#125;;</div><div class="line">wm.set(key, obj);</div><div class="line">obj = null;</div><div class="line">wm.get(key)</div></pre></td></tr></table></figure></p>
<p>WeakMap只有四个方法可用：get()、set()、has()、delete(),详情参考Map。</p>
]]></content>
      
        <categories>
            
            <category> ES6技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> Set </tag>
            
            <tag> Map </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6之Symbol]]></title>
      <url>/2017/04/19/ES6%E4%B9%8BSymbol/</url>
      <content type="html"><![CDATA[<p>ES6引入Symbol的原因是保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。</p>
<p>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。它是JavaScript语言的第七种数据类型，前六种是：Undefined、Null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</p>
<h2 id="创建Symbol"><a href="#创建Symbol" class="headerlink" title="创建Symbol"></a>创建Symbol</h2><p>注意，Symbol函数前不能使用new命令，否则会报错。这是因为生成的Symbol是一个原始类型的值，不是对象。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> s = Symbol();</div><div class="line">typeof s; // <span class="string">"symbol"</span></div><div class="line"></div><div class="line"><span class="built_in">let</span> s1 = Symbol(<span class="string">"foo"</span>); //接受字符串作为参数</div><div class="line">console.log(s1);  //Symbol(foo)</div><div class="line"></div><div class="line">// 没有参数的情况</div><div class="line">var s1 = Symbol();</div><div class="line">var s2 = Symbol();</div><div class="line">s1 === s2 // <span class="literal">false</span></div><div class="line"></div><div class="line">// 有参数的情况</div><div class="line">var s1 = Symbol(<span class="string">'foo'</span>);</div><div class="line">var s2 = Symbol(<span class="string">'foo'</span>);</div><div class="line"></div><div class="line">s1 === s2 // <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<h2 id="作为属性名的Symbol"><a href="#作为属性名的Symbol" class="headerlink" title="作为属性名的Symbol"></a>作为属性名的Symbol</h2><p>由于每一个Symbol值都是不相等的，这意味着Symbol值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var mySymbol = Symbol();</div><div class="line"></div><div class="line">// 第一种写法</div><div class="line">var a = &#123;&#125;;</div><div class="line">a[mySymbol] = <span class="string">'Hello!'</span>;</div><div class="line"></div><div class="line">// 第二种写法</div><div class="line">var a = &#123;</div><div class="line">  [mySymbol]: <span class="string">'Hello!'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 第三种写法</div><div class="line">var a = &#123;&#125;;</div><div class="line">Object.defineProperty(a, mySymbol, &#123; value: <span class="string">'Hello!'</span> &#125;);</div><div class="line"></div><div class="line">// 以上写法都得到同样结果</div><div class="line">a[mySymbol] // <span class="string">"Hello!"</span></div><div class="line"></div><div class="line">a.mySymbol = <span class="string">'Hello!'</span>; //错误的，不能用点运算符。</div></pre></td></tr></table></figure></p>
<h2 id="属性名的遍历"><a href="#属性名的遍历" class="headerlink" title="属性名的遍历"></a>属性名的遍历</h2><p>Symbol 作为属性名，该属性不会出现在for…in、for…of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。但是，它也不是私有属性，有一个Object.getOwnPropertySymbols方法，可以获取指定对象的所有 Symbol 属性名。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;&#125;;</div><div class="line">var a = Symbol(<span class="string">'a'</span>);</div><div class="line">var b = Symbol(<span class="string">'b'</span>);</div><div class="line"></div><div class="line">obj[a] = <span class="string">'Hello'</span>;</div><div class="line">obj[b] = <span class="string">'World'</span>;</div><div class="line"></div><div class="line">var objectSymbols = Object.getOwnPropertySymbols(obj); // [Symbol(a), Symbol(b)]</div></pre></td></tr></table></figure></p>
<p>Reflect.ownKeys方法可以返回所有类型的键名，包括常规键名和 Symbol 键名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> obj = &#123;</div><div class="line">  [Symbol(<span class="string">'my_key'</span>)]: 1,</div><div class="line">  enum: 2,</div><div class="line">  nonEnum: 3</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Reflect.ownKeys(obj); //  [<span class="string">"enum"</span>, <span class="string">"nonEnum"</span>, Symbol(my_key)]</div></pre></td></tr></table></figure></p>
<h2 id="Symbol-for-，Symbol-keyFor"><a href="#Symbol-for-，Symbol-keyFor" class="headerlink" title="Symbol.for()，Symbol.keyFor()"></a>Symbol.for()，Symbol.keyFor()</h2><p>有时，我们希望重新使用同一个Symbol值，Symbol.for方法可以做到这一点。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var s1 = Symbol.for(<span class="string">'foo'</span>);</div><div class="line">var s2 = Symbol.for(<span class="string">'foo'</span>);</div><div class="line"></div><div class="line">s1 === s2 // <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>Symbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会被登记在全局环境中供搜索，后者不会。<br>Symbol.for()不会每次调用就返回一个新的 Symbol 类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。</p>
]]></content>
      
        <categories>
            
            <category> ES6技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> Symbol </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS的浅拷贝与深拷贝研究]]></title>
      <url>/2017/04/17/JS%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%A0%94%E7%A9%B6/</url>
      <content type="html"><![CDATA[<p>JS数据类型可以分为(ES5,暂时不考虑ES6)：<br>(1)简单数据类型：Number、String、undefined、boolean、null<br>(2)复杂数据类型：Object、Array<br>简单的数据类型，往往是赋值操作，而复杂数据类型是引用操作。</p>
<h2 id="深浅拷贝原理"><a href="#深浅拷贝原理" class="headerlink" title="深浅拷贝原理"></a>深浅拷贝原理</h2><h3 id="浅拷贝原理"><a href="#浅拷贝原理" class="headerlink" title="浅拷贝原理"></a>浅拷贝原理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var obj =&#123;a:1,b:2,c:[1,2]&#125;;</div><div class="line">  var shallowCopy = shallow(obj);</div><div class="line">  <span class="keyword">function</span> shallow(obj)&#123;</div><div class="line">      var shallowObj = &#123;&#125;;</div><div class="line">      <span class="keyword">for</span>(var name <span class="keyword">in</span> obj)&#123;</div><div class="line">          <span class="keyword">if</span>(obj.hasOwnProperty(name))&#123;</div><div class="line">              shallowObj[name] = obj[name]</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="built_in">return</span> shallowObj</div><div class="line">  &#125;</div><div class="line">console.log(shallowCopy);//输出的就是这个对象，我们实现了简单的浅复制；</div></pre></td></tr></table></figure>
<p>浅拷贝：只会将对象的各个属性进行依次复制，并不会进行递归复制，而js存储对象都是存地址的，所以浅复制会导致obj.c和shallowCopy.c 指向同一块内存地址；会导致引用。</p>
<h3 id="深拷贝原理"><a href="#深拷贝原理" class="headerlink" title="深拷贝原理"></a>深拷贝原理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> deepClone(obj)&#123;</div><div class="line">    var newObj = obj.constructor === Array ? []:&#123;&#125;;</div><div class="line">    <span class="keyword">if</span>(typeof obj !== <span class="string">'object'</span>)&#123;</div><div class="line">        <span class="built_in">return</span></div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">for</span>(var i <span class="keyword">in</span> obj)&#123;</div><div class="line">            var prop = obj[i];</div><div class="line">            <span class="keyword">if</span>(prop === obj) &#123; //// 避免相互引用对象导致死循环</div><div class="line">                <span class="built_in">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(obj.hasOwnProperty(i))&#123;</div><div class="line">              <span class="keyword">if</span> (typeof obj[i] === <span class="string">'object'</span>) &#123;</div><div class="line">                newObj[i] = deepClone(obj[i]);</div><div class="line">              &#125;<span class="keyword">else</span> &#123;</div><div class="line">                newObj[i] = obj[i];</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> newObj</div><div class="line">&#125;</div><div class="line">`</div></pre></td></tr></table></figure>
<p>深复制：它不仅将原对象的各个属性逐个复制出去，而且将原对象各个属性所包含的对象也依次采用深复制的方法递归复制到新对象上，最核心的思想还是采用递归的方式，不断进行，直到基本数据类型后，再复制。</p>
<h2 id="数组的深浅拷贝"><a href="#数组的深浅拷贝" class="headerlink" title="数组的深浅拷贝"></a>数组的深浅拷贝</h2><h3 id="数组浅拷贝"><a href="#数组浅拷贝" class="headerlink" title="数组浅拷贝"></a>数组浅拷贝</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr1 = [1, 2, 3, 4, 5];</div><div class="line">var arr2 = arr1;</div><div class="line">arr1[0] = <span class="string">"a"</span>;</div><div class="line">console.log(arr1);// [<span class="string">"a"</span>, 2, 3, 4, 5]</div><div class="line">console.log(arr2);// [<span class="string">"a"</span>, 2, 3, 4, 5]</div></pre></td></tr></table></figure>
<p>当改变arr1数组中的元素的时候，arr2也会改变，如何避免上面的情况发生呢那就是深拷贝了。</p>
<h3 id="数组深拷贝"><a href="#数组深拷贝" class="headerlink" title="数组深拷贝"></a>数组深拷贝</h3><p>方法一:slice方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr1 = [1, 2, 3, 4, 5];</div><div class="line">var arr2 = arr1.slice(0);</div><div class="line">arr1[0] = <span class="string">"a"</span>;</div><div class="line">console.log(arr1);//[<span class="string">"a"</span>, 2, 3, 4, 5]</div><div class="line">console.log(arr2);//[1, 2, 3, 4, 5]</div></pre></td></tr></table></figure></p>
<p>方法二:concat方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr = [<span class="string">"One"</span>,<span class="string">"Two"</span>,<span class="string">"Three"</span>];</div><div class="line">var arrtooo = arr.concat();</div><div class="line">arrtooo[1] = <span class="string">"set Map To"</span>;</div><div class="line">document.writeln(<span class="string">"数组的原始值："</span> + arr + <span class="string">"&lt;br /&gt;"</span>);//Export:数组的原始值：One,Two,Three</div><div class="line">document.writeln(<span class="string">"数组的新值："</span> + arrtooo + <span class="string">"&lt;br /&gt;"</span>);//Export:数组的新值：One,<span class="built_in">set</span> Map To,Three</div></pre></td></tr></table></figure></p>
<p>方法三:最简单的深拷贝实现方式<br>缺点：原型链没了，对象就是object，所属的类没了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var arr1 = [1, 2, 3, 4, 5];</div><div class="line">var arr2 = JSON.parse(JSON.stringify(arr1));</div><div class="line">console.log(arr2);//[1, 2, 3, 4, 5];</div><div class="line">console.log(arr1 === arr2);//<span class="literal">false</span></div></pre></td></tr></table></figure></p>
<p>序列化然后反序列化重新生成一个新的数组(引用对象)。</p>
<h2 id="对象的深浅拷贝"><a href="#对象的深浅拷贝" class="headerlink" title="对象的深浅拷贝"></a>对象的深浅拷贝</h2><h3 id="对象浅拷贝"><a href="#对象浅拷贝" class="headerlink" title="对象浅拷贝"></a>对象浅拷贝</h3><p>法一：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var obj_a = &#123;</div><div class="line">  name: <span class="string">"dqhan"</span>,</div><div class="line">  age: 25,</div><div class="line">  sex: <span class="string">"male"</span>,</div><div class="line">  hobby: &#123;</div><div class="line">    1: <span class="string">"eat"</span>,</div><div class="line">    2: <span class="string">"play"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">var obj_b = obj_a;</div><div class="line">obj_b.age = 18;</div></pre></td></tr></table></figure></p>
<p><img src="https://manlili.github.io/img/170417/1.jpg" alt="图"></p>
<p>法二：Object.assign()<br>Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。但是 Object.assign() 进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var x = &#123;</div><div class="line">  a: 1,</div><div class="line">  b: 2,</div><div class="line">  c: 3</div><div class="line">&#125;;</div><div class="line">var y = Object.assign(&#123;&#125;, x);</div><div class="line">console.log(y.b === x.b);  // <span class="literal">true</span></div><div class="line"></div><div class="line">var obj = &#123; a: &#123;a: <span class="string">"hello"</span>, b: 21&#125; &#125;; </div><div class="line">var initalObj = Object.assign(&#123;&#125;, obj); </div><div class="line">initalObj.a.a = <span class="string">"changed"</span>; </div><div class="line">console.log(obj.a.a); // <span class="string">"changed"</span></div></pre></td></tr></table></figure></p>
<h3 id="对象深拷贝"><a href="#对象深拷贝" class="headerlink" title="对象深拷贝"></a>对象深拷贝</h3><p>法一：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var obj1 = &#123; a: 10, b: 20, c: 30 &#125;;</div><div class="line">var obj2 = &#123; a: obj1.a, b: obj1.b, c: obj1.c &#125;;</div><div class="line">obj2.b = 100;</div><div class="line">console.log(obj1); // &#123; a: 10, b: 20, c: 30 &#125; &lt;-- 沒被改到</div><div class="line">console.log(obj2); // &#123; a: 10, b: 100, c: 30 &#125;</div></pre></td></tr></table></figure></p>
<p>法二：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var obj_a = &#123;</div><div class="line">  name: <span class="string">"dqhan"</span>,</div><div class="line">  age: 25,</div><div class="line">  sex: <span class="string">"male"</span>,</div><div class="line">  hobby: &#123;</div><div class="line">      1: <span class="string">"eat"</span>,</div><div class="line">      2: <span class="string">"play"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> deepClone(obj)&#123;</div><div class="line">    var newObj = obj.constructor === Array ? []:&#123;&#125;;</div><div class="line">    <span class="keyword">if</span>(typeof obj !== <span class="string">'object'</span>)&#123;</div><div class="line">        <span class="built_in">return</span></div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">for</span>(var i <span class="keyword">in</span> obj)&#123;</div><div class="line">            <span class="keyword">if</span>(obj.hasOwnProperty(i))&#123;</div><div class="line">                newObj[i] = typeof obj[i] === <span class="string">'object'</span>? deepClone(obj[i]) : obj[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> newObj</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>法三：Object.create()<br>Object.create() 方法使用指定的原型对象和其属性创建了一个新的对象。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = &#123;x:1&#125;;</div><div class="line">var b = Object.create(a);</div><div class="line">console.log(b);//输出：&#123;&#125;;</div><div class="line">console.log(b.__proto__); //输出：&#123;x:1&#125;</div></pre></td></tr></table></figure></p>
<p>上面这句话说明了b的原型指向a的prototype属性。</p>
<p>法四：new object()<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">如果用 b =new object(a)</div><div class="line">connsole.log(b);//输出：&#123;x:1&#125;</div><div class="line">congsole.log(b.__proto__);//输出：&#123;&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 心得体会 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 对象 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6之对象的扩展]]></title>
      <url>/2017/04/13/ES6%E4%B9%8B%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h2 id="属性的简洁表示法"><a href="#属性的简洁表示法" class="headerlink" title="属性的简洁表示法"></a>属性的简洁表示法</h2><p>ES6允许直接写入变量和函数，作为对象的属性和方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var foo = <span class="string">'bar'</span>;</div><div class="line">var baz = &#123;foo&#125;; baz // &#123;foo: <span class="string">"bar"</span>&#125;</div><div class="line">// 上面等同于</div><div class="line">var baz = &#123;foo: foo&#125;;</div><div class="line"></div><div class="line"><span class="keyword">function</span> f(x, y) &#123;</div><div class="line">  <span class="built_in">return</span> &#123;x, y&#125;;</div><div class="line">&#125;</div><div class="line">// 上面等同于</div><div class="line"><span class="keyword">function</span> f(x, y) &#123;</div><div class="line">  <span class="built_in">return</span> &#123;x: x, y: y&#125;;</div><div class="line">&#125;</div><div class="line">f(1, 2) // Object &#123;x: 1, y: 2&#125;</div></pre></td></tr></table></figure></p>
<p>除了属性简写，方法也可以简写：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var o = &#123;</div><div class="line">  <span class="function"><span class="title">method</span></span>() &#123;</div><div class="line">    <span class="built_in">return</span> <span class="string">"Hello!"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 等同于</div><div class="line">var o = &#123;</div><div class="line">  method: <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    <span class="built_in">return</span> <span class="string">"Hello!"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>如果某个方法的值是一个Generator函数，前面需要加上星号:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">  * <span class="function"><span class="title">m</span></span>()&#123;</div><div class="line">    yield <span class="string">'hello world'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="属性名表达式"></a>属性名表达式</h2><p>对象一般可以写成两种：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 方法一</div><div class="line">obj.foo = <span class="literal">true</span>;</div><div class="line"></div><div class="line">// 方法二</div><div class="line">obj[<span class="string">'a'</span> + <span class="string">'bc'</span>] = 123;</div></pre></td></tr></table></figure></p>
<p>方法一是直接用标识符作为属性名，方法二是用表达式作为属性名.<br>ES6允许字面量定义对象时，用方法二（表达式）作为对象的属性名，即把表达式放在方括号内：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var lastWord = <span class="string">'last word'</span>;</div><div class="line">var a = &#123;</div><div class="line">  <span class="string">'first word'</span>: <span class="string">'hello'</span>,</div><div class="line">  [lastWord]: <span class="string">'world'</span></div><div class="line">&#125;;</div><div class="line">a[<span class="string">'first word'</span>] // <span class="string">"hello"</span></div><div class="line">a[lastWord] // <span class="string">"world"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">let</span> obj = &#123;</div><div class="line">  [<span class="string">'h'</span> + <span class="string">'ello'</span>]() &#123;</div><div class="line">    <span class="built_in">return</span> <span class="string">'hi'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">obj.hello() // hi</div></pre></td></tr></table></figure></p>
<p>注意，属性名表达式与简洁表示法，不能同时使用，会报错:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 报错</div><div class="line">var foo = <span class="string">'bar'</span>;</div><div class="line">var bar = <span class="string">'abc'</span>;</div><div class="line">var baz = &#123; [foo] &#125;;</div><div class="line"></div><div class="line">// 正确</div><div class="line">var foo = <span class="string">'bar'</span>;</div><div class="line">var baz = &#123; [foo]: <span class="string">'abc'</span>&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="方法的-name-属性"><a href="#方法的-name-属性" class="headerlink" title="方法的 name 属性"></a>方法的 name 属性</h2><p>函数的name属性，返回函数名。对象方法也是函数，因此也有name属性。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">const person = &#123;</div><div class="line">  <span class="function"><span class="title">sayName</span></span>() &#123;</div><div class="line">    console.log(<span class="string">'hello!'</span>);</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">person.sayName.name   // <span class="string">"sayName"</span></div></pre></td></tr></table></figure></p>
<h2 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h2><p>Object.is就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Object.is(<span class="string">'foo'</span>, <span class="string">'foo'</span>)</div><div class="line">// <span class="literal">true</span></div><div class="line">Object.is(&#123;&#125;, &#123;&#125;)</div><div class="line">// <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h2><p>Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var target = &#123; a: 1 &#125;;</div><div class="line"></div><div class="line">var <span class="built_in">source</span>1 = &#123; b: 2 &#125;;</div><div class="line">var <span class="built_in">source</span>2 = &#123; c: 3 &#125;;</div><div class="line"></div><div class="line">Object.assign(target, <span class="built_in">source</span>1, <span class="built_in">source</span>2);</div><div class="line">target // &#123;a:1, b:2, c:3&#125;</div></pre></td></tr></table></figure></p>
<p>Object.assign拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Object.assign(&#123;b: <span class="string">'c'</span>&#125;,</div><div class="line">  Object.defineProperty(&#123;&#125;, <span class="string">'invisible'</span>, &#123;</div><div class="line">    enumerable: <span class="literal">false</span>,</div><div class="line">    value: <span class="string">'hello'</span></div><div class="line">  &#125;)</div><div class="line">)</div><div class="line">// &#123; b: <span class="string">'c'</span> &#125;</div></pre></td></tr></table></figure></p>
<p>上面代码中，Object.assign要拷贝的对象只有一个不可枚举属性invisible，这个属性并没有被拷贝进去。</p>
<p>Object.assign方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var obj1 = &#123;a: &#123;b: 1&#125;&#125;;</div><div class="line">var obj2 = Object.assign(&#123;&#125;, obj1);</div><div class="line"></div><div class="line">obj1.a.b = 2;</div><div class="line">obj2.a.b // 2</div></pre></td></tr></table></figure></p>
<p>上面代码中，源对象obj1的a属性的值是一个对象，Object.assign拷贝得到的是这个对象的引用。这个对象的任何变化，都会反映到目标对象上面。</p>
<h2 id="Object-keys-，Object-values-，Object-entries"><a href="#Object-keys-，Object-values-，Object-entries" class="headerlink" title="Object.keys()，Object.values()，Object.entries()"></a>Object.keys()，Object.values()，Object.entries()</h2><p>ES5 引入了Object.keys方法,ES6引入了跟Object.keys配套的Object.values和Object.entries<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> &#123;keys, values, entries&#125; = Object;</div><div class="line"><span class="built_in">let</span> obj = &#123; a: 1, b: 2, c: 3 &#125;;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> key of keys(obj)) &#123;</div><div class="line">  console.log(key); // <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> value of values(obj)) &#123;</div><div class="line">  console.log(value); // 1, 2, 3</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> [key, value] of entries(obj)) &#123;</div><div class="line">  console.log([key, value]); // [<span class="string">'a'</span>, 1], [<span class="string">'b'</span>, 2], [<span class="string">'c'</span>, 3]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="对象的扩展运算符-…"><a href="#对象的扩展运算符-…" class="headerlink" title="对象的扩展运算符(…)"></a>对象的扩展运算符(…)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> &#123; x, y, ...z &#125; = &#123; x: 1, y: 2, a: 3, b: 4 &#125;;</div><div class="line">x // 1</div><div class="line">y // 2</div><div class="line">z // &#123; a: 3, b: 4 &#125;</div></pre></td></tr></table></figure>
<p>解构赋值必须是最后一个参数，否则会报错。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> &#123; ...x, y, z &#125; = obj; // 句法错误</div><div class="line"><span class="built_in">let</span> &#123; x, ...y, ...z &#125; = obj; // 句法错误</div></pre></td></tr></table></figure></p>
<p>注意，解构赋值的拷贝是浅拷贝，即如果一个键的值是复合类型的值（数组、对象、函数）、那么解构赋值拷贝的是这个值的引用，而不是这个值的副本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> obj = &#123; a: &#123; b: 1 &#125; &#125;;</div><div class="line"><span class="built_in">let</span> &#123; ...x &#125; = obj;</div><div class="line">obj.a.b = 2;</div><div class="line">x.a.b // 2</div></pre></td></tr></table></figure></p>
<h2 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors()"></a>Object.getOwnPropertyDescriptors()</h2><p>ES5有一个Object.getOwnPropertyDescriptor方法，返回某个对象属性的描述对象（descriptor）:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var obj = &#123; p: <span class="string">'a'</span> &#125;;</div><div class="line">Object.getOwnPropertyDescriptor(obj, <span class="string">'p'</span>)</div><div class="line">// Object &#123; value: <span class="string">"a"</span>,</div><div class="line">//   writable: <span class="literal">true</span>,</div><div class="line">//   enumerable: <span class="literal">true</span>,</div><div class="line">//   configurable: <span class="literal">true</span></div><div class="line">// &#125;</div></pre></td></tr></table></figure></p>
<p>ES2017 引入了Object.getOwnPropertyDescriptors方法，返回指定对象所有自身属性（非继承属性）的描述对象。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">const obj = &#123;</div><div class="line">  foo: 123,</div><div class="line">  get <span class="function"><span class="title">bar</span></span>() &#123; <span class="built_in">return</span> <span class="string">'abc'</span> &#125;</div><div class="line">&#125;;</div><div class="line">Object.getOwnPropertyDescriptors(obj)</div><div class="line">// &#123; foo:</div><div class="line">//    &#123; value: 123,</div><div class="line">//      writable: <span class="literal">true</span>,</div><div class="line">//      enumerable: <span class="literal">true</span>,</div><div class="line">//      configurable: <span class="literal">true</span> &#125;,</div><div class="line">//   bar:</div><div class="line">//    &#123; get: [Function: bar],</div><div class="line">//      <span class="built_in">set</span>: undefined,</div><div class="line">//      enumerable: <span class="literal">true</span>,</div><div class="line">//      configurable: <span class="literal">true</span> &#125; &#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ES6技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 对象 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6之函数的扩展]]></title>
      <url>/2017/04/11/ES6%E4%B9%8B%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h2 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h2><p>ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="built_in">log</span>(x, y = <span class="string">'World'</span>) &#123;</div><div class="line">  console.log(x, y);</div><div class="line">&#125;</div><div class="line"><span class="built_in">log</span>(<span class="string">'Hello'</span>) // Hello World</div><div class="line"><span class="built_in">log</span>(<span class="string">'Hello'</span>, <span class="string">'China'</span>) // Hello China</div><div class="line"><span class="built_in">log</span>(<span class="string">'Hello'</span>, <span class="string">''</span>) // Hello</div></pre></td></tr></table></figure></p>
<h2 id="函数参数为解构值"><a href="#函数参数为解构值" class="headerlink" title="函数参数为解构值"></a>函数参数为解构值</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> foo(&#123;x, y = 5&#125;) &#123;</div><div class="line">  console.log(x, y);</div><div class="line">&#125;</div><div class="line">foo(&#123;&#125;) // undefined, 5</div><div class="line">foo(&#123;x: 1&#125;) // 1, 5</div><div class="line">foo(&#123;x: 1, y: 2&#125;) // 1, 2</div><div class="line">foo() // TypeError: Cannot <span class="built_in">read</span> property <span class="string">'x'</span> of undefined</div></pre></td></tr></table></figure>
<p>注意：如果非尾部的参数设置默认值，实际上这个参数是没法省略的。定义了默认值的参数，应该是函数的尾参数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> f(x = 1, y) &#123;</div><div class="line">  <span class="built_in">return</span> [x, y];</div><div class="line">&#125;</div><div class="line">f() // [1, undefined]</div><div class="line">f(2) // [2, undefined])</div><div class="line">f(, 1) // 报错</div><div class="line">f(undefined, 1) // [1, 1]</div></pre></td></tr></table></figure></p>
<h2 id="函数的-length-属性"><a href="#函数的-length-属性" class="headerlink" title="函数的 length 属性"></a>函数的 length 属性</h2><p>函数的length属性，将返回没有指定默认值的参数个数.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">function</span> (a) &#123;&#125;).length // 1</div><div class="line">(<span class="keyword">function</span> (a = 5) &#123;&#125;).length // 0</div><div class="line">(<span class="keyword">function</span> (a, b, c = 5) &#123;&#125;).length // 2</div></pre></td></tr></table></figure></p>
<p>如果设置了默认值的参数不是尾参数，那么length属性也不再计入后面的参数了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">function</span> (a = 0, b, c) &#123;&#125;).length // 0</div><div class="line">(<span class="keyword">function</span> (a, b = 1, c) &#123;&#125;).length // 1</div></pre></td></tr></table></figure></p>
<h2 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h2><p>ES6 引入 rest 参数（形式为“…变量名”），用于获取函数的多余参数，这样就不需要使用arguments对象了。<br>rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> add(...values) &#123;</div><div class="line">  <span class="built_in">let</span> sum = 0;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (var val of values) &#123;</div><div class="line">    sum += val;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(2, 5, 3) // 10</div></pre></td></tr></table></figure></p>
<p>注意，rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 报错</div><div class="line"><span class="keyword">function</span> f(a, ...b, c) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>函数的length属性，不包括 rest 参数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">function</span>(a) &#123;&#125;).length  // 1</div><div class="line">(<span class="keyword">function</span>(...a) &#123;&#125;).length  // 0</div><div class="line">(<span class="keyword">function</span>(a, ...b) &#123;&#125;).length  // 1</div></pre></td></tr></table></figure></p>
<h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p>扩展运算符（spread）是三个点（…）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">console.log(1, ...[2, 3, 4], 5) // 1 2 3 4 5</div><div class="line"></div><div class="line"><span class="keyword">function</span> add(x, y) &#123;</div><div class="line">  <span class="built_in">return</span> x + y;</div><div class="line">&#125;</div><div class="line">var numbers = [4, 38];</div><div class="line">add(...numbers) // 42</div></pre></td></tr></table></figure></p>
<h3 id="替代数组的apply方法"><a href="#替代数组的apply方法" class="headerlink" title="替代数组的apply方法"></a>替代数组的apply方法</h3><p>由于扩展运算符可以展开数组，所以不再需要apply方法，将数组转为函数的参数了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// ES5的写法</div><div class="line"><span class="keyword">function</span> f(x, y, z) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line">var args = [0, 1, 2];</div><div class="line">f.apply(null, args);</div><div class="line"></div><div class="line">// ES6的写法</div><div class="line"><span class="keyword">function</span> f(x, y, z) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line">var args = [0, 1, 2];</div><div class="line">f(...args);</div></pre></td></tr></table></figure></p>
<p>另一个例子是通过push函数，将一个数组添加到另一个数组的尾部.ES5写法中，push方法的参数不能是数组，所以只好通过apply方法变通使用push方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// ES5的写法</div><div class="line">var arr1 = [0, 1, 2];</div><div class="line">var arr2 = [3, 4, 5];</div><div class="line">Array.prototype.push.apply(arr1, arr2);</div><div class="line"></div><div class="line">// ES6的写法</div><div class="line">var arr1 = [0, 1, 2];</div><div class="line">var arr2 = [3, 4, 5];</div><div class="line">arr1.push(...arr2);</div></pre></td></tr></table></figure></p>
<h3 id="扩展运算符的应用"><a href="#扩展运算符的应用" class="headerlink" title="扩展运算符的应用"></a>扩展运算符的应用</h3><p>(1)合并数组<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>];</div><div class="line">var arr2 = [<span class="string">'c'</span>];</div><div class="line">var arr3 = [<span class="string">'d'</span>, <span class="string">'e'</span>];</div><div class="line"></div><div class="line">// ES5的合并数组</div><div class="line">arr1.concat(arr2, arr3);  // [ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span> ]</div><div class="line"></div><div class="line">// ES6的合并数组</div><div class="line">[...arr1, ...arr2, ...arr3]  // [ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span> ]</div></pre></td></tr></table></figure></p>
<p>(2)与解构赋值结合<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// ES5</div><div class="line">a = list[0], rest = list.slice(1)</div><div class="line">// ES6</div><div class="line">[a, ...rest] = list;</div><div class="line">const [...butLast, last] = [1, 2, 3, 4, 5];  //如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</div></pre></td></tr></table></figure></p>
<h2 id="name-属性"><a href="#name-属性" class="headerlink" title="name 属性"></a>name 属性</h2><p>函数的name属性，返回该函数的函数名,匿名函数name属性的值为anonymous。。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo</span></span>() &#123;&#125;</div><div class="line">foo.name // <span class="string">"foo"</span></div><div class="line"></div><div class="line">(new Function).name // <span class="string">"anonymous"</span></div></pre></td></tr></table></figure></p>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>最常用的代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var f = v =&gt; v; //等同于下面的函数</div><div class="line">var f = <span class="keyword">function</span>(v) &#123;</div><div class="line">  <span class="built_in">return</span> v;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var sum = (num1, num2) =&gt; &#123; <span class="built_in">return</span> num1 + num2; &#125;  //如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用<span class="built_in">return</span>语句返回</div><div class="line"></div><div class="line">var getTempItem = id =&gt; (&#123; id: id, name: <span class="string">"Temp"</span> &#125;); //由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号。</div><div class="line"></div><div class="line">const full = (&#123; first, last &#125;) =&gt; first + <span class="string">' '</span> + last; //箭头函数可以与变量解构结合使用。</div><div class="line"></div><div class="line">const numbers = (...nums) =&gt; nums;</div></pre></td></tr></table></figure></p>
<p>箭头函数有几个使用注意点:<br>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。<br>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。<br>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用Rest参数(…rest)代替。<br>（4）不可以使用yield命令，因此箭头函数不能用作Generator函数。</p>
<p>this指向的固定化，并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，导致内部的this就是外层代码块的this。正是因为它没有this，所以也就不能用作构造函数。<br>由于箭头函数没有自己的this，所以当然也就不能用call()、apply()、bind()这些方法去改变this的指向。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">  <span class="built_in">return</span> [</div><div class="line">    (() =&gt; this.x).bind(&#123; x: <span class="string">'inner'</span> &#125;)()</div><div class="line">  ];</div><div class="line">&#125;).call(&#123; x: <span class="string">'outer'</span> &#125;);</div><div class="line">// [<span class="string">'outer'</span>]</div></pre></td></tr></table></figure></p>
<h2 id="嵌套的箭头函数"><a href="#嵌套的箭头函数" class="headerlink" title="嵌套的箭头函数"></a>嵌套的箭头函数</h2><p>箭头函数内部，还可以再使用箭头函数。下面是一个ES5语法的多重嵌套函数:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> insert(value) &#123;</div><div class="line">  <span class="built_in">return</span> &#123;into: <span class="keyword">function</span> (array) &#123;</div><div class="line">    <span class="built_in">return</span> &#123;after: <span class="keyword">function</span> (afterValue) &#123;</div><div class="line">      array.splice(array.indexOf(afterValue) + 1, 0, value);</div><div class="line">      <span class="built_in">return</span> array;</div><div class="line">    &#125;&#125;;</div><div class="line">  &#125;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">insert(2).into([1, 3]).after(1); //[1, 2, 3]</div></pre></td></tr></table></figure></p>
<p>上面这个函数，可以使用箭头函数改写,注意使用（）变成函数表达式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> insert = (value) =&gt; (&#123;into: (array) =&gt; (&#123;after: (afterValue) =&gt; &#123;</div><div class="line">  array.splice(array.indexOf(afterValue) + 1, 0, value);</div><div class="line">  <span class="built_in">return</span> array;</div><div class="line">&#125;&#125;)&#125;);</div><div class="line"></div><div class="line">insert(2).into([1, 3]).after(1); //[1, 2, 3]</div></pre></td></tr></table></figure></p>
<h2 id="绑定-this"><a href="#绑定-this" class="headerlink" title="绑定 this"></a>绑定 this</h2><p>箭头函数可以绑定this对象,箭头函数并不适用于所有场合，所以ES7提出了“函数绑定”（function bind）运算符，用来取代call、apply、bind调用.</p>
<p>函数绑定运算符是并排的两个双冒号（::），双冒号左边是一个对象，右边是一个函数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">foo::bar;</div><div class="line">// 等同于</div><div class="line">bar.bind(foo);</div><div class="line"></div><div class="line">foo::bar(...arguments);</div><div class="line">// 等同于</div><div class="line">bar.apply(foo, arguments);</div></pre></td></tr></table></figure></p>
<p>如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上面。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var method = obj::obj.foo;</div><div class="line">// 等同于</div><div class="line">var method = ::obj.foo;</div></pre></td></tr></table></figure></p>
<p>由于双冒号运算符返回的还是原对象，因此可以采用链式写法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">document.querySelectorAll(<span class="string">"div.myClass"</span>)</div><div class="line">::find(<span class="string">"p"</span>)</div><div class="line">::html(<span class="string">"hahaha"</span>);</div></pre></td></tr></table></figure></p>
<h2 id="函数参数的尾逗号"><a href="#函数参数的尾逗号" class="headerlink" title="函数参数的尾逗号"></a>函数参数的尾逗号</h2><p>此前，函数定义和调用时，都不允许最后一个参数后面出现逗号。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">clownsEverywhere(</div><div class="line">  <span class="string">'foo'</span>,</div><div class="line">  <span class="string">'bar'</span></div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>ES2017 允许函数的最后一个参数有尾逗号（trailing comma）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">clownsEverywhere(</div><div class="line">  <span class="string">'foo'</span>,</div><div class="line">  <span class="string">'bar'</span>,</div><div class="line">);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ES6技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 函数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6之数组的扩展]]></title>
      <url>/2017/04/09/ES6%E4%B9%8B%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h2><p>Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）.<br>所谓类似数组的对象，本质特征只有一点，即必须有length属性。因此，任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Array.from(&#123; length: 3 &#125;); // [ undefined, undefined, undefined ]</div><div class="line"></div><div class="line"><span class="built_in">let</span> arrayLike = &#123;</div><div class="line">    <span class="string">'0'</span>: <span class="string">'a'</span>,</div><div class="line">    <span class="string">'1'</span>: <span class="string">'b'</span>,</div><div class="line">    <span class="string">'2'</span>: <span class="string">'c'</span>,</div><div class="line">    length: 3</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// ES5的写法</div><div class="line">var arr1 = [].slice.call(arrayLike); // [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"></div><div class="line">// ES6的写法</div><div class="line"><span class="built_in">let</span> arr2 = Array.from(arrayLike); // [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line"></div><div class="line">Array.from(<span class="string">'hello'</span>) // [<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>]</div><div class="line"></div><div class="line"><span class="built_in">let</span> namesSet = new Set([<span class="string">'a'</span>, <span class="string">'b'</span>])</div><div class="line">Array.from(namesSet) // [<span class="string">'a'</span>, <span class="string">'b'</span>]</div></pre></td></tr></table></figure></p>
<p>Array.from()可以将各种值转为真正的数组，并且还提供map功能。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Array.from([1, , 2, , 3], (n) =&gt; n || 0)  // [1, 0, 2, 0, 3]</div></pre></td></tr></table></figure></p>
<h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h2><p>先来讲数组构造函数Array(),因为参数个数的不同，会导致Array()的行为有差异。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Array() // []</div><div class="line">Array(3) // [, , ,]</div><div class="line">Array(3, 11, 8) // [3, 11, 8]</div></pre></td></tr></table></figure></p>
<p>Array.of方法用于将一组值，转换为数组,并且不存在由于参数不同而导致的重载。它的行为非常统一。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Array.of(3, 11, 8) // [3,11,8]</div><div class="line">Array.of(3) // [3]</div><div class="line">Array.of(3).length // 1</div></pre></td></tr></table></figure></p>
<h2 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin()"></a>copyWithin()</h2><p>数组实例的copyWithin方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Array.prototype.copyWithin(target, start = 0, end = this.length)</div></pre></td></tr></table></figure></p>
<ul>
<li>target（必需）：从该位置开始替换数据。</li>
<li>start（可选）：从该位置开始读取数据，默认为0。如果为负值，表示倒数。</li>
<li>end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[1, 2, 3, 4, 5].copyWithin(0, 3)  // [4, 5, 3, 4, 5]</div><div class="line"></div><div class="line">[1, 2, 3, 4, 5].copyWithin(0, -2, -1) // -2相当于3号位，-1相当于4号位 [4, 2, 3, 4, 5]</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="find-和findIndex"><a href="#find-和findIndex" class="headerlink" title="find()和findIndex()"></a>find()和findIndex()</h2><p>数组实例的find方法，用于找出第一个符合条件的数组成员。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[1, 5, 10, 15].find(<span class="keyword">function</span>(value, index, arr) &#123;</div><div class="line">  <span class="built_in">return</span> value &gt; 9;</div><div class="line">&#125;) // 10</div></pre></td></tr></table></figure></p>
<p>数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[1, 5, 10, 15].findIndex(<span class="keyword">function</span>(value, index, arr) &#123;</div><div class="line">  <span class="built_in">return</span> value &gt; 9;</div><div class="line">&#125;) // 2</div></pre></td></tr></table></figure></p>
<h2 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h2><p>fill方法使用给定值，填充一个数组,法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(7, 1, 2)  // [<span class="string">'a'</span>, 7, <span class="string">'c'</span>]</div></pre></td></tr></table></figure></p>
<h2 id="entries-，keys-和values"><a href="#entries-，keys-和values" class="headerlink" title="entries()，keys()和values()"></a>entries()，keys()和values()</h2><p>ES6提供三个新的方法——entries()，keys()和values()——用于遍历数组.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> index of [<span class="string">'a'</span>, <span class="string">'b'</span>].keys()) &#123;</div><div class="line">  console.log(index);</div><div class="line">&#125;</div><div class="line">// 0</div><div class="line">// 1</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> elem of [<span class="string">'a'</span>, <span class="string">'b'</span>].values()) &#123;</div><div class="line">  console.log(elem);</div><div class="line">&#125;</div><div class="line">// <span class="string">'a'</span></div><div class="line">// <span class="string">'b'</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> [index, elem] of [<span class="string">'a'</span>, <span class="string">'b'</span>].entries()) &#123;</div><div class="line">  console.log(index, elem);</div><div class="line">&#125;</div><div class="line">// 0 <span class="string">"a"</span></div><div class="line">// 1 <span class="string">"b"</span></div></pre></td></tr></table></figure></p>
<h2 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h2><p>Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似.该方法的第二个参数表示搜索的起始位置，默认为0.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[1, 2, 3].includes(2);     // <span class="literal">true</span></div><div class="line">[1, 2, 3].includes(4);     // <span class="literal">false</span></div><div class="line"></div><div class="line">[1, 2, 3].includes(3, 3);  // <span class="literal">false</span></div><div class="line">[1, 2, 3].includes(3, -1); // <span class="literal">true</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ES6技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6之数值的扩展]]></title>
      <url>/2017/04/09/ES6%E4%B9%8B%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h2 id="Number-isFinite"><a href="#Number-isFinite" class="headerlink" title="Number.isFinite()"></a>Number.isFinite()</h2><p>Number.isFinite()用来检查一个数值是否为有限的（finite）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Number.isFinite(15); // <span class="literal">true</span></div><div class="line">Number.isFinite(Infinity); // <span class="literal">false</span></div><div class="line">Number.isFinite(-Infinity); // <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<p>它与传统的全局方法isFinite()的区别在于，传统方法先调用Number()将非数值的值转为数值，再进行判断，而这方法只对数值有效，Number.isFinite()对于非数值一律返回false.</p>
<h2 id="Number-isNaN"><a href="#Number-isNaN" class="headerlink" title="Number.isNaN()"></a>Number.isNaN()</h2><p>Number.isNaN()用来检查一个值是否为NaN<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Number.isNaN(NaN) // <span class="literal">true</span></div><div class="line">Number.isNaN(15) // <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<p>它与传统的全局方法isNaN()的区别在于，传统方法先调用Number()将非数值的值转为数值，再进行判断，而这方法只对数值有效，Number.isNaN()只有对于NaN才返回true，非NaN一律返回false.</p>
<h2 id="Number-parseInt-Number-parseFloat"><a href="#Number-parseInt-Number-parseFloat" class="headerlink" title="Number.parseInt(), Number.parseFloat()"></a>Number.parseInt(), Number.parseFloat()</h2><p>ES6将全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// ES5的写法</div><div class="line">parseInt(<span class="string">'12.34'</span>) // 12</div><div class="line">parseFloat(<span class="string">'123.45#'</span>) // 123.45</div><div class="line"></div><div class="line">// ES6的写法</div><div class="line">Number.parseInt(<span class="string">'12.34'</span>) // 12</div><div class="line">Number.parseFloat(<span class="string">'123.45#'</span>) // 123.45</div></pre></td></tr></table></figure></p>
<h2 id="Number-isInteger"><a href="#Number-isInteger" class="headerlink" title="Number.isInteger()"></a>Number.isInteger()</h2><p>Number.isInteger()用来判断一个值是否为整数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Number.isInteger(25) // <span class="literal">true</span></div><div class="line">Number.isInteger(25.0) // <span class="literal">true</span></div><div class="line">Number.isInteger(25.1) // <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<h2 id="Number-EPSILON"><a href="#Number-EPSILON" class="headerlink" title="Number.EPSILON"></a>Number.EPSILON</h2><p>作用：极小的常量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Number.EPSILON</div><div class="line">// 2.220446049250313e-16</div><div class="line">Number.EPSILON.toFixed(20)</div><div class="line">// <span class="string">'0.00000000000000022204'</span></div></pre></td></tr></table></figure></p>
<h2 id="安全整数和Number-isSafeInteger"><a href="#安全整数和Number-isSafeInteger" class="headerlink" title="安全整数和Number.isSafeInteger()"></a>安全整数和Number.isSafeInteger()</h2><p>JavaScript能够准确表示的整数范围在-2^53到2^53之间（不含两个端点），超过这个范围，无法精确表示这个值。<br>ES6引入了Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER这两个常量，用来表示这个范围的上下限.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Number.MAX_SAFE_INTEGER === Math.pow(2, 53) - 1</div><div class="line">// <span class="literal">true</span></div><div class="line">Number.MAX_SAFE_INTEGER === 9007199254740991</div><div class="line">// <span class="literal">true</span></div><div class="line"></div><div class="line">Number.MIN_SAFE_INTEGER === -Number.MAX_SAFE_INTEGER</div><div class="line">// <span class="literal">true</span></div><div class="line">Number.MIN_SAFE_INTEGER === -9007199254740991</div><div class="line">// <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>Number.isSafeInteger()则是用来判断一个整数是否落在这个范围之内。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Number.isSafeInteger(3) // <span class="literal">true</span></div><div class="line">Number.isSafeInteger(Infinity) // <span class="literal">false</span></div><div class="line">Number.isSafeInteger(-Infinity) // <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<h2 id="Math对象的扩展"><a href="#Math对象的扩展" class="headerlink" title="Math对象的扩展"></a>Math对象的扩展</h2><p>ES6在Math对象上新增了17个与数学相关的方法。所有这些方法都是静态方法，只能在Math对象上调用。</p>
<h3 id="Math-trunc"><a href="#Math-trunc" class="headerlink" title="Math.trunc()"></a>Math.trunc()</h3><p>Math.trunc方法用于去除一个数的小数部分，返回整数部分。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Math.trunc(4.1) // 4</div><div class="line">Math.trunc(4.9) // 4</div><div class="line">Math.trunc(-4.1) // -4</div><div class="line">Math.trunc(-4.9) // -4</div><div class="line">Math.trunc(-0.1234) // -0</div></pre></td></tr></table></figure></p>
<h3 id="Math-sign"><a href="#Math-sign" class="headerlink" title="Math.sign()"></a>Math.sign()</h3><p>Math.sign方法用来判断一个数到底是正数、负数、还是零</p>
<ul>
<li>参数为正数，返回+1；</li>
<li>参数为负数，返回-1；</li>
<li>参数为0，返回0；</li>
<li>参数为-0，返回-0;</li>
<li>其他值，返回NaN。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Math.sign(-5) // -1</div><div class="line">Math.sign(5) // +1</div><div class="line">Math.sign(0) // +0</div><div class="line">Math.sign(-0) // -0</div><div class="line">Math.sign(NaN) // NaN</div><div class="line">Math.sign(<span class="string">'foo'</span>); // NaN</div><div class="line">Math.sign();      // NaN</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Math-cbrt"><a href="#Math-cbrt" class="headerlink" title="Math.cbrt()"></a>Math.cbrt()</h3><p>Math.cbrt方法用于计算一个数的立方根。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Math.cbrt(-1) // -1</div><div class="line">Math.cbrt(0)  // 0</div><div class="line">Math.cbrt(1)  // 1</div><div class="line">Math.cbrt(2)  // 1.2599210498948734</div></pre></td></tr></table></figure></p>
<h3 id="Math-imul"><a href="#Math-imul" class="headerlink" title="Math.imul()"></a>Math.imul()</h3><p>作用：两个数相乘<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Math.imul(2, 4)   // 8</div><div class="line">Math.imul(-1, 8)  // -8</div><div class="line">Math.imul(-2, -2) // 4</div></pre></td></tr></table></figure></p>
<h3 id="Math-hypot"><a href="#Math-hypot" class="headerlink" title="Math.hypot()"></a>Math.hypot()</h3><p>Math.hypot方法返回所有参数的平方和的平方根。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Math.hypot(3, 4);        // 5</div></pre></td></tr></table></figure></p>
<h3 id="Math-expm1"><a href="#Math-expm1" class="headerlink" title="Math.expm1()"></a>Math.expm1()</h3><p>Math.expm1(x)返回ex - 1，即Math.exp(x) - 1。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Math.expm1(-1) // -0.6321205588285577</div><div class="line">Math.expm1(0)  // 0</div><div class="line">Math.expm1(1)  // 1.718281828459045</div></pre></td></tr></table></figure></p>
<h3 id="Math-log1p"><a href="#Math-log1p" class="headerlink" title="Math.log1p()"></a>Math.log1p()</h3><p>Math.log1p(x)方法返回1 + x的自然对数，即Math.log(1 + x)。如果x小于-1，返回NaN。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Math.log1p(1)  // 0.6931471805599453</div><div class="line">Math.log1p(0)  // 0</div><div class="line">Math.log1p(-1) // -Infinity</div><div class="line">Math.log1p(-2) // NaN</div></pre></td></tr></table></figure></p>
<h3 id="Math-log10"><a href="#Math-log10" class="headerlink" title="Math.log10()"></a>Math.log10()</h3><p>Math.log10(x)返回以10为底的x的对数。如果x小于0，则返回NaN。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Math.log10(2)      // 0.3010299956639812</div><div class="line">Math.log10(1)      // 0</div><div class="line">Math.log10(0)      // -Infinity</div><div class="line">Math.log10(-2)     // NaN</div><div class="line">Math.log10(100000) // 5</div></pre></td></tr></table></figure></p>
<h3 id="Math-log2"><a href="#Math-log2" class="headerlink" title="Math.log2()"></a>Math.log2()</h3><p>Math.log2(x)返回以2为底的x的对数。如果x小于0，则返回NaN。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Math.log2(3)       // 1.584962500721156</div><div class="line">Math.log2(2)       // 1</div><div class="line">Math.log2(1)       // 0</div></pre></td></tr></table></figure></p>
<h3 id="三角函数方法"><a href="#三角函数方法" class="headerlink" title="三角函数方法"></a>三角函数方法</h3><ul>
<li>Math.sinh(x) 返回x的双曲正弦（hyperbolic sine）</li>
<li>Math.cosh(x) 返回x的双曲余弦（hyperbolic cosine）</li>
<li>Math.tanh(x) 返回x的双曲正切（hyperbolic tangent）</li>
<li>Math.asinh(x) 返回x的反双曲正弦（inverse hyperbolic sine）</li>
<li>Math.acosh(x) 返回x的反双曲余弦（inverse hyperbolic cosine）</li>
<li>Math.atanh(x) 返回x的反双曲正切（inverse hyperbolic tangent）</li>
</ul>
<h3 id="Math-signbit"><a href="#Math-signbit" class="headerlink" title="Math.signbit()"></a>Math.signbit()</h3><p>Math.sign()用来判断一个值是否为负.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Math.signbit(2) //<span class="literal">false</span></div><div class="line">Math.signbit(-2) //<span class="literal">true</span></div></pre></td></tr></table></figure></p>
<h2 id="指数运算符"><a href="#指数运算符" class="headerlink" title="指数运算符"></a>指数运算符</h2><p>ES2016 新增了一个指数运算符（**）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2 ** 2 // 4</div><div class="line">2 ** 3 // 8</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ES6技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 数值 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6之字符串的扩展]]></title>
      <url>/2017/04/05/ES6%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h2 id="codePointAt"><a href="#codePointAt" class="headerlink" title="codePointAt"></a>codePointAt</h2><p>codePointAt方法是测试一个字符由两个字节还是由四个字节组成的最简单方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> is32Bit(c) &#123;</div><div class="line">  <span class="built_in">return</span> c.codePointAt(0) &gt; 0xFFFF;</div><div class="line">&#125;</div><div class="line"></div><div class="line">is32Bit(<span class="string">"𠮷"</span>) // <span class="literal">true</span></div><div class="line">is32Bit(<span class="string">"a"</span>) // <span class="literal">false</span></div></pre></td></tr></table></figure></p>
<h2 id="String-fromCodePoint"><a href="#String-fromCodePoint" class="headerlink" title="String.fromCodePoint()"></a>String.fromCodePoint()</h2><p>作用：从码点返回对应字符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String.fromCodePoint(0x20BB7) // <span class="string">"𠮷"</span></div><div class="line">String.fromCodePoint(0x78, 0x1f680, 0x79) === <span class="string">'x\uD83D\uDE80y'</span>   // <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>上面代码中，如果String.fromCodePoint方法有多个参数，则它们会被合并成一个字符串返回。</p>
<p>注意，fromCodePoint方法定义在String对象上，而codePointAt方法定义在字符串的实例对象上。</p>
<h2 id="字符串的遍历器接口"><a href="#字符串的遍历器接口" class="headerlink" title="字符串的遍历器接口"></a>字符串的遍历器接口</h2><p>ES6为字符串添加了遍历器接口，使得字符串可以被for…of循环遍历<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> codePoint of <span class="string">'foo'</span>) &#123;</div><div class="line">  console.log(codePoint)         //<span class="string">"f"</span> <span class="string">"o"</span> <span class="string">"o"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="at"><a href="#at" class="headerlink" title="at()"></a>at()</h2><p>ES5对字符串对象提供charAt方法，返回字符串给定位置的字符,该方法不能识别码点大于0xFFFF的字符。但是at可以解决。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">'abc'</span>.charAt(0) // <span class="string">"a"</span></div><div class="line"><span class="string">'𠮷'</span>.charAt(0) // <span class="string">"\uD842"</span></div><div class="line"></div><div class="line"><span class="string">'abc'</span>.at(0) // <span class="string">"a"</span></div><div class="line"><span class="string">'𠮷'</span>.at(0) // <span class="string">"𠮷"</span></div></pre></td></tr></table></figure></p>
<h2 id="搜索函数"><a href="#搜索函数" class="headerlink" title="搜索函数"></a>搜索函数</h2><p>传统上，JavaScript只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6又提供了三种新方法。</p>
<ul>
<li>includes()：返回布尔值，表示是否找到了参数字符串。使用第二个参数n时，从第n个位置直到字符串结束。</li>
<li>startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。使用第二个参数n时，从第n个位置直到字符串结束。</li>
<li>endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。使用第二个参数n时，endsWith的行为与其他两个方法有所不同。它针对前n个字符<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var s = <span class="string">'Hello world!'</span>;</div><div class="line"></div><div class="line">s.startsWith(<span class="string">'Hello'</span>) // <span class="literal">true</span></div><div class="line">s.endsWith(<span class="string">'!'</span>) // <span class="literal">true</span></div><div class="line">s.includes(<span class="string">'o'</span>) // <span class="literal">true</span></div><div class="line"></div><div class="line">s.startsWith(<span class="string">'world'</span>, 6) // <span class="literal">true</span></div><div class="line">s.endsWith(<span class="string">'Hello'</span>, 5) // <span class="literal">true</span></div><div class="line">s.includes(<span class="string">'Hello'</span>, 6) // <span class="literal">false</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h2><p>repeat方法返回一个新字符串，表示将原字符串重复n次。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">'x'</span>.repeat(3) // <span class="string">"xxx"</span></div><div class="line"><span class="string">'hello'</span>.repeat(2) // <span class="string">"hellohello"</span></div><div class="line"><span class="string">'na'</span>.repeat(0) // <span class="string">""</span></div></pre></td></tr></table></figure></p>
<h2 id="padStart-，padEnd"><a href="#padStart-，padEnd" class="headerlink" title="padStart()，padEnd()"></a>padStart()，padEnd()</h2><p>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。</p>
<ul>
<li>padStart()用于头部补全</li>
<li>padEnd()用于尾部补全。<br>(1)padStart和padEnd一共接受两个参数，第一个参数用来指定字符串的最小长度，第二个参数是用来补全的字符串。省略第二个参数，默认使用空格补全长度。<br>(2)原字符串的长度，等于或大于指定的最小长度，则返回原字符串<br>(3)如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="string">'x'</span>.padStart(5, <span class="string">'ab'</span>) // <span class="string">'ababx'</span></div><div class="line"><span class="string">'x'</span>.padStart(4, <span class="string">'ab'</span>) // <span class="string">'abax'</span></div><div class="line"></div><div class="line"><span class="string">'x'</span>.padEnd(5, <span class="string">'ab'</span>) // <span class="string">'xabab'</span></div><div class="line"><span class="string">'x'</span>.padEnd(4, <span class="string">'ab'</span>) // <span class="string">'xaba'</span></div><div class="line"></div><div class="line"><span class="string">'xxx'</span>.padStart(2, <span class="string">'ab'</span>) // <span class="string">'xxx'</span></div><div class="line"></div><div class="line"><span class="string">'abc'</span>.padStart(10, <span class="string">'0123456789'</span>)  // <span class="string">'0123456abc'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识。<br>传统的JavaScript语言，输出模板通常是这样写的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#result'</span>).append(</div><div class="line">  <span class="string">'There are &lt;b&gt;'</span> + basket.count + <span class="string">'&lt;/b&gt; '</span> +</div><div class="line">  <span class="string">'items in your basket, '</span> +</div><div class="line">  <span class="string">'&lt;em&gt;'</span> + basket.onSale +</div><div class="line">  <span class="string">'&lt;/em&gt; are on sale!'</span></div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>ES6引入了模板字符串解决这个问题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#result'</span>).append(`</div><div class="line">  There are &lt;b&gt;<span class="variable">$&#123;basket.count&#125;</span>&lt;/b&gt; items</div><div class="line">   <span class="keyword">in</span> your basket, &lt;em&gt;<span class="variable">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</div><div class="line">  are on sale!</div><div class="line">`);</div></pre></td></tr></table></figure></p>
<p>如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。如果你不想要这个换行，可以使用trim方法消除它。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#list'</span>).html(`</div><div class="line">&lt;ul&gt;</div><div class="line">  &lt;li&gt;first&lt;/li&gt;</div><div class="line">  &lt;li&gt;second&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">`.trim());</div></pre></td></tr></table></figure></p>
<p>模板字符串中嵌入变量，需要将变量名写在${}之中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var x = 1;</div><div class="line">var y = 2;</div><div class="line">`<span class="variable">$&#123;x&#125;</span> + <span class="variable">$&#123;y&#125;</span> = <span class="variable">$&#123;x + y&#125;</span>` // <span class="string">"1 + 2 = 3"</span></div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fn</span></span>() &#123;</div><div class="line">  <span class="built_in">return</span> <span class="string">"Hello World"</span>;</div><div class="line">&#125;</div><div class="line">`foo <span class="variable">$&#123;fn()&#125;</span> bar`</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ES6技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6之变量结构赋值]]></title>
      <url>/2017/04/02/ES6%E4%B9%8B%E5%8F%98%E9%87%8F%E7%BB%93%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
      <content type="html"><![CDATA[<h2 id="数组方式解构赋值"><a href="#数组方式解构赋值" class="headerlink" title="数组方式解构赋值"></a>数组方式解构赋值</h2><p><strong>此方法必须等号左右两边都是数组</strong>，数组的元素是按次序排列的,数组定义变量的方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> [a, b, c] = [1, 2, 3];   //直接数组定义多个</div><div class="line"><span class="built_in">let</span> [foo, [[bar], baz]] = [1, [[2], 3]]; </div><div class="line"></div><div class="line"><span class="built_in">let</span> [x, , y] = [1, 2, 3];  //不报错，但不建议这样写</div><div class="line"><span class="built_in">let</span> [x, y] = [1, 2, 3];  //不报错，但不建议这样写</div><div class="line"></div><div class="line"><span class="built_in">let</span> [head, ...tail] = [1, 2, 3, 4];  //head =&gt;1  tail =&gt; [2, 3, 4]</div><div class="line"></div><div class="line"><span class="built_in">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>, undefined]; // 默认赋值x=<span class="string">'a'</span>, y=<span class="string">'b'</span></div><div class="line"><span class="built_in">let</span> [x = 1] = [null]; // x=null,如果一个数组成员是null，默认值就不会生效，因为null不严格等于undefined</div><div class="line"></div><div class="line"><span class="built_in">let</span> [x = 1, y = x] = [];     // x=1; y=1</div><div class="line"><span class="built_in">let</span> [x = y, y = 1] = [];     // ReferenceError 默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</div></pre></td></tr></table></figure></p>
<p>如果解构不成功，变量的值就等于undefined<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> [bar, foo] = [1];  //bar=&gt;1   foo=&gt;undefined</div></pre></td></tr></table></figure></p>
<h2 id="对象方式解构赋值"><a href="#对象方式解构赋值" class="headerlink" title="对象方式解构赋值"></a>对象方式解构赋值</h2><p>对象的属性没有次序，变量必须与属性同名,对象定义变量的方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> &#123; foo: foo, bar: bar &#125; = &#123; foo: <span class="string">"aaa"</span>, bar: <span class="string">"bbb"</span> &#125;;</div><div class="line"><span class="built_in">let</span> &#123; foo, bar &#125; = &#123; foo: <span class="string">"aaa"</span>, bar: <span class="string">"bbb"</span> &#125;; //foo = aaa  bar = bbb,这是上面的简写</div><div class="line"></div><div class="line"><span class="built_in">let</span> &#123;x, y&#125; =&#123;x: 1, y: 2&#125;</div><div class="line"><span class="built_in">let</span> &#123;x = 3, y&#125; =&#123;y: 2&#125; //不报错，但不建议这样写</div><div class="line"></div><div class="line"><span class="built_in">let</span> &#123;foo&#125; = &#123;bar: <span class="string">'baz'</span>&#125;; //foo=</div><div class="line"></div><div class="line">//foo是匹配的模式，baz才是变量。真正被赋值的是变量baz，而不是模式foo</div><div class="line"><span class="built_in">let</span> &#123; foo: baz &#125; = &#123; foo: <span class="string">"aaa"</span>, bar: <span class="string">"bbb"</span> &#125;; //baz = <span class="string">"aaa"</span>   foo = error: foo is not defined  </div><div class="line"></div><div class="line"><span class="built_in">let</span> &#123; bar, foo &#125; = &#123; foo: <span class="string">"aaa"</span>, bar: <span class="string">"bbb"</span> &#125;; //bar = bbb  foo = aaa ,对象的属性没有次序，变量必须与属性同名</div></pre></td></tr></table></figure></p>
<p>解构也可以用于嵌套结构的对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var node = &#123;</div><div class="line">  loc: &#123;</div><div class="line">    start: &#123;</div><div class="line">      line: 1,</div><div class="line">      column: 5</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var &#123; loc: &#123; start: &#123; line &#125;&#125; &#125; = node;</div><div class="line">line // 1</div><div class="line">loc  // error: loc is undefined</div><div class="line">start // error: start is undefined</div></pre></td></tr></table></figure></p>
<p>上面只有line是变量，loc和start都是模式，不会被赋值。</p>
<p>如果解构不成功，变量的值就等于undefined<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> &#123;bar, foo&#125; = &#123;bar: 1&#125;;  //bar=&gt;1   foo=&gt;undefined</div></pre></td></tr></table></figure></p>
<p>特殊用法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> &#123; <span class="built_in">log</span>, sin, cos &#125; = Math;</div></pre></td></tr></table></figure></p>
<p>上面代码将Math对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。</p>
<h2 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h2><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const [a, b, c, d, e] = <span class="string">'hello'</span>;  //a =&gt; <span class="string">"h"</span>  b =&gt; <span class="string">"e"</span> c =&gt; <span class="string">"l"</span> d =&gt; <span class="string">"l"</span> e =&gt; <span class="string">"o"</span></div></pre></td></tr></table></figure></p>
<p>类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> &#123;length : len&#125; = <span class="string">'hello'</span>;  //len =&gt; 5</div></pre></td></tr></table></figure></p>
<h2 id="数值和布尔值的解构赋值"><a href="#数值和布尔值的解构赋值" class="headerlink" title="数值和布尔值的解构赋值"></a>数值和布尔值的解构赋值</h2><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> &#123;toString: s&#125; = 123;</div><div class="line">s === Number.prototype.toString // <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="built_in">let</span> &#123;toString: s&#125; = <span class="literal">true</span>;</div><div class="line">s === Boolean.prototype.toString // <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>注意上面是将右边转化为对象，对象有toString属性，所以s是右边对象的属性toString赋值后结果</p>
<h2 id="undefined和null赋值"><a href="#undefined和null赋值" class="headerlink" title="undefined和null赋值"></a>undefined和null赋值</h2><p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> &#123; prop: x &#125; = undefined; // TypeError</div><div class="line"><span class="built_in">let</span> &#123; prop: y &#125; = null; // TypeError</div></pre></td></tr></table></figure></p>
<h2 id="函数的解构赋值"><a href="#函数的解构赋值" class="headerlink" title="函数的解构赋值"></a>函数的解构赋值</h2><p>函数的参数也可以使用数组和对象解构赋值。</p>
<h3 id="函数使用数组解构值"><a href="#函数使用数组解构值" class="headerlink" title="函数使用数组解构值"></a>函数使用数组解构值</h3><p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> add([x, y])&#123;</div><div class="line">  <span class="built_in">return</span> x + y;</div><div class="line">&#125;</div><div class="line"></div><div class="line">add([1, 2]); // 3</div></pre></td></tr></table></figure></p>
<h3 id="函数使用对象解构值"><a href="#函数使用对象解构值" class="headerlink" title="函数使用对象解构值"></a>函数使用对象解构值</h3><p>千万注意使用对象解构值指定默认值的情况<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//使用下面的方式</div><div class="line"><span class="keyword">function</span> move(&#123;x = 0, y = 0&#125; = &#123;&#125;) &#123;</div><div class="line">  <span class="built_in">return</span> [x, y];</div><div class="line">&#125;</div><div class="line">move(&#123;x: 3, y: 8&#125;); // [3, 8]</div><div class="line">move(&#123;x: 3&#125;); // [3, 0]</div><div class="line">move(&#123;&#125;); // [0, 0]</div><div class="line">move(); // [0, 0]</div><div class="line">而不能使用下面的方式，函数move的参数指定默认值，而不是为变量x和y指定默认值</div><div class="line"><span class="keyword">function</span> move(&#123;x, y&#125; = &#123;x: 0, y: 0&#125;) &#123;</div><div class="line">  <span class="built_in">return</span> [x, y];</div><div class="line">&#125;</div><div class="line">move(&#123;x: 3, y: 8&#125;); // [3, 8]</div><div class="line">move(&#123;x: 3&#125;); // [3, undefined]</div><div class="line">move(&#123;&#125;); // [undefined, undefined]</div><div class="line">move(); // [0, 0]</div></pre></td></tr></table></figure></p>
<h2 id="解构值的重点用法"><a href="#解构值的重点用法" class="headerlink" title="解构值的重点用法"></a>解构值的重点用法</h2><h3 id="提取JSON数据"><a href="#提取JSON数据" class="headerlink" title="提取JSON数据"></a>提取JSON数据</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> jsonData = &#123;</div><div class="line">  id: 42,</div><div class="line">  status: <span class="string">"OK"</span>,</div><div class="line">  data: [867, 5309]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">let</span> &#123; id, status, data: number &#125; = jsonData;</div><div class="line"></div><div class="line">console.log(id, status, number);</div><div class="line">// 42, <span class="string">"OK"</span>, [867, 5309]</div></pre></td></tr></table></figure>
<h3 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">jQuery.ajax = <span class="keyword">function</span> (url, &#123;</div><div class="line">  async = <span class="literal">true</span>,</div><div class="line">  beforeSend = <span class="function"><span class="title">function</span></span> () &#123;&#125;,</div><div class="line">  cache = <span class="literal">true</span>,</div><div class="line">  complete = <span class="function"><span class="title">function</span></span> () &#123;&#125;,</div><div class="line">  crossDomain = <span class="literal">false</span>,</div><div class="line">  global = <span class="literal">true</span>,</div><div class="line">  // ... more config</div><div class="line">&#125;) &#123;</div><div class="line">  // ... <span class="keyword">do</span> stuff</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="遍历Map结构"><a href="#遍历Map结构" class="headerlink" title="遍历Map结构"></a>遍历Map结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var map = new Map();</div><div class="line">map.set(<span class="string">'first'</span>, <span class="string">'hello'</span>);</div><div class="line">map.set(<span class="string">'second'</span>, <span class="string">'world'</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> [key, value] of map) &#123;</div><div class="line">  console.log(key + <span class="string">" is "</span> + value);</div><div class="line">&#125;</div><div class="line">// first is hello</div><div class="line">// second is world</div></pre></td></tr></table></figure>
<p>如果只想获取键名，或者只想获取键值，可以写成下面这样。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 获取键名</div><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> [key] of map) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 获取键值</div><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> [,value] of map) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="输入模块的指定方法"><a href="#输入模块的指定方法" class="headerlink" title="输入模块的指定方法"></a>输入模块的指定方法</h3><p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const &#123; SourceMapConsumer, SourceNode &#125; = require(<span class="string">"source-map"</span>);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ES6技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 变量 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[let和const命令]]></title>
      <url>/2017/03/28/let%E5%92%8Cconst%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p>ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景，比如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var s = <span class="string">'hello'</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (var i = 0; i &lt; s.length; i++) &#123;</div><div class="line">  console.log(s[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(i); // 5</div></pre></td></tr></table></figure></p>
<p>上面代码中，变量i只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。<br>let实际上为 JavaScript 新增了块级作用域,比如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>() &#123;</div><div class="line">  <span class="built_in">let</span> n = 5;</div><div class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">    <span class="built_in">let</span> n = 10;</div><div class="line">  &#125;</div><div class="line">  console.log(n); // 5</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><h3 id="let与var用法比较"><a href="#let与var用法比较" class="headerlink" title="let与var用法比较"></a>let与var用法比较</h3><p>let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="built_in">let</span> a = 10;</div><div class="line">  var b = 1;</div><div class="line">&#125;</div><div class="line"></div><div class="line">a // ReferenceError: a is not defined.</div><div class="line">b // 1</div></pre></td></tr></table></figure></p>
<h3 id="let与var变量提升比较"><a href="#let与var变量提升比较" class="headerlink" title="let与var变量提升比较"></a>let与var变量提升比较</h3><p>var命令会发生”变量提升“现象，即变量可以在声明之前使用，值为undefined。let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// var 的情况</div><div class="line">console.log(foo); // 输出undefined</div><div class="line">var foo = 2;</div><div class="line"></div><div class="line">// <span class="built_in">let</span> 的情况</div><div class="line">console.log(bar); // 报错ReferenceError</div><div class="line"><span class="built_in">let</span> bar = 2;</div></pre></td></tr></table></figure></p>
<h3 id="let暂时性死区"><a href="#let暂时性死区" class="headerlink" title="let暂时性死区"></a>let暂时性死区</h3><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var tmp = 123;</div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  // TDZ开始</div><div class="line">  tmp = <span class="string">'abc'</span>; // ReferenceError</div><div class="line">  console.log(tmp); // ReferenceError</div><div class="line"></div><div class="line">  <span class="built_in">let</span> tmp; // TDZ结束</div><div class="line">  console.log(tmp); // undefined</div><div class="line"></div><div class="line">  tmp = 123;</div><div class="line">  console.log(tmp); // 123</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码中，在let命令声明变量tmp之前，都属于变量tmp的“死区”。<br>const语句也不出现变量提升。</p>
<h3 id="ES6-允许块级作用域的任意嵌套"><a href="#ES6-允许块级作用域的任意嵌套" class="headerlink" title="ES6 允许块级作用域的任意嵌套"></a>ES6 允许块级作用域的任意嵌套</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;&#123;&#123;</div><div class="line">  <span class="built_in">let</span> insane = <span class="string">'Hello World'</span>;</div><div class="line">  &#123;<span class="built_in">let</span> insane = <span class="string">'Hello World'</span>&#125;</div><div class="line">&#125;</div><div class="line">   console.log(insane); // 报错</div><div class="line">&#125;&#125;&#125;;</div></pre></td></tr></table></figure>
<p>上面代码使用了一个五层的块级作用域。外层作用域无法读取内层作用域的变量,内层作用域可以定义外层作用域的同名变量.</p>
<p>块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// IIFE 写法</div><div class="line">(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">  var tmp = ...;</div><div class="line">  ...</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">// 块级作用域写法</div><div class="line">&#123;</div><div class="line">  <span class="built_in">let</span> tmp = ...;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="let不允许重复声明"><a href="#let不允许重复声明" class="headerlink" title="let不允许重复声明"></a>let不允许重复声明</h3><p>let不允许在相同作用域内，重复声明同一个变量。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 报错</div><div class="line"><span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">  <span class="built_in">let</span> a = 10;</div><div class="line">  <span class="built_in">let</span> a = 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="const-命令"><a href="#const-命令" class="headerlink" title="const 命令"></a>const 命令</h2><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const PI = 3.1415;</div><div class="line">PI // 3.1415</div><div class="line"></div><div class="line">PI = 3;</div><div class="line">// TypeError: Assignment to constant variable.</div></pre></td></tr></table></figure></p>
<h3 id="const声明"><a href="#const声明" class="headerlink" title="const声明"></a>const声明</h3><p>const声明的变量不得改变值，这意味着，const一旦声明变量，就必须立即初始化，不能留到以后赋值。</p>
<h3 id="const变量不提升"><a href="#const变量不提升" class="headerlink" title="const变量不提升"></a>const变量不提升</h3><p>const命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  console.log(MAX); // ReferenceError</div><div class="line">  const MAX = 5;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="const只在声明所在的块级作用域内有效"><a href="#const只在声明所在的块级作用域内有效" class="headerlink" title="const只在声明所在的块级作用域内有效"></a>const只在声明所在的块级作用域内有效</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  const MAX = 5;</div><div class="line">&#125;</div><div class="line"></div><div class="line">MAX // Uncaught ReferenceError: MAX is not defined</div></pre></td></tr></table></figure>
<h3 id="const不可重复声明"><a href="#const不可重复声明" class="headerlink" title="const不可重复声明"></a>const不可重复声明</h3><p>const声明的常量，也与let一样不可重复声明。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var message = <span class="string">"Hello!"</span>;</div><div class="line"><span class="built_in">let</span> age = 25;</div><div class="line"></div><div class="line">// 以下两行都会报错</div><div class="line">const message = <span class="string">"Goodbye!"</span>;</div><div class="line">const age = 30;</div></pre></td></tr></table></figure></p>
<h3 id="const本质"><a href="#const本质" class="headerlink" title="const本质"></a>const本质</h3><p>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const foo = &#123;&#125;;</div><div class="line"></div><div class="line">// 为 foo 添加一个属性，可以成功</div><div class="line">foo.prop = 123;</div><div class="line">foo.prop // 123</div><div class="line"></div><div class="line">// 将 foo 指向另一个对象，就会报错</div><div class="line">foo = &#123;&#125;; // TypeError: <span class="string">"foo"</span> is <span class="built_in">read</span>-only</div></pre></td></tr></table></figure></p>
<p>总结：ES6 声明变量的六种方法<br>ES5 只有两种声明变量的方法：var命令和function命令。<br>ES6除了添加let和const命令.<br>另外两种声明变量的方法：import命令和class命令,后面再说。</p>
<h2 id="顶层对象属性"><a href="#顶层对象属性" class="headerlink" title="顶层对象属性"></a>顶层对象属性</h2><p>顶层对象，在浏览器环境指的是window对象，在Node指的是global对象。ES5之中，顶层对象的属性与全局变量是等价的。<br>这样的缺点是：</p>
<ul>
<li>首先是没法在编译时就报出变量未声明的错误，只有运行时才能知道</li>
<li>程序员很容易不知不觉地就创建了全局变量（比如打字出错）</li>
<li>顶层对象的属性是到处可以读写的，这非常不利于模块化编程</li>
<li>window对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象，也是不合适的</li>
</ul>
<p>ES6为了改变这一点，一方面规定，为了保持兼容性，var命令和function命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">// 如果在Node的REPL环境，可以写成global.a</div><div class="line">// 或者采用通用方法，写成this.a</div><div class="line">window.a // 1</div><div class="line"></div><div class="line"><span class="built_in">let</span> b = 1;</div><div class="line">window.b // undefined</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ES6技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> let </tag>
            
            <tag> const </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6转换工具-babel介绍]]></title>
      <url>/2017/03/24/ES6%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7-babel%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>Babel 是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码，从而在现有环境执行。这意味着，你可以用 ES6 的方式编写程序，又不用担心现有环境是否支持。下面是一个例子。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 转码前</div><div class="line">input.map(item =&gt; item + 1);</div><div class="line"></div><div class="line">// 转码后</div><div class="line">input.map(<span class="keyword">function</span> (item) &#123;</div><div class="line">  <span class="built_in">return</span> item + 1;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="babel安装"><a href="#babel安装" class="headerlink" title="babel安装"></a>babel安装</h2><p>要使用Babel， 我们需要nodeJS的环境和npm， 主要安装了nodeJS， npm就默认安装了 ， 现在安装nodeJS很简单了， 直接下载安装就好了；</p>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>在使用Babel之前，我们要先检测一下当前node对es6的支持情况， 我们使用先es-checker， 命令行下执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm -g install es-checker</div></pre></td></tr></table></figure></p>
<p>es-checker安装完毕以后，命令行执行：es-checker<br>本人的电脑执行完出现以下的情况：<br><img src="https://manlili.github.io/img/170324/1.png" alt="图"></p>
<p>当然还有方法二，这个比较简单一点，直接用在线网站检测，<a href="http://ruanyf.github.io/es-checker" target="_blank" rel="external">测试浏览器是否支持ES6</a></p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>所以我们来安装babel吧，有了babel， 能够使用更多高级词法！<br>你可以根据babel官方网站安装步骤安装,或者跟着我的教程安装，(点击我跳转到官方网站地址)[<a href="http://babeljs.io/docs/setup/" target="_blank" rel="external">http://babeljs.io/docs/setup/</a>] 。</p>
<p>首先新建一个工作目录， 然后创建一个package.json的文件，内部内容为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"my-project"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后再打开cmd(命令行), 在工作目录下执行命令安装babel-cli：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm  --save-dev install babel-cli</div></pre></td></tr></table></figure></p>
<p>再安装一个全局的babel-cli：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm -g  install babel-cli</div></pre></td></tr></table></figure></p>
<p>接着在工作目录创建一个名字为.babelrc的文件，但是在windows系统中，不允许直接右键建立没有文件名的文件，可以通过cmd命令行创建：在当前文件夹打开cmd并键入命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">type</span> nul&gt;.babelrc</div></pre></td></tr></table></figure></p>
<p>即可在当前目录下建立文件.babelrc，接着在文件中写入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="string">"presets"</span>: [</div><div class="line">	  <span class="string">"es2015"</span></div><div class="line">	],</div><div class="line">	<span class="string">"plugins"</span>: []</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着安装babel-preset-es2015，还是工作目录， 然后再安装babel-preset-es2015：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev babel-preset-es2015</div></pre></td></tr></table></figure></p>
<p>到目前为止babel算是安装完毕了.</p>
<h2 id="测试是否安装正确"><a href="#测试是否安装正确" class="headerlink" title="测试是否安装正确"></a>测试是否安装正确</h2><p>创建一个test.js的文件， 键入内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[1,2,3].map(x =&gt; x*x);</div></pre></td></tr></table></figure></p>
<p>然后打开gitBash,输入命令babel test.js，出现：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">"use strict"</span>;</div><div class="line"></div><div class="line">[1, 2, 3].map(<span class="keyword">function</span> (x) &#123;</div><div class="line">  <span class="built_in">return</span> x * x;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="babel拓展知识"><a href="#babel拓展知识" class="headerlink" title="babel拓展知识"></a>babel拓展知识</h2><h3 id="命令行转码babel-cli"><a href="#命令行转码babel-cli" class="headerlink" title="命令行转码babel-cli"></a>命令行转码babel-cli</h3><p>Babel提供babel-cli工具，用于命令行转码。安装方法上面已经说过了，这里主要介绍用法。<br>基本用法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 转码结果输出到标准输出</span></div><div class="line">$ babel example.js</div><div class="line"></div><div class="line"><span class="comment"># 转码结果写入一个文件</span></div><div class="line"><span class="comment"># --out-file 或 -o 参数指定输出文件</span></div><div class="line">$ babel example.js --out-file compiled.js</div><div class="line"><span class="comment"># 或者</span></div><div class="line">$ babel example.js -o compiled.js</div><div class="line"></div><div class="line"><span class="comment"># 整个目录转码</span></div><div class="line"><span class="comment"># --out-dir 或 -d 参数指定输出目录</span></div><div class="line">$ babel src --out-dir lib</div><div class="line"><span class="comment"># 或者</span></div><div class="line">$ babel src <span class="_">-d</span> lib</div><div class="line"></div><div class="line"><span class="comment"># -s 参数生成source map文件</span></div><div class="line">$ babel src <span class="_">-d</span> lib <span class="_">-s</span></div></pre></td></tr></table></figure></p>
<h3 id="babelrc配置文件"><a href="#babelrc配置文件" class="headerlink" title="babelrc配置文件"></a>babelrc配置文件</h3><p>Babel的配置文件是.babelrc，存放在项目的根目录下。该文件用来设置转码规则和插件，基本格式如下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [],</div><div class="line">  <span class="string">"plugins"</span>: []</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中presets字段设定转码规则，官方提供以下的规则集，你可以根据需要安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ES2015转码规则</span></div><div class="line">$ npm install --save-dev babel-preset-es2015</div><div class="line"></div><div class="line"><span class="comment"># react转码规则</span></div><div class="line">$ npm install --save-dev babel-preset-react</div><div class="line"></div><div class="line"><span class="comment"># ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</span></div><div class="line">$ npm install --save-dev babel-preset-stage-0</div><div class="line">$ npm install --save-dev babel-preset-stage-1</div><div class="line">$ npm install --save-dev babel-preset-stage-2</div><div class="line">$ npm install --save-dev babel-preset-stage-3</div></pre></td></tr></table></figure></p>
<p>一般我们使用的es6转码规则为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"presets"</span>: [</div><div class="line">    <span class="string">"es2015"</span>,</div><div class="line">    <span class="string">"react"</span>,</div><div class="line">    <span class="string">"stage-2"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"plugins"</span>: []</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果没有Babel的配置文件是.babelrc文件，也可以使用babel命令，比如创建一个test.js的文件， 键入内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[1,2,3].map(x =&gt; x*x);</div></pre></td></tr></table></figure></p>
<p>然后打开gitBash,输入命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">babel test.js --presets es2015</div></pre></td></tr></table></figure></p>
<p>也会出现：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">"use strict"</span>;</div><div class="line"></div><div class="line">[1, 2, 3].map(<span class="keyword">function</span> (x) &#123;</div><div class="line">  <span class="built_in">return</span> x * x;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>后面的参数–presets es2015表示使用该插件进行编译，如果不写上转换是没有效果的。<br>如果每次都这么写很麻烦，建议还是创建个babelrc配置文件。</p>
<h3 id="babel-node"><a href="#babel-node" class="headerlink" title="babel-node"></a>babel-node</h3><p>babel-cli工具自带一个babel-node命令，提供一个支持ES6的REPL环境。它支持Node的REPL环境的所有功能，而且可以直接运行ES6代码。<br>它不用单独安装，而是随babel-cli一起安装。<br>命令是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">babel-node</div></pre></td></tr></table></figure></p>
<p>用大白话来说就是进入console控制台.</p>
<h3 id="babel-register"><a href="#babel-register" class="headerlink" title="babel-register"></a>babel-register</h3><p>babel-register模块改写require命令，为它加上一个钩子。此后，每当使用require加载.js、.jsx、.es和.es6后缀名的文件，就会先用Babel进行转码。<br>安装babel-register命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev babel-register</div></pre></td></tr></table></figure></p>
<p>使用时，必须首先加载babel-register:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">require(<span class="string">"babel-register"</span>);</div><div class="line">require(<span class="string">"./index.js"</span>);</div></pre></td></tr></table></figure></p>
<p>然后，就不需要手动对index.js转码了。<br>需要注意的是，babel-register只会对require命令加载的文件转码，而不会对当前文件转码。另外，由于它是实时转码，所以只适合在开发环境使用。</p>
<h3 id="babel-core"><a href="#babel-core" class="headerlink" title="babel-core"></a>babel-core</h3><p>如果某些代码需要调用Babel的API进行转码，就要使用babel-core模块。<br>关于babel的API,你可以<a href="https://babeljs.io/docs/usage/api/" target="_blank" rel="external">点击这里</a><br>安装命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev babel-core</div></pre></td></tr></table></figure></p>
<p>使用方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">var babel = require(<span class="string">'babel-core'</span>);</div><div class="line"></div><div class="line">// 字符串转码</div><div class="line">babel.transform(<span class="string">'code();'</span>, options);</div><div class="line">// =&gt; &#123; code, map, ast &#125;</div><div class="line"></div><div class="line">// 文件转码（异步）</div><div class="line">babel.transformFile(<span class="string">'filename.js'</span>, options, <span class="keyword">function</span>(err, result) &#123;</div><div class="line">  result; // =&gt; &#123; code, map, ast &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 文件转码（同步）</div><div class="line">babel.transformFileSync(<span class="string">'filename.js'</span>, options);</div><div class="line">// =&gt; &#123; code, map, ast &#125;</div><div class="line"></div><div class="line">// Babel AST转码</div><div class="line">babel.transformFromAst(ast, code, options);</div><div class="line">// =&gt; &#123; code, map, ast &#125;</div></pre></td></tr></table></figure></p>
<p>下面来看个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var es6Code = <span class="string">'let x = n =&gt; n + 1'</span>;</div><div class="line">var es5Code = require(<span class="string">'babel-core'</span>)</div><div class="line">  .transform(es6Code, &#123;</div><div class="line">    presets: [<span class="string">'latest'</span>]</div><div class="line">  &#125;)</div><div class="line">  .code;</div></pre></td></tr></table></figure></p>
<h3 id="babel-polyfill"><a href="#babel-polyfill" class="headerlink" title="babel-polyfill"></a>babel-polyfill</h3><p>Babel 默认只转换新的 JavaScript 句法（syntax），而不转换新的 API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。</p>
<p>举例来说，ES6在Array对象上新增了Array.from方法。Babel 就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。<br>安装命令如下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save babel-polyfill</div></pre></td></tr></table></figure></p>
<p>然后，在脚本头部，加入如下一行代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import &apos;babel-polyfill&apos;;</div><div class="line">// 或者</div><div class="line">require(&apos;babel-polyfill&apos;);</div></pre></td></tr></table></figure></p>
<h3 id="babel常用的命令"><a href="#babel常用的命令" class="headerlink" title="babel常用的命令"></a>babel常用的命令</h3><p>1、转换es6.js文件并在当前命名行程序窗口中输出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">babel es6.js</div></pre></td></tr></table></figure></p>
<p>2、将es6.js转换后输出到es5.js文件中（使用 -o 或 –out-file ）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">babel es6.js -o es5.js</div><div class="line">babel es6.js --out-file es5.js</div><div class="line">``` </div><div class="line"></div><div class="line">3、实时监控es6.js一有变化就重新编译（使用 -w 或 --watch ）</div><div class="line">```bash</div><div class="line">babel es6.js -w --out-file es5.js</div><div class="line">babel es6.js --watch --out-file es5.js</div></pre></td></tr></table></figure></p>
<p>4、编译整个src文件夹并输出到lib文件夹中（使用 -d 或 –out-dir ）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">babel src <span class="_">-d</span> lib</div><div class="line">babel src --out-dir lib</div></pre></td></tr></table></figure></p>
<p>5、编译整个src文件夹并输出到一个文件中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">babel src --out-file es5.js</div></pre></td></tr></table></figure></p>
<p>6、直接输入babel-node命令，可以在命令行中直接运行ES6代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">babel-node</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> ES6技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> babel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6入门]]></title>
      <url>/2017/03/17/ES6%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>一直以来都没有弄透ES6，接下来跟着阮一峰老师的教程慢慢学习，希望最后可以学懂和学透。</p>
<h2 id="什么是ES6"><a href="#什么是ES6" class="headerlink" title="什么是ES6"></a>什么是ES6</h2><p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在2015年6月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p>
<h2 id="ECMAScript-和-JavaScript-的关系"><a href="#ECMAScript-和-JavaScript-的关系" class="headerlink" title="ECMAScript 和 JavaScript 的关系"></a>ECMAScript 和 JavaScript 的关系</h2><p>ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现。</p>
<h2 id="ES6-与-ECMAScript-2015-的关系"><a href="#ES6-与-ECMAScript-2015-的关系" class="headerlink" title="ES6 与 ECMAScript 2015 的关系"></a>ES6 与 ECMAScript 2015 的关系</h2><p>ES6 的第一个版本，就这样在2015年6月发布了，正式名称就是《ECMAScript 2015标准》（简称 ES2015），ES6 既是一个历史名词，也是一个泛指，含义是5.1版以后的 JavaScript 的下一代标准，涵盖了ES2015、ES2016、ES2017等等。</p>
<h2 id="ES6的支持度以及测试工具"><a href="#ES6的支持度以及测试工具" class="headerlink" title="ES6的支持度以及测试工具"></a>ES6的支持度以及测试工具</h2><ol>
<li><a href="http://kangax.github.io/es5-compat-table/es6/" target="_blank" rel="external">支持度网址</a><a href="http://kangax.github.io/es5-compat-table/es6/" target="_blank" rel="external">http://kangax.github.io/es5-compat-table/es6/</a></li>
<li><a href="http://ruanyf.github.io/es-checker" target="_blank" rel="external">测试浏览器是否支持ES6</a><a href="http://ruanyf.github.io/es-checker" target="_blank" rel="external">http://ruanyf.github.io/es-checker</a></li>
</ol>
<h2 id="将ES6转换为ES5工具"><a href="#将ES6转换为ES5工具" class="headerlink" title="将ES6转换为ES5工具"></a>将ES6转换为ES5工具</h2><h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><p>Babel 是一个广泛使用的 ES6 转码器，可以将 ES6 代码转为 ES5 代码，从而在现有环境执行。这意味着，你可以用 ES6 的方式编写程序，又不用担心现有环境是否支持。下面是一个例子。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 转码前</div><div class="line">input.map(item =&gt; item + 1);</div><div class="line"></div><div class="line">// 转码后</div><div class="line">input.map(<span class="keyword">function</span> (item) &#123;</div><div class="line">  <span class="built_in">return</span> item + 1;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>接着会写一篇专门介绍Babel的文章。</p>
<h3 id="Traceur"><a href="#Traceur" class="headerlink" title="Traceur"></a>Traceur</h3><p>Google公司的Traceur转码器，也可以将 ES6 代码转为 ES5 代码。这个感兴趣的可以百度。 </p>
]]></content>
      
        <categories>
            
            <category> ES6技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node搭建本地服务器]]></title>
      <url>/2017/03/08/Node%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>今天项目发布完了，下午闲着有点时间，研究下老大用node搭建的服务器代码。</p>
<h2 id="了解目录结构"><a href="#了解目录结构" class="headerlink" title="了解目录结构"></a>了解目录结构</h2><p>先来看下目录<br><img src="https://manlili.github.io/img/170308/1.png" alt="图"><br>假设我在server文件夹里面创建一个app.js用来搭本地服务器。</p>
<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>首先需要在app.js引进Node插件express和读文件的插件fs，代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var express = require(<span class="string">'express'</span>);</div><div class="line">var app = express();</div><div class="line">var fs = require(<span class="string">'fs'</span>);</div></pre></td></tr></table></figure></p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>再在在app.js加载静态文件，像图片之类的，代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.use(express.static(<span class="string">'../'</span>, &#123;</div><div class="line">  index: <span class="literal">false</span></div><div class="line">&#125;));</div></pre></td></tr></table></figure></p>
<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>接下来需要在app.js里面监听端口，代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.listen(8888, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">  console.log(<span class="string">'Example app listening on port 8888!'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>到此简单的服务器就基本上打好了，假设我们有个haha文件夹，文件夹下面有个index.html文件，代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</div><div class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1, minimum-scale=1.0,maximum-scale=1.0,user-scalable=no,minimal-ui"</span>&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    我是测试文件</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>进入sever文件夹下面，右键gitBash启动Node服务器,命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node app.js</div></pre></td></tr></table></figure></p>
<p>在浏览器输入你电脑的地址就会发现<br><img src="https://manlili.github.io/img/170308/2.png" alt="图"></p>
<h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>虽然上面的搭建服务器看上去没什么缺陷，但是实际上我们开发的项目中会有很多问题，以我们的单页面(SPA)为例子，可能会遇见<br>(1)输入不完整的地址，服务器找不到链接<br>(2)遇见网站favicon.ico文件，服务器会错误的将favicon.ico识别成网址，这样服务器就会报错</p>
<p>针对第一种情况,我们在app.js里面的代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var urlPath = req.url.match(/\/([^\/]+)/); //比如req.url = 192.168.0.78:8888/jiayou/index，那么urlPath = [ <span class="string">'/jiayou'</span>, <span class="string">'jiayou'</span>, index: 0, input: <span class="string">'/jiayou/index'</span> ]</div><div class="line"></div><div class="line">//找不到文件夹名字返回提示</div><div class="line"><span class="keyword">if</span> (!urlPath) &#123;</div><div class="line">	res.send(req.url + <span class="string">'找不到'</span>);</div><div class="line">	<span class="built_in">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//当找不到index.html，自动读取文件夹下的另一个入口文件d.html</div><div class="line">var indexHtml = fs.readFileSync(<span class="string">'../'</span> + moduleName + <span class="string">'/d.html'</span>, <span class="string">'utf-8'</span>);</div><div class="line">res.send(indexHtml);</div></pre></td></tr></table></figure></p>
<p>针对第二种情况,我们在app.js里面的代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//防止把favicon.ico当做url</div><div class="line"><span class="keyword">if</span> (moduleName === <span class="string">'favicon.ico'</span>) &#123;</div><div class="line">  res.send(<span class="string">''</span>);</div><div class="line">  <span class="built_in">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>那么app.js的完整代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">var express = require(<span class="string">'express'</span>);</div><div class="line">var app = express();</div><div class="line">var fs = require(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line">app.use(express.static(<span class="string">'../'</span>, &#123;</div><div class="line">  index: <span class="literal">false</span></div><div class="line">&#125;));</div><div class="line"></div><div class="line">app.use(<span class="keyword">function</span>(req, res, next) &#123;</div><div class="line"></div><div class="line">	var urlPath = req.url.match(/\/([^\/]+)/); //比如req.url = 192.168.0.78:8888/jiayou/index，那么urlPath = [ <span class="string">'/jiayou'</span>, <span class="string">'jiayou'</span>, index: 0, input: <span class="string">'/jiayou/index'</span> ]</div><div class="line"></div><div class="line">	var moduleName = urlPath[1];</div><div class="line"></div><div class="line">	//防止把favicon.ico当做url</div><div class="line">	<span class="keyword">if</span> (moduleName === <span class="string">'favicon.ico'</span>) &#123;</div><div class="line">	  res.send(<span class="string">''</span>);</div><div class="line">	  <span class="built_in">return</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	//找不到文件夹名字返回提示</div><div class="line">	<span class="keyword">if</span> (!urlPath) &#123;</div><div class="line">	 res.send(req.url + <span class="string">'找不到'</span>);</div><div class="line">	 <span class="built_in">return</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	//当找不到index.html，自动读取文件夹下的d.html</div><div class="line">	var indexHtml = fs.readFileSync(<span class="string">'../'</span> + moduleName + <span class="string">'/d.html'</span>, <span class="string">'utf-8'</span>);</div><div class="line">	res.send(indexHtml);</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(8888, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">  console.log(<span class="string">'Example app listening on port 8888!'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> node技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
            <tag> 本地服务器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小程序开发中遇到的问题]]></title>
      <url>/2017/02/14/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>今天公司的主项目保养小程序上线了，可以搜索小程序全名“4S店汽车维修保养”体验下，本人这次项目中主要负责样式和业务逻辑的实现，趁着有空写写开发中遇到的问题，都是小问题，重在积累.</p>
<h2 id="样式问题"><a href="#样式问题" class="headerlink" title="样式问题"></a>样式问题</h2><h3 id="样式单位"><a href="#样式单位" class="headerlink" title="样式单位"></a>样式单位</h3><p>小程序提供了两种单位：<br>（1）rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。规定屏幕宽为750rpx。如在iPhone6上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx = 0.5px = 1物理像素。<br>（2）rem（root em）: 规定屏幕宽度为20rem；1rem = (750/20)rpx 。<br>根据我们公司的设计稿（以苹果6为标准设计），我选择了rpx，我们的设计稿宽度是750px，直接可以用设计稿上的1px = 1rpx<br>（这里必须提的就是微信0.5px的实现，直接用1rpx，这样就能做出很细的线，但是很多安卓低端机上面还是将0.5px当做1px渲染）</p>
<h3 id="可使用的标签"><a href="#可使用的标签" class="headerlink" title="可使用的标签"></a>可使用的标签</h3><p>下面是项目中总结出来的项目中总结出来部分标签<br>（1）支持的标签： view text span image ul li picker footer header table ::after ::before<br>（2）不支持的标签： div img del </p>
<h3 id="引入icon"><a href="#引入icon" class="headerlink" title="引入icon"></a>引入icon</h3><p>小程序提供了一些基本的icon，但是远远满足不了我们项目需求，为了不引入图片增加额外的服务器请求，我的解决方式是采取base64的方式，先到阿里巴巴矢量图标库[<a href="http://iconfont.cn/]生成自己的字体图标，并下载下来，找到ttf格式文件然后去[https://transfonter.org/]，把字体文件转化成base64格式,按下图进行" target="_blank" rel="external">http://iconfont.cn/]生成自己的字体图标，并下载下来，找到ttf格式文件然后去[https://transfonter.org/]，把字体文件转化成base64格式,按下图进行</a><br><img src="https://manlili.github.io/img/170213/transfonter.png" alt="图">然后将生成的代码拷贝进全局global.css就可以实现引入icon，注意引入icon的方式用伪元素实现。<br>需要注意的是tabbar不支持icon，只支持图片和文字。</p>
<h3 id="引入自定义组件"><a href="#引入自定义组件" class="headerlink" title="引入自定义组件"></a>引入自定义组件</h3><p>（1）import方式<br>import可以在该文件中使用目标文件定义的template，而且有作用域的概念，即只会 import 目标文件中定义的 template，而不会 import 目标文件 import 的 template。<br>（2）include方式<br>include可以将目标文件除了template的整个代码引入，相当于是拷贝到include位置<br>详见[<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/import.html" target="_blank" rel="external">https://mp.weixin.qq.com/debug/wxadoc/dev/framework/view/wxml/import.html</a>]<br>由于项目需要引入自定义的组件，比如提示表单验证，比如网速慢正在加载中，或者其他什么提示类的组件，所以我这里采取了比较简单的include方式</p>
<h3 id="btn"><a href="#btn" class="headerlink" title="btn"></a>btn</h3><p>小程序的button里面文字的垂直居中实现的方式是line-height，也就是说遇见下面情况button中文字就没法像平时那样垂直居中<br><img src="https://manlili.github.io/img/170213/button.jpg" alt="图"><br>因为是上图中button高度不一样，没有办法定义一个固定的line-height，解决的方式如下（不是唯一的）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.father &#123;</div><div class="line">	position:absolute;</div><div class="line">	top:0;</div><div class="line">	right:0;</div><div class="line">	z-index:1;</div><div class="line">	height:100%;</div><div class="line">	width:115rpx;</div><div class="line">	background-color:<span class="comment">#fa5a4d;</span></div><div class="line">	color:<span class="comment">#fff;</span></div><div class="line">	font-size:30rpx;</div><div class="line">&#125;</div><div class="line">.child &#123;</div><div class="line">	position:absolute;</div><div class="line">	top:50%;</div><div class="line">	-webkit-transform:translateY(-50%);</div><div class="line">	transform:translateY(-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>就是将父元素的高度定义为整个框的高度，然后对里面的child进行垂直居中。</p>
<h3 id="float布局bug"><a href="#float布局bug" class="headerlink" title="float布局bug"></a>float布局bug</h3><p>可能是微信小程序的bug，我在写日历页如下图<br><img src="https://manlili.github.io/img/170213/calendar.png" alt="图"><br>上图中每一天用到了float布局排列，其他组件也用到了float布局，大面积使用float布局，在安卓手机上没有问题，但是在苹果手机上却是乱的，找不到错误的原因，就暂时用display：inline-block解决</p>
<h3 id="样式引入图片"><a href="#样式引入图片" class="headerlink" title="样式引入图片"></a>样式引入图片</h3><p>样式里面引入的图片不能为本地图片，需要是https格式，比如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.bi-sex &#123;</div><div class="line">  width: 90rpx;</div><div class="line">  height: 90rpx;</div><div class="line">  background: url(https://img06.lechebangstatic.com/webapp/book/book291481adbf.png) no-repeat center center;</div><div class="line">  -webkit-background-size: 180rpx 180rpx;</div><div class="line">  background-size: 180rpx 180rpx;</div><div class="line">  display: inline-block;</div><div class="line">  margin-left: 10rpx;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>引入本地图片，本地可以调试可以看见，一旦发布到测试环境则会发现图片不见了，所以需要替换图片的地址。</p>
<h3 id="table布局渲染"><a href="#table布局渲染" class="headerlink" title="table布局渲染"></a>table布局渲染</h3><p>微信小程序里面会将table布局渲染成wx-table wx-td等等，这点要分清，要不然调样式很容易找不到对应的类名</p>
<h3 id="固定底部与固定顶部布局"><a href="#固定底部与固定顶部布局" class="headerlink" title="固定底部与固定顶部布局"></a>固定底部与固定顶部布局</h3><p>虽说微信提供了tabbar，但是他是针对页面切换，当一个页面需要切换不同的条件比如<br><img src="https://manlili.github.io/img/170213/order.jpg" alt="图"><br>上图中顶部需要固定的bar不用像H5里面做各种兼容，直接用fixed布局就可以，不用考虑input聚焦时fixed布局的问题，微信已经帮我们做好了，很方便</p>
<h3 id="样式技巧"><a href="#样式技巧" class="headerlink" title="样式技巧"></a>样式技巧</h3><p>小程序是运行在微信提供的 webview 上面，也就是说他们封装了一系列的属性，比如page ,button ,如果想改变微信固有标签的样式，只需要直接写个一样的类名加样式就可以了，小程序还是很人性化的，将开发者的样式权限提高。<br>开发完20多个页面的样式整体的感受如下（只是本人愚见）：<br>（1）有点讨厌微信自定义标签，比如view，image其实完全可以用div，img代替，当然这也是它提高竞争力的表现<br>（2）微信文字与文字，数字，图片的对齐方式做的很好，以前H5项目中需要微调很多小细节，在小程序里面正常布局都差不多已经自动对齐了，不需要多担心。<br>（3）微信的1rpx做的很惊喜，因为大胆的实现了0.5px，先不说兼容性，至少0.5px使H5页面更像原生的app</p>
<h2 id="业务逻辑问题"><a href="#业务逻辑问题" class="headerlink" title="业务逻辑问题"></a>业务逻辑问题</h2><h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><p>具体如下图<br><img src="https://manlili.github.io/img/170213/discount.jpg" alt="图"><br>上图中如果想点击查看使用规则详情而不是选择使用这张券的话，就需要使用阻止事件冒泡。<br>小程序的事件分为冒泡事件和非冒泡事件：<br>（1）冒泡事件：当一个组件上的事件被触发后，该事件会向父节点传递<br>（2）非冒泡事件：当一个组件上的事件被触发后，该事件不会向父节点传递。<br>bindtap事件绑定不会阻止冒泡事件向上冒泡，catchtap事件绑定可以阻止冒泡事件向上冒泡。<br>根据这个页面的的需求，选择使用catchtap。</p>
<h3 id="wx-key"><a href="#wx-key" class="headerlink" title="wx:key"></a>wx:key</h3><p>小程序我们列表渲染的时候会用到wx:for，它有个属性wx:key：<br>即当数据改变触发渲染层重新渲染的时候，会校正带有 key 的组件，框架会确保他们被重新排序，而不是重新创建，以确保使组件保持自身的状态，并且提高列表渲染时的效率。<br>不得不说这个属性很好用，当我们需要按不同条件排列列表的时候，列表可以不用重新渲染，只是调换下位置，避免了用户的等待时间。</p>
<h3 id="setData"><a href="#setData" class="headerlink" title="setData"></a>setData</h3><p>页面渲染完以后再去改数据，直接修改this.data无效，无法改变页面的状态，还会造成数据不一致，如果使用setData就可以解决了,格式如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">this.setData(&#123;</div><div class="line">  text: <span class="string">'changed data'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="事件传值"><a href="#事件传值" class="headerlink" title="事件传值"></a>事件传值</h3><p>html与js传值时，可以用自定义属性(data-*)实现html触发的事件时，会发送给事件处理函数<br>例如视图代码如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;view class=<span class="string">"bd-noorder-tips"</span> data-id=<span class="string">"&#123;&#123;id&#125;&#125;"</span> bindtap=<span class="string">"ruleAction"</span>&gt;</div><div class="line">	使用规则</div><div class="line">&lt;/view&gt;</div></pre></td></tr></table></figure></p>
<p>逻辑层代码如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ruleAction (e) &#123;</div><div class="line">	console.log(e.currentTarget.dataset.id)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h3><p>（1）navigaterTo可以再url后面还拼参数，这样可以把需要的参数带到别的页面，<br>（2）navigaterBack是无法往回带参数的然后有的时候需要去别的页面插值的时候需要往上一级页面传参，这里我是用的setStorage的方式写入缓存中，这样在上一级页面的onShow中可以再进行塞值处理</p>
<h3 id="wx-navigateTo无法打开页面"><a href="#wx-navigateTo无法打开页面" class="headerlink" title="wx.navigateTo无法打开页面"></a>wx.navigateTo无法打开页面</h3><p>（1）wx.navigateTo保留当前页面，跳转到应用内的某个页面<br>（2）wx.navigateTo关闭当前页面，跳转到应用内的某个页面<br>wx.navigateTo无法打开页面，微信小程序规定一个应用同时只能打开5个页面，当已经打开了5个页面之后，wx.navigateTo不能正常打开新页面。请避免多层级的交互方式，或者使用wx.redirectTo</p>
<h3 id="添加类名"><a href="#添加类名" class="headerlink" title="添加类名"></a>添加类名</h3><p>js添加类名的方法我只找到了一种，感觉使用三元表达式添加类名不怎么美观，但是找不到第二种方法了，使用方法如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;view class=<span class="string">"bd-coupon-price &#123;&#123;item.strategyKind === 1 ? 'bd-coupon-yellow-bg' : ''&#125;&#125; &#123;&#123;item.strategyKind === 2 ? 'bd-coupon-blue-bg' : ''&#125;&#125;"</span>&gt;&lt;/view&gt;</div></pre></td></tr></table></figure></p>
<h3 id="输入法中键盘完成按钮触发"><a href="#输入法中键盘完成按钮触发" class="headerlink" title="输入法中键盘完成按钮触发"></a>输入法中键盘完成按钮触发</h3><p>在input输入文字的时候，习惯性用输入法键盘中的“完成”按钮，这时候会自动提交表单，小程序提供了这个方法bindconfirm<br>点击完成按钮时触发，event.detail = {value: value}</p>
<h3 id="使用local跨页面传值"><a href="#使用local跨页面传值" class="headerlink" title="使用local跨页面传值"></a>使用local跨页面传值</h3><p>小程序里面不能使用session传值，所以项目里面使用local传值。</p>
<h2 id="技巧性问题"><a href="#技巧性问题" class="headerlink" title="技巧性问题"></a>技巧性问题</h2><h3 id="注册页面"><a href="#注册页面" class="headerlink" title="注册页面"></a>注册页面</h3><p>每一个新写的页面必须在app.json的pages里面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">"pages"</span>:[</div><div class="line"></div><div class="line">    <span class="string">"pages/index/index"</span>,</div><div class="line"></div><div class="line">    <span class="string">"pages/detail/detail"</span></div><div class="line"></div><div class="line">  ],</div></pre></td></tr></table></figure></p>
<p>注意第一个页面路径是页面渲染起始页面，所以开发时为了方便开发可以在app.json里面将正在开发的页面置顶，</p>
<h3 id="将开发页面设为初始渲染页面"><a href="#将开发页面设为初始渲染页面" class="headerlink" title="将开发页面设为初始渲染页面"></a>将开发页面设为初始渲染页面</h3><p>方法一：<br>app.json的pages里面将开发页面配置为第一个</p>
<p>方法二：<br>小程序开发编辑器右侧-&gt;编译-&gt;设置启动页面 *必填-&gt;写入pages/开发页面名字，但是弊端就是页面的title仍旧是app.json的pages配置第一个页面的title，但是不影响开发。</p>
<h3 id="创建新页面注意"><a href="#创建新页面注意" class="headerlink" title="创建新页面注意"></a>创建新页面注意</h3><p>注意创建*.json的时候需要写点代码，空着的json文件会报错</p>
]]></content>
      
        <categories>
            
            <category> 心得体会 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[setInterval()和setTimeout()]]></title>
      <url>/2017/01/13/setInterval-%E5%92%8CsetTimeout/</url>
      <content type="html"><![CDATA[<h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><p>定义和用法: setTimeout()方法用于在指定的毫秒数后调用函数或计算表达式。　　<br>语法: setTimeout(code,millisec) 　<br>参数： code （必需）：要调用的函数后要执行的 JavaScript 代码串。millisec（必需）：在执行代码前需等待的毫秒数。 　<br>提示： setTimeout() 只执行 code 一次。如果要多次调用，请使用 setInterval() 或者让 code 自身再次调用 setTimeout()。</p>
<h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h2><p>setInterval() 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。<br>setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。由 setInterval() 返回的 ID 值可用作 clearInterval() 方法的参数。<br>语法: setInterval(code,millisec[,”lang”])<br>参数: code 必需。要调用的函数或要执行的代码串。millisec 必须。周期性执行或调用 code 之间的时间间隔，以毫秒计。<br>返回值: 一个可以传递给 Window.clearInterval() 从而取消对 code 的周期性执行的值。</p>
<h2 id="clearInterval-和clearTimeout"><a href="#clearInterval-和clearTimeout" class="headerlink" title="clearInterval()和clearTimeout()"></a>clearInterval()和clearTimeout()</h2><p>3.setInterval()，setTimeout() 会返回一个值，一般认为是ID，将这个ID值传递给clearInterval()，clearTimeout() 可以取消执行，例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var intervalTimer=<span class="built_in">set</span>Interval(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    console.log(1)</div><div class="line">&#125;,3000);</div><div class="line">console.log(intervalTimer); //一般是一个数字，Number</div><div class="line">button.onclick=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    clearInterval(intervalTimer);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>clearInterval()和clearTimeout()其实是通用的，就是说你可以用 clearInterval() 取消 setTimeout() 执行，clearTimeout()同样可以取消 setInterval() 执行。</p>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>关于setInterval()和setTimeout()中回调函数中的this,setInterval()，setTimeout() 方法是浏览器 window 对象提供，所以第一个参数函数中的this指向window对象，这跟变量的作用域有关：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var a=1;</div><div class="line">var obj=&#123;</div><div class="line">    a:2,</div><div class="line">    b:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        <span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            console.log(this.a);//这里返回的是：1；</div><div class="line">        &#125;,2000);   </div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.b();</div></pre></td></tr></table></figure></p>
<p>当然你可以通过使用bind()方法来改变这个情况<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var a=1;</div><div class="line">var obj=&#123;</div><div class="line">    a:2,</div><div class="line">    b:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        <span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            console.log(this.a);//这里返回的是：2；</div><div class="line">        &#125;.bind(this),2000);//注意这行</div><div class="line"> </div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.b();</div></pre></td></tr></table></figure></p>
<h2 id="小细节的题目"><a href="#小细节的题目" class="headerlink" title="小细节的题目"></a>小细节的题目</h2><p>谁先执行？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    func1();</div><div class="line">&#125;, 0)</div><div class="line">func2();</div></pre></td></tr></table></figure></p>
<p>func1和func2谁会先执行？这个答案应该比较简单，func2先执行，func1后面执行。</p>
<p>再来一题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    func1（）</div><div class="line">&#125;, 0)</div><div class="line"></div><div class="line"><span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">    func1（）</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>有什么差别？0秒延迟，此回调将会放到一个能立即执行的时段进行触发。javascript代码大体上是自顶向下的，但中间穿插着有关DOM渲染，事件回应等异步代码，他们将组成一个队列，零秒延迟将会实现插队操作。<br>不写第二个参数，浏览器自动配置时间，在IE，FireFox中，第一次配可能给个很大的数字，100ms上下，往后会缩小到最小时间间隔，Safari，chrome，opera则多为10ms上下。</p>
<h2 id="setTimeout和单线程思考"><a href="#setTimeout和单线程思考" class="headerlink" title="setTimeout和单线程思考"></a>setTimeout和单线程思考</h2><p>首先需要注意javascript是单线程的，特点就是容易出现阻塞。如果一段程序处理时间很长，很容易导致整个页面hold住。什么交互都处理不了怎么办？</p>
<p>简化复杂度？复杂逻辑后端处理？html5的多线程？</p>
<p>上面都是ok的做法，但是setTimeout也是处理这种问题的一把好手。</p>
<p>setTimeout一个很关键的用法就是分片，如果一段程序过大，我们可以拆分成若干细小的块。<br>例如上面的情况，我们将那一段复杂的逻辑拆分处理，分片塞入队列。这样即使在复杂程序没有处理完时，我们操作页面，也是能得到即使响应的。其实就是将交互插入到了复杂程序中执行。</p>
<p>换一种思路，上面就是利用setTimeout实现一种伪多线程的概念。</p>
<p>setTimeout这么厉害，那么我们是需要在在项目中大量使用吗？</p>
<p>我这边的观点是非常不建议，在我们业务中，基本上是禁止在业务逻辑中使用setTimeout的，因为我所看到的很多使用方式都是一些问题不好解决，setTimeout作为一个hack的方式。<br>例如，当一个实例还没有初始化的前，我们就使用这个实例，错误的解决办法是使用实例时加个setTimeout，确保实例先初始化。<br>为什么错误？这里其实就是使用hack的手段<br>第一是埋下了坑，打乱模块的生命周期<br>第二是出现问题时，setTimeout其实是很难调试的。</p>
]]></content>
      
        <categories>
            
            <category> 心得体会 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> setTimeout </tag>
            
            <tag> setInterval </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[setTimeout那些事儿]]></title>
      <url>/2017/01/01/setTimeout%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      <content type="html"><![CDATA[<p>一直以来，大家都在说Javascript是单线程，浏览器无论在什么时候，都且只有一个线程在运行JavaScript程序。</p>
<p>但是，不知道大家有疑问没——就是我们在编程过程中的setTimeout(类似的还有setInterval、Ajax)，不是异步执行的吗？举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;title&gt;<span class="built_in">set</span>Timeout&lt;/title&gt;</div><div class="line">        &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>/&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;script&gt;</div><div class="line">            console.log(<span class="string">"a"</span>);</div><div class="line">            //利用<span class="built_in">set</span>Timeout延迟执行匿名函数</div><div class="line">            <span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">                console.log(<span class="string">"b"</span>);</div><div class="line">            &#125;,100);</div><div class="line">            console.log(<span class="string">"c"</span>);</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>运行代码，打开chrome调试器，得如下结果是：a c b<br>这个结果很容易理解，因为我setTimeout里的内容是在100ms后执行的嘛，当然是先输出a，再输出c，100ms后再输出setTimeout里的b，但是为什么不按顺序执行输出a,b,c，当b没有输出完毕的时候，c的输出应该被卡住，是不是存在多线程使c的输出走了另一个线程提前输出？<br>其实，不是的。setTimeout没有打破JavaScript的单线程机制，它其实还是单线程。要记住JavaScript是单线程，setTimeout没有实现多线程，它背后的真相是这样滴：</p>
<p>JavaScript引擎是单线程运行的,浏览器无论在什么时候都只且只有一个线程在运行JavaScript程序。<br>浏览器的内核是多线程的，它们在内核控制下相互配合以保持同步，一个浏览器至少实现三个常驻线程：JavaScript引擎线程，GUI渲染线程，浏览器事件触发线程。</p>
<ul>
<li>JavaScript引擎是基于事件驱动单线程执行的，JavaScript引擎一直等待着任务队列中任务的到来，然后加以处理，浏览器无论什么时候都只有一个JavaScript线程在运行JavaScript程序。</li>
<li>GUI渲染线程负责渲染浏览器界面，当界面需要重绘（Repaint）或由于某种操作引发回流(Reflow)时,该线程就会执行。但需要注意，GUI渲染线程与JavaScript引擎是互斥的，当JavaScript引擎执行时GUI线程会被挂起，GUI更新会被保存在一个队列中等到JavaScript引擎空闲时立即被执行。</li>
<li>事件触发线程，当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待JavaScript引擎的处理。这些事件可来自JavaScript引擎当前执行的代码块如setTimeout、也可来自浏览器内核的其他线程如鼠标点击、Ajax异步请求等，但由于JavaScript的单线程关系所有这些事件都得排队等待JavaScript引擎处理（当线程中没有执行任何同步代码的前提下才会执行异步代码）。</li>
</ul>
<p>从上面可以知道，setTimeout在浏览器的内核中属于事件触发线程，所以会输出a c b而不是a b c。</p>
<h2 id="setTimeout延时为0的惊喜"><a href="#setTimeout延时为0的惊喜" class="headerlink" title="setTimeout延时为0的惊喜"></a>setTimeout延时为0的惊喜</h2><p>当setTimeout的延迟时间为0时，大家想想它会怎么执行呢？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;title&gt;<span class="built_in">set</span>Timeout&lt;/title&gt;</div><div class="line">        &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>/&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;script&gt;</div><div class="line">            console.log(<span class="string">'a'</span>);</div><div class="line">            <span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">                console.log(<span class="string">'b'</span>);</div><div class="line">            &#125;,0);</div><div class="line">            console.log(<span class="string">'c'</span>);</div><div class="line">            console.log(<span class="string">'d'</span>);</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>上面输出的结果是a c d b.<br>假设你已经知道Javascript单线程的运行原理了。那么，可能会有这样的疑问：setTimeout的时间为0，都没加到处理队列的末尾，怎么会晚执行呢？不应该立即执行吗？</p>
<p>我的理解是，就算setTimeout的时间为0，但是它仍然是setTimeout啊，原理是不变的。所以会将其加入到队列末尾，0秒后执行。</p>
<p>况且，经过查找资料发现，setTimeout有一个最小执行时间，当指定的时间小于该时间时，浏览器会用最小允许的时间作为setTimeout的时间间隔，也就是说即使我们把setTimeout的毫秒数设置为0，被调用的程序也没有马上启动。</p>
<p>这个最小的时间间隔是多少呢？</p>
<blockquote>
<p>这和浏览器及操作系统有关。在John Resig的《Javascript忍者的秘密》一书中提到–Browsers all have a 10ms minimum delay on OSX and a(approximately) 15ms delay on Windows.（在苹果机上的最小时间间隔是10毫秒，在Windows系统上的最小时间间隔大约是15毫秒），另外，MDC中关于setTimeout的介绍中也提到，Firefox中定义的最小时间间隔（DOM_MIN_TIMEOUT_VALUE）是10毫秒，HTML5定义的最小时间间隔是4毫秒。</p>
</blockquote>
<p>(1)可以用setTimeout的延迟时间为0，模拟动画效果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;title&gt;<span class="built_in">set</span>Timeout&lt;/title&gt;</div><div class="line">        &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>/&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div id=<span class="string">"container"</span> style=<span class="string">"width:100px;height:100px;border:1px solid black;"</span>&gt;&lt;/div&gt;</div><div class="line">        &lt;div id=<span class="string">"btn"</span> style=<span class="string">"width:40px;height:40px;line-height:40px;margin-top:20px;background:pink;"</span>&gt;click&lt;/div&gt;</div><div class="line">        &lt;script&gt;</div><div class="line">            window.onload = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">                var con = document.getElementById(<span class="string">'container'</span>);</div><div class="line">                var btn = document.getElementById(<span class="string">'btn'</span>); </div><div class="line">                //Params: i 为起始高度，num为预期高度</div><div class="line">                <span class="keyword">function</span> render(i, num) &#123;</div><div class="line">                    i++; </div><div class="line">                    con.style.height = i + <span class="string">'px'</span>;</div><div class="line">                    //亮点在此</div><div class="line">                    <span class="keyword">if</span>(i &lt; num)&#123;</div><div class="line">                        <span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">                            render(i, num);</div><div class="line">                        &#125;,0);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> &#123;</div><div class="line">                        con = null;</div><div class="line">                        btn = null;</div><div class="line">                    &#125;</div><div class="line">                &#125;;</div><div class="line">                btn.onclick = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">                    render(100, 200);</div><div class="line">                &#125;;</div><div class="line">            &#125;;</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>代码第19行中，利用setTimeout，在每一次render执行完成（给高度递增1）后，由于Javascript是单线程，且setTimeout里的匿名函数会在render执行完成后，再执行render。所以可以实现动画效果。</p>
<p>(2)可以用setTimeout的延迟时间为0，实现捕获事件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;title&gt;<span class="built_in">set</span>Timeout&lt;/title&gt;</div><div class="line">        &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>/&gt;</div><div class="line">        &lt;style&gt;    </div><div class="line">            <span class="comment">#parent &#123;</span></div><div class="line">                width:100px;</div><div class="line">                height:100px;</div><div class="line">                border:1px solid black;</div><div class="line">            &#125;   </div><div class="line">            <span class="comment">#child &#123;</span></div><div class="line">                width:50px;</div><div class="line">                height:50px;</div><div class="line">                background:pink;</div><div class="line">            &#125;</div><div class="line">        &lt;/style&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div id=<span class="string">"parent"</span>&gt;</div><div class="line">            &lt;div id=<span class="string">"child"</span>&gt;&lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script&gt;</div><div class="line">            //点击子元素，实现子元素的事件在父元素触发后触发</div><div class="line">            window.onload = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">                var parent = document.getElementById(<span class="string">'parent'</span>); </div><div class="line">                var child = document.getElementById(<span class="string">'child'</span>);</div><div class="line">                parent.onclick = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">                    console.log(<span class="string">'parent'</span>);</div><div class="line">                &#125;</div><div class="line">                child.onclick = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">                    //利用<span class="built_in">set</span>Timeout，冒泡结束后，最后输出child</div><div class="line">                    <span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">                        console.log(<span class="string">'child'</span>);   </div><div class="line">                    &#125;,0);</div><div class="line">                &#125;</div><div class="line">                parent = null;</div><div class="line">                child = null;   </div><div class="line">            &#125;</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>输出结果: parent child</p>
<h2 id="setTimeout函数中的this"><a href="#setTimeout函数中的this" class="headerlink" title="setTimeout函数中的this"></a>setTimeout函数中的this</h2><p>记住一点setTimeout中所执行函数中的this，永远指向window。<br>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;title&gt;<span class="built_in">set</span>Timeout&lt;/title&gt;</div><div class="line">        &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>/&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;script&gt;</div><div class="line">           var name = <span class="string">'!!'</span>;</div><div class="line">           var obj = &#123;</div><div class="line">               name:<span class="string">'monkey'</span>,</div><div class="line">               <span class="built_in">print</span>:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">                   console.log(this.name);</div><div class="line">               &#125;,</div><div class="line">               <span class="built_in">test</span>:<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">                   //this.print</div><div class="line">                   <span class="built_in">set</span>Timeout(this.print,1000);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">           obj.test();</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>输出结果是：!!<br>那有个疑问，比如我想在setTimeout延迟执行函数中的this指向调用的函数呢，而不是window？！！我们该怎么办呢,有两个方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//方法一：that，利用闭包的知识，让that保证你传进去的this，是你想要的</div><div class="line">var age = 24;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Fn</span></span>()&#123;</div><div class="line">    //that在此</div><div class="line">    var that = this;</div><div class="line">    this.age = 18;</div><div class="line">    <span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        console.log(that);</div><div class="line">        console.log(that.age);</div><div class="line">    &#125;,1000);</div><div class="line">&#125;</div><div class="line">new Fn();</div><div class="line"></div><div class="line">//方法二：<span class="built_in">bind</span></div><div class="line">var age = 24;</div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">Fn</span></span>()&#123;</div><div class="line">    this.age = 18;</div><div class="line">    //<span class="built_in">bind</span>传入this</div><div class="line">    <span class="built_in">set</span>Timeout(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">        console.log(this);</div><div class="line">        console.log(this.age);</div><div class="line">    &#125;.bind(this),1000);</div><div class="line">&#125;</div><div class="line">new Fn();</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 心得体会 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> setTimeout </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式进阶]]></title>
      <url>/2016/12/31/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E9%98%B6/</url>
      <content type="html"><![CDATA[<h2 id="正则的对象属性"><a href="#正则的对象属性" class="headerlink" title="正则的对象属性"></a>正则的对象属性</h2><p>global：是否全文搜索，默认false<br>ignore case：是否大小写敏感，默认是false<br>multiline：多行搜索，默认值是false<br>lastIndex: 当前正则表达式匹配内容的最后一个字符的<strong>下一个位置</strong>(即下一次匹配开始的位置)。<br>source : 正则表达式的文本字符串。</p>
<p>直接在控制台上面举个例子：<br><img src="https://manlili.github.io/img/161231/1.png" alt="图"></p>
<h2 id="正则表达式方法"><a href="#正则表达式方法" class="headerlink" title="正则表达式方法"></a>正则表达式方法</h2><p>学习最常用的 test exec match search  replace  split 6个方法。<br>其中正则用的方式：</p>
<ul>
<li>test</li>
<li>exec</li>
</ul>
<p>字符串的方式：</p>
<ul>
<li>match</li>
<li>search</li>
<li>replace</li>
<li>split</li>
</ul>
<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p>作用检查指定的字符串是否存在，返回true或者false。<br>用法：正则.test(字符串) </p>
<p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var data = <span class="string">"123123"</span>;</div><div class="line">var reCat = /123/gi;</div><div class="line"><span class="keyword">while</span>(reCat.test(data))&#123;console.log(reCat.lastIndex)&#125;   //reCat.test(data)输出的是<span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p>直接在控制台上面举个例子：<br><img src="https://manlili.github.io/img/161231/2.png" alt="图"><br>上图需要注意的是<br>lastIndex: 当前正则表达式匹配内容的最后一个字符的<strong>下一个位置</strong>(即下一次匹配开始的位置)，所以第一次匹配到123位置时lastIndex是3，第二次匹配到123位置时lastIndex是6。</p>
<h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><p>用法：正则.exec(字符串)<br>作用返回查询值，如果没有的话就返回null，有返回的话则返回一个数组。</p>
<h4 id="exec非全局调用"><a href="#exec非全局调用" class="headerlink" title="exec非全局调用"></a>exec非全局调用</h4><p>如果RegExp没有标志 g,那么 exec()方法就只能在字符串中执行一次匹配<br>(1)如果没有找到任何匹配的文本，将返回null<br>(2)否则它将返回一个数组，其中存放了与它找到的匹配文本有关的信息：<br>第一个元素是与正则表达式相匹配的文本<br>第二个元素是与RegExpObject的第一个子表达式相匹配的文本（如果有的话）<br>第三个元素是与RegExp对象的第二个子表达式相匹配的文本（如果有的话），以此类推<br>(3)除了常规的数组元素之外，返回的数组还含有2个对象属性<br>index:声明匹配到的文本的第一个字符的开始位置<br>input:存放被检测的字符串</p>
<p><strong>需要注意：lastIndex在exec非全局调用时不起作用</strong></p>
<p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var reg = /\d(\w)\d/;</div><div class="line">var a = reg.exec(<span class="string">"1a2b3c4d5f"</span>)</div><div class="line">console.log( a );</div><div class="line">console.log( <span class="string">"lastIndex="</span> + reg.lastIndex );</div></pre></td></tr></table></figure></p>
<p>来看下结果：<br><img src="https://manlili.github.io/img/161231/3.png" alt="图"><br>从上图可知，得到一个数组，第一个元素是用exec匹配到的文本，第二个元素是(\w)匹配到的文本，index是声明匹配到的文本的第一个字符的开始位置，input是存放被检测的字符串;<br>但是lastIndex是0，实际上应该是3，所以lastIndex在exec非全局调用时不起作用。<br>再举个稍微复杂点的例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var reg = /\d(\w)(\w)\d/;</div><div class="line">var a = reg.exec(<span class="string">"1ak2bo3cp4de5fg"</span>)</div><div class="line">console.log( a );</div><div class="line">console.log( <span class="string">"lastIndex="</span> + reg.lastIndex );</div></pre></td></tr></table></figure></p>
<p>来看下结果：<br><img src="https://manlili.github.io/img/161231/4.png" alt="图"><br>从上图可知，得到一个数组，第一个元素是用exec匹配到的文本，第二个元素是(\w)匹配到的文本，第三个元素是(\w)匹配到的文本，index是声明匹配到的文本的第一个字符的开始位置，input是存放被检测的字符串。<br>但是lastIndex是0，实际上应该是4，所以lastIndex在exec非全局调用时不起作用。</p>
<h4 id="exec全局调用"><a href="#exec全局调用" class="headerlink" title="exec全局调用"></a>exec全局调用</h4><p>如果RegExp有标志 g,那么 exec()方法就可以多次匹配<br>(1)如果没有找到任何匹配的文本，将返回null<br>(2)否则它将返回一个数组，其中存放了与它找到的匹配文本有关的信息<br>第一个元素是与正则表达式相匹配的文本<br>第二个元素是与RegExpObject的第一个子表达式相匹配的文本（如果有的话）<br>第三个元素是与RegExp对象的第二个子表达式相匹配的文本（如果有的话），以此类推<br>(3)除了常规的数组元素之外，返回的数组还含有2个对象属性<br>index:声明匹配到的文本的第一个字符的开始位置<br>input:存放被检测的字符串</p>
<p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var reg = /\d(\w)\d/g;</div><div class="line"><span class="keyword">while</span>(a = reg.exec(<span class="string">"1a2b3c4d5f"</span>)) &#123;</div><div class="line">	console.log( a );</div><div class="line">	console.log( <span class="string">"lastIndex="</span> + reg.lastIndex );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>来看下结果：<br><img src="https://manlili.github.io/img/161231/5.png" alt="图"><br>从上图可知，得到两个数组：<br>第一个数组第一个元素是用exec匹配到的文本，第二个元素是(\w)匹配到的文本，index是声明匹配到的文本的第一个字符的开始位置，input是存放被检测的字符串;<br>但是lastIndex是3,所以lastIndex在exec全局调用时起作用。<br>第一个数组第一个元素是用exec匹配到的文本，第二个元素是(\w)匹配到的文本，index是声明匹配到的文本的第一个字符的开始位置，input是存放被检测的字符串;<br>但是lastIndex是7,所以lastIndex在exec全局调用时起作用。</p>
<h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><p>作用得到查询数组，regexp是否具有标志g对结果影响很大<br>用法：字符串.match(正则)</p>
<h4 id="match非全局调用"><a href="#match非全局调用" class="headerlink" title="match非全局调用"></a>match非全局调用</h4><p>如果RegExp没有标志 g,那么 match()方法就只能在字符串中执行一次匹配<br>(1)如果没有找到任何匹配的文本，将返回null<br>(2)否则它将返回一个数组，其中存放了与它找到的匹配文本有关的信息：<br>第一个元素是与正则表达式相匹配的文本<br>第二个元素是与RegExpObject的第一个子表达式相匹配的文本（如果有的话）<br>第三个元素是与RegExp对象的第二个子表达式相匹配的文本（如果有的话），以此类推<br>(3)除了常规的数组元素之外，返回的数组还含有2个对象属性<br>index:声明匹配到的文本的第一个字符的开始位置<br>input:存放被检测的字符串<br><strong>需要注意：lastIndex在match非全局调用时不起作用</strong></p>
<p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var reg = /\d(\w)\d/;</div><div class="line">var a = <span class="string">"1a2b3c4d5f"</span>.match(reg);</div><div class="line">console.log( a );</div><div class="line">console.log( <span class="string">"lastIndex="</span> + reg.lastIndex );</div></pre></td></tr></table></figure></p>
<p>来看下结果：<br><img src="https://manlili.github.io/img/161231/6.png" alt="图"><br>从上图可知，得到一个数组，第一个元素是用exec匹配到的文本，第二个元素是(\w)匹配到的文本，index是声明匹配到的文本的第一个字符的开始位置，input是存放被检测的字符串;<br>但是lastIndex是0，实际上应该是3，所以lastIndex在match非全局调用时不起作用。</p>
<h4 id="match全局调用"><a href="#match全局调用" class="headerlink" title="match全局调用"></a>match全局调用</h4><p>如果RegExp有标志 g,那么 match()方法就可以多次匹配<br>(1)如果没有找到任何匹配的文本，将返回null<br>(2)否则它将返回一个数组，其中存放了与它找到的匹配文本有关的信息<br>第一个元素是与正则表达式相匹配的文本<br>第二个元素是与RegExpObject的第一个子表达式相匹配的文本（如果有的话）<br>第三个元素是与RegExp对象的第二个子表达式相匹配的文本（如果有的话），以此类推<br><strong>注意：没有index和input，lastIndex在match全局调用时不也起作用</strong></p>
<p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var reg = /\d(\w)\d/g;</div><div class="line">var a = <span class="string">"1a2b3c4d5f"</span>.match(reg);</div><div class="line">console.log( a );</div><div class="line">console.log( <span class="string">"lastIndex="</span> + reg.lastIndex );</div></pre></td></tr></table></figure></p>
<p>来看下结果：<br><img src="https://manlili.github.io/img/161231/7.png" alt="图"><br>从上图可知，得到两个数组：<br>第一个数组第一个元素是用exec匹配到的文本，第二个元素是(\w)匹配到的文本;<br>但是lastIndex是0,所以lastIndex在match全局调用时不起作用。<br>第一个数组第一个元素是用exec匹配到的文本，第二个元素是(\w)匹配到的文本;<br>但是lastIndex是0,所以lastIndex在match全局调用时不起作用。</p>
<h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>作用返回搜索位置索引值，类似于indexof,search返回第一个匹配结果的index，查找不到返回-1，<strong>search方法是忽略全局匹配的</strong>。<br>用法：字符串.search(正则)</p>
<p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var data = <span class="string">"123123,213,12312,312,3,Cat,cat,dsfsdfs,"</span>;</div><div class="line">var reCat = /cat/gi;</div><div class="line">alert(data.search(reCat));  //23</div></pre></td></tr></table></figure></p>
<h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>作用替换字符。<br>用法：字符串.replace(正则，[待替换的字符串或者function])<br>关于function，有四个参数：</p>
<ul>
<li>匹配到的文本</li>
<li>匹配到的分组</li>
<li>匹配项在字符串中的位置</li>
<li>源字符串</li>
</ul>
<p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var data = <span class="string">"123123,213,12312,312,3,Cat,cat,dsfsdfs,"</span>;</div><div class="line">var reCat = /cat/gi;</div><div class="line">alert(data.replace(reCat,<span class="string">"libinqq"</span>));  //输出：123123,213,12312,312,3,libinqq,libinqq,dsfsdfs,</div></pre></td></tr></table></figure></p>
<p>再举个例子：<br>假设我想将’a1b2c3d4’换成’a2b3c4d5’<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var data = <span class="string">'a1b2c3d4'</span>;</div><div class="line">var reg = /\d/g;</div><div class="line">data.replace(reg, <span class="keyword">function</span> (match,index, origin) &#123;</div><div class="line">	<span class="built_in">return</span> parseInt(match) + 1;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>结果如下：<br><img src="https://manlili.github.io/img/161231/8.png" alt="图"></p>
<h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>利用正则分割数组。<br>用法：字符串.split(正则)</p>
<p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var data = <span class="string">"123123,213,12312,312,3,Cat,cat,dsfsdfs,"</span>;</div><div class="line">var reCat = /\,/;</div><div class="line">var arrdata = data.split(reCat);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (var i = 0; i &lt; arrdata.length; i++)</div><div class="line">&#123;</div><div class="line">    alert(arrdata[i]);  //输出：123123 213 12312 312 3 Cat cat dsfsdfs  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 正则表达式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式入门]]></title>
      <url>/2016/12/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>最近心血来潮想整理一下正则表达式。</p>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><blockquote>
<p>正则表达式(Regular Expression)是一种文本模式，包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为”元字符”）。<br>正则表达式使用单个字符串来描述、匹配一系列匹配某个句法规则的字符串。</p>
</blockquote>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul>
<li>测试字符串内的模式。<br>例如，可以测试输入字符串，以查看字符串内是否出现电话号码模式或信用卡号码模式。这称为数据验证。</li>
<li>替换文本。<br>可以使用正则表达式来识别文档中的特定文本，完全删除该文本或者用其他文本替换它。</li>
<li>基于模式匹配从字符串中提取子字符串。<br>可以查找文档内或输入域内特定的文本。</li>
</ul>
<h2 id="常用的正则匹配工具"><a href="#常用的正则匹配工具" class="headerlink" title="常用的正则匹配工具"></a>常用的正则匹配工具</h2><p>(1) (<a href="https://c.runoob.com/front-end/854)[https://c.runoob.com/front-end/854" target="_blank" rel="external">https://c.runoob.com/front-end/854)[https://c.runoob.com/front-end/854</a>]</p>
<h2 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h2><blockquote>
<p>1 var  regexp = /aabb/g; //g可省<br>2 var  regexp = new Regexp(“xyz”,”g”); //第二个参数可省</p>
</blockquote>
<p>区别在于：<br>1.采用字面量的写法新建的正则表达式对象在代码编译时就会生成，是平常开发中常用的方式；<br>2.采用构造函数生成的正则对象要在代码运行时生成</p>
<p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var re = new RegExp();//RegExp是一个对象,和Aarray一样  </div><div class="line">//但这样没有任何效果,需要将正则表达式的内容作为字符串传递进去</div><div class="line"></div><div class="line">re =new RegExp(<span class="string">"a"</span>);//最简单的正则表达式,将匹配字母a  </div><div class="line">re=new RegExp(<span class="string">"a"</span>,<span class="string">"i"</span>);//第二个参数,表示匹配时不分大小写</div></pre></td></tr></table></figure></p>
<h2 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h2><p>正则对象的方法是指这样使用的：RegExp对象.方法(字符串)<br>字符串对象的方法是这样使用：字符串.方法(RegExp对象)</p>
<h2 id="正则查找范围"><a href="#正则查找范围" class="headerlink" title="正则查找范围"></a>正则查找范围</h2><p>•g （全文查找，可以查看所有的匹配而不是只找到第一个匹配后就停止）<br>•i （忽略大小写）<br>•m （多行查找）<br>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var re = new RegExp(<span class="string">"a"</span>,<span class="string">"gi"</span>);//匹配所有的a或A</div></pre></td></tr></table></figure></p>
<p>正则表达式还有另一种正则表达式字面量的声明方式,上面例子可改写为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var re = /a/gi;</div></pre></td></tr></table></figure></p>
<h2 id="正则表达式字符"><a href="#正则表达式字符" class="headerlink" title="正则表达式字符"></a>正则表达式字符</h2><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><ul>
<li>“^” ：^会匹配行或者字符串的起始位置，有时还会匹配整个文档的起始位置，<strong>但是在[]里面使用^代表取反</strong>。 </li>
<li>“$” ：$会匹配行或字符串的结尾</li>
<li>“\b”:不会消耗任何字符只匹配一个位置，常用于匹配单词边界</li>
<li>“\d”: 匹配数字</li>
<li>“\w”：匹配字母，数字，下划线</li>
<li>“\s”：匹配空格 </li>
<li>“.” ：匹配除了换行符以外的任何字符</li>
<li>“[abc]”: 匹配所包含的任意一个字符,即a或b或c</li>
</ul>
<h3 id="几种反义"><a href="#几种反义" class="headerlink" title="几种反义"></a>几种反义</h3><p>写法很简单改成大写就行了，意思与原来的相反，这里就不举例子了</p>
<ul>
<li>“\W”   匹配任意不是字母，数字，下划线 的字符</li>
<li>“\D”  匹配任意非数字的字符</li>
<li>“\B”  匹配不是单词开头或结束的位置</li>
<li>“[^abc]”  匹配除了abc以外的任意字符</li>
</ul>
<h2 id="正则查询方式"><a href="#正则查询方式" class="headerlink" title="正则查询方式"></a>正则查询方式</h2><h3 id="贪婪-贪心-方式"><a href="#贪婪-贪心-方式" class="headerlink" title="贪婪(贪心)方式"></a>贪婪(贪心)方式</h3><p>如”*”字符 贪婪量词会首先匹配整个字符串。</p>
<ul>
<li>尝试匹配时，它会选定尽可能多的内容，也就是整个输入。</li>
<li>量词首次尝试匹配整个字符串，如果失败则回退一个字符后再尝试，这个过程叫做回溯。</li>
<li>它会每次回退一个字符，直到找到匹配的内容或者没有字符可以回退。</li>
<li>相比下面两种贪婪量词对资源的消耗是最大的。</li>
</ul>
<h3 id="懒惰-勉强-方式"><a href="#懒惰-勉强-方式" class="headerlink" title="懒惰(勉强)方式"></a>懒惰(勉强)方式</h3><ul>
<li>它从目标的起始位置开始尝试寻找匹配，每次检查字符串的一个字符。最后它会尝试匹配整个字符串。</li>
<li>要使一个量词成为懒惰的，必须在普通量词后添加一个”?”</li>
</ul>
<h3 id="占有方式"><a href="#占有方式" class="headerlink" title="占有方式"></a>占有方式</h3><ul>
<li>它会覆盖整个目标然后尝试寻找匹配内容，但它只尝试一次，不会回溯。</li>
<li>要使一个量词成为占有的，必须在普通量词后添加一个”+”</li>
</ul>
<p>举个例子：<br>例子①字符串”a=====b=====b===”检测它的用正则表达式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a.*b</div></pre></td></tr></table></figure></p>
<p><strong>贪婪工作方式</strong>：<br>首先将：a=====b=====b=== 全部吃掉，从右边一个一个地吐出来 </p>
<ol>
<li>a=====b=====b=== 不匹配，吐出一字符 </li>
<li>a=====b=====b== 不匹配，再吐出一字符 </li>
<li>a=====b=====b= 不匹配，再吐出一字符 </li>
<li>a=====b=====b 匹配了，结束。如果再不匹配继续吐，直到没有字符了，匹配失败 </li>
</ol>
<p>最终将匹配满足条件最长的字符串 a=====b=====b，因为它比较贪，因此被称为贪婪量词。 </p>
<p>例子②字符串”a=====b=====b===”检测它的用正则表达式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a.*?b</div></pre></td></tr></table></figure></p>
<p>将匹配满足条件最短的字符串 a=====b ， *? 比较懒，因此称为懒惰或者是勉强量词。 </p>
<p><strong>懒惰工作方式</strong>：<br>从左边一个一个地吃掉字符 </p>
<ol>
<li>a 不能匹配表达式，继续吃 </li>
<li>a= 不能匹配表达式，继续吃 </li>
<li>a== 不能匹配表达式，继续吃 </li>
<li>a=== 不能匹配表达式，继续吃 </li>
<li>a==== 不能匹配表达式，继续吃 </li>
<li>a===== 不能匹配表达式，继续吃 </li>
<li>a=====b 呵呵，终于能匹配表达式了，匹配结束，匹配位置留于字符 b 后面，继续其他的匹配。如果不能匹配则一个一个地吃掉整个字符串直到吃完为止若还没有匹配则匹配失败。 </li>
</ol>
<p>例子③字符串”a=====b=====b===”检测它的用正则表达式<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a.*+b</div></pre></td></tr></table></figure></p>
<p><strong>占有工作方式</strong>：<br>首先将：a=====b=====b=== 全部吃掉，从右边一个一个地吐出来，结果没查到，匹配失败，结束。</p>
<h2 id="正则量词"><a href="#正则量词" class="headerlink" title="正则量词"></a>正则量词</h2><h3 id="贪婪限定词-默认方式"><a href="#贪婪限定词-默认方式" class="headerlink" title="贪婪限定词(默认方式)"></a>贪婪限定词(默认方式)</h3><p>未经修饰的量词就是贪心量词</p>
<p><strong>“*” 重复零次或更多</strong><br>例如”aaaaaaaa” 匹配字符串中所有的a  正则： “a*”   会出到所有的字符”a”</p>
<p><strong>“+” 重复一次或更多次</strong><br>例如”aaaaaaaa” 匹配字符串中所有的a  正则： “a+”  会取到字符中所有的a字符，  “a+”与”a<em>“不同在于”+”至少是一次而”</em>“ 可以是0次，<br>稍后会与”?”字符结合来体现这种区别</p>
<p><strong>“?” 重复零次或一次</strong><br>例如”aaaaaaaa” 匹配字符串中的a 正则 ： “a?” 只会匹配一次，也就是结果只是单个字符a</p>
<p><strong>“{n}” 重复n次</strong><br>例如从”aaaaaaaa” 匹配字符串的a 并重复3次 正则：  “a{3}”  结果就是取到3个a字符  “aaa”;</p>
<p><strong>“{n,m}” 重复n到m次</strong><br>例如正则 “a{3,4}” 将a重复匹配3次或者4次 所以供匹配的字符可以是三个”aaa”也可以是四个”aaaa” 正则都可以匹配到</p>
<p><strong>“{n,}” 重复n次或更多次</strong><br>与{n,m}不同之处就在于匹配的次数将没有上限，但至少要重复n次 如 正则”a{3,}” a至少要重复3次</p>
<h3 id="惰性限定词"><a href="#惰性限定词" class="headerlink" title="惰性限定词"></a>惰性限定词</h3><p>懒惰的基本特性就是匹配尽可能少的字符,一般是在贪婪限定词后面加个？。</p>
<p><strong>“*?”   重复任意次，但尽可能少重复</strong><br>如 “acbacb”  正则  “a.*?b” 只会取到第一个”acb” 原本可以全部取到但加了限定符后，只会匹配尽可能少的字符 ，而”acbacb”最少字符的结果就是”acb” </p>
<p><strong>“+?”  重复1次或更多次，但尽可能少重复</strong><br>与上面一样，只是至少要重复1次</p>
<p><strong>“??”  重复0次或1次，但尽可能少重复</strong><br>如 “aaacb” 正则 “a.??b” 只会取到最后的三个字符”acb”</p>
<p><strong>“{n,m}?”  重复n到m次，但尽可能少重复</strong><br>如 “aaaaaaaa”  正则 “a{0,m}” 因为最少是0次所以取到结果为空</p>
<p><strong>“{n,}?”    重复n次以上，但尽可能少重复</strong><br>如 “aaaaaaa”  正则 “a{1,}” 最少是1次所以取到结果为 “a”</p>
<h3 id="占有限定词"><a href="#占有限定词" class="headerlink" title="占有限定词"></a>占有限定词</h3><p>占有式量词很像贪心式量词，一般是在贪婪限定词后面加个+，它会选择尽可能多的内容，但它不回溯。它不会放弃找到的内容，它很自私。优点是速度快。</p>
<p>“*+”  重复任意次，只查询一次<br>“++”  重复1次或更多次，只查询一次<br>“?+”  重复0次或1次，只查询一次<br>“{n,m}+” 重复n到m次，只查询一次<br>“{n,}+”  重复n次以上，只查询一次</p>
]]></content>
      
        <categories>
            
            <category> 正则表达式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[this指向]]></title>
      <url>/2016/12/13/this%E6%8C%87%E5%90%91/</url>
      <content type="html"><![CDATA[<h2 id="迷之this"><a href="#迷之this" class="headerlink" title="迷之this"></a>迷之this</h2><p>对于刚开始进行 JavaScript 编程的开发者来说，this 具有强大的魔力，它像谜团一样需要工程师们花大量的精力去真正理解它。<br>在后端的一些编程语言中，例如 Java、PHP，this仅仅是类方法中当前对象的一个实例，它不能在方法外部被调用，这样一个简单的法则并不会造成任何疑惑。</p>
<p>在 JavaScript 中，this 是指当前函数中正在执行的上下文环境，因为这门语言拥有四种不同的函数调用类型：</p>
<ul>
<li>函数调用 alert(‘Hello World!’)</li>
<li>方法调用 console.log(‘Hello World!’)</li>
<li>构造函数调用 new RegExp(‘\d’)</li>
<li>间接调用 alert.call(undefined, ‘Hello World’)</li>
</ul>
<p>在以上每一项调用中，它都拥有各自独立的上下文环境，就会造成 this 所指意义有所差别。此外，严格模式也会对执行环境造成影响。<br>理解 this 关键字的关键在于理解各种不同的函数调用以及它是如何影响上下文环境的。</p>
<p>这篇文章旨在解释不同情况下的函数调用会怎样影响 this 以及判断上下文环境时会产生的一些常见陷阱。</p>
<p>在开始讲述之前，先熟悉以下一些术语：<br>调用 是执行当前函数主体的代码，即调用一个函数。例：parseInt 函数的调用为 parseInt(15)<br>上下文环境 是方法调用中 this 所代表的值<br>作用域 是一系列方法内可调用到的变量，对象，方法组成的集合</p>
<h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><p>函数调用 代表了该函数接收以成对的引号包含，用逗号分隔的不同参数组成的表达式。举例：parseInt(‘18’)。这个表达式不能是属性访问如 myObject.myFunction 这样会造成方法调用。[1, 5].join(‘,’) 同样也不是一个函数调用而是方法调用。</p>
<p>函数调用的一个简单例子：<br><img src="https://manlili.github.io/img/161213/1.png" alt="图"><br>hello(‘World’) 是一个函数调用：hello表达式代表了一个函数对象，接受了用成对引号包含的 World 参数。<br>高级一点的例子，立即执行函数 IIFE (immediately-invoked function expression)：<br><img src="https://manlili.github.io/img/161213/2.png" alt="图"></p>
<h3 id="函数调用中的-this"><a href="#函数调用中的-this" class="headerlink" title="函数调用中的 this"></a>函数调用中的 this</h3><p>this is the global object in a function invocation<br>全局对象取决于当前执行环境，在浏览器中，全局对象即 window。<br>在函数调用中，上下文执行环境是全局对象，可以在以下函数中验证上下文：<br><img src="https://manlili.github.io/img/161213/3.png" alt="图"><br>当 sum(15, 16) 被调用时，JavaScript 自动将 this 设置为全局对象，即 window。<br>当 this 在任何函数作用域以外调用时（最外层作用域：全局执行上下文环境），也会涉及到全局对象。<br><img src="https://manlili.github.io/img/161213/4.png" alt="图"><br><img src="https://manlili.github.io/img/161213/5.png" alt="图"></p>
<h3 id="严格模式下，函数调用中的-this"><a href="#严格模式下，函数调用中的-this" class="headerlink" title="严格模式下，函数调用中的 this"></a>严格模式下，函数调用中的 this</h3><p>this is undefined in a function invocation in strict mode<br>严格模式由 ECMAScript 5.1 引进，用来限制 JavaScript 的一些异常处理，提供更好的安全性和更强壮的错误检查机制。使用严格模式，只需要将 ‘use strict’ 置于函数体的顶部。这样就可以将上下文环境中的this 转为 undefined。<br>这样执行上下文环境不再是全局对象，与非严格模式刚好相反。<br>在严格模式下执行函数的一个例子：<br><img src="https://manlili.github.io/img/161213/6.png" alt="图"><br>当 multiply(2, 5) 执行时，这个函数中的 this 是 undefined。<br>严格模式不仅在当前作用域起到作用，它还会影响内部作用域，即内部声明的一切内部函数的作用域。<br><img src="https://manlili.github.io/img/161213/7.png" alt="图"><br>use strict 被插入函数执行主体的顶部，使严格模式可以控制到整个作用域。因为 concat 在执行作用域内部声明，因此它继承了严格模式。此外，concat(‘Hello’, ‘ World!’) 的调用中，this 也会成为undefined。<br>一个简单的 JavaScript 文件可能同时包含严格模式和非严格模式，所以在同一种类型调用中，可能也会有不同的上下文行为差异。<br><img src="https://manlili.github.io/img/161213/8.png" alt="图"></p>
<h3 id="陷阱：this-在内部函数中"><a href="#陷阱：this-在内部函数中" class="headerlink" title="陷阱：this 在内部函数中"></a>陷阱：this 在内部函数中</h3><p>一个常见的陷阱是理所应当的认为函数调用中的，内部函数中 this 等同于它的外部函数中的 this。<br>正确的理解是内部函数的上下文环境取决于调用环境，而不是外部函数的上下文环境。<br>为了获取到所期望的 this，应该利用间接调用修改内部函数的上下文环境，如使用 .call() 或者 .apply或者创建一个绑定函数 .bind()。<br>下面的例子表示计算两个数之和：<br><img src="https://manlili.github.io/img/161213/9.png" alt="图"><br>numbers.sum() 是对象内的一个方法调用，因此 sum 的上下文是 numbers 对象，而 calculate 函数定义在 sum 函数内，所以会误以为在 calculate 内 this 也指向的是 numbers。<br>然而 calculate() 在函数调用（而不是作为方法调用）时，此时的 this 指向的是全局对象 window 或者在严格模式下指向 undefined ，即使外部函数 sum 拥有 numbers对象作上下文环境，它也没有办法影响到内部的 this。<br>numbers.sum() 调用的结果是 NaN 或者在严格模式下直接抛出错误 TypeError: Cannot read property ‘numberA’ of undefined，而绝非期待的结果 5 10 = 15，造成这样的原因是 calculate 并没有正确的被调用。<br>为了解决这个问题，正确的方法是使 calculate 函数被调用时的上下文同 sum 调用时一样，为了得到属性numberA 和 numberB，其中一种办法是使用 .call() 方法。<br><img src="https://manlili.github.io/img/161213/10.png" alt="图"><br>calculate.call(this) 同样执行 calculate 函数，但是格外的添加了 this作为第一个参数，修改了上下文执行环境。此时的 this.numberA this.numberB 等同于 numbers.numberA numbers.numberB，其最终的结果就会如期盼的一样为 result 5 10 = 15。</p>
<h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><p>方法是作为一个对象属性存储的函数，举个例子：<br><img src="https://manlili.github.io/img/161213/11.png" alt="图"><br>helloFunction 是属于 myObject 的一个方法，调用这个方法可以使用属性访问的方式myObject.helloFunction。<br>方法调用表现为对象属性访问的形式，支持传入用成对引号包裹起来的一系列参数。上个例子中，myObject.helloFunction() 其实就是对象 myObject 上对属性 helloFunction 的方法调用。同样，[1, 2].join(‘,’) 和 /\s/.test(‘beautiful world’) 都是方法调用。<br>区分函数调用和方法调用是非常重要的，它们是不同类型的调用方式。主要的差别在于方法调用为访问属性的形式，如：<expression>.functionProperty() 或者 <expression><a href="">‘functionProperty’</a>，而函数调用为<expression>()。<br><img src="https://manlili.github.io/img/161213/12.png" alt="图"></expression></expression></expression></p>
<h3 id="方法调用中的-this"><a href="#方法调用中的-this" class="headerlink" title="方法调用中的 this"></a>方法调用中的 this</h3><p>this is the object that owns the method in a method invocation<br>当在一个对象里调用方法时，this 代表的是对象它自身。让我们创建一个对象，其包含一个可以递增属性的方法。<br><img src="https://manlili.github.io/img/161213/13.png" alt="图"><br>calc.increment() 调用意味着上下文执行环境在 calc 对象里，因此使用 this.sum 递增 num 这个属性是可行的。<br>一个 JavaScript 对象继承方法来自于它自身的属性。当一个被继承方法在对象中调用时，上下文执行环境同样是对象本身。<br><img src="https://manlili.github.io/img/161213/14.png" alt="图"><br>Object.create() 创建了一个新的对象 myDog 并且设置了属性，myDog 对象继承了 myName方法。当myDog.sayName() 被执行时，上下文执行环境指向 myDog。<br>在 ECMAScript 5 的 class 语法中， 方法调用指的是实例本身。<br><img src="https://manlili.github.io/img/161213/15.png" alt="图"></p>
<h3 id="陷阱：方法会分离它自身的对象"><a href="#陷阱：方法会分离它自身的对象" class="headerlink" title="陷阱：方法会分离它自身的对象"></a>陷阱：方法会分离它自身的对象</h3><p>一个对象中的方法可能会被提取抽离成一个变量。当使用这个变量调用方法时，开发者可能会误认为 this指向的还是定义该方法时的对象。<br>如果方法调用不依靠对象，那么就是一个函数调用，即 this 指向全局对象 object 或者在严格模式下为undefined。创建函数绑定可以修复上下文，使该方法被正确对象调用。<br>下面的例子创建了构造器函数 Animal 并且创建了一个实例 myCat，在 setTimeout() 定时器 1s 后打印myCat 对象信息。<br><img src="https://manlili.github.io/img/161213/16.png" alt="图"><br>开发者可能认为在 setTimeout 下调用 myCat.logInfo() 会打印出 myCat 对象的信息。但实际上这个方法被分离了出来作为了参数传入函数内 setTimeout(myCat.logInfo)，然后 1s 后会发生函数调用。当logInfo 被作为函数调用时，this 指向全局对象 window 或者在严格模式下为 undefined，因此对象信息没有正确地被打印。<br>方法绑定可以使用 .bind() 方法。如果被分离的方法绑定了 myCat 对象，那么上下文问题就可以被解决了：<br><img src="https://manlili.github.io/img/161213/17.png" alt="图"><br>此时，myCat.logInfo.bind(myCat) 返回的新函数调用里的 this 指向了 myCat。</p>
<h2 id="构造函数调用"><a href="#构造函数调用" class="headerlink" title="构造函数调用"></a>构造函数调用</h2><p>构造函数调用使用 new 关键词，后面跟随可带参数的对象表达式，例：new RegExp(‘\d’)。<br>以下的例子声明了一个构造函数 Country，并调用。<br><img src="https://manlili.github.io/img/161213/18.png" alt="图"><br>new City(‘Paris’) 是一个构造器调用，这个对象初始化使用了类中特殊的方法 constructor，其中的this 指向的是新创建的对象。<br>构造器调用创建了一个空的新对象，从构造器的原型中继承属性。这个构造器函数的意义在于初始化对象，因此这个类型的函数调用创建实例。<br>当一个属性访问 myObject.myFunction 前拥有 new 关键词，那么 JavaScript 会执行构造器调用而不是方法调用。举个例子：new myObject.myFunction() 意味着首先这个函数会解析为一个属性访问函数extractedFunction = myObject.myFunction，然后用构造器创建一个新对象 new extractedFunction。</p>
<h3 id="在构造函数调用中的-this"><a href="#在构造函数调用中的-this" class="headerlink" title="在构造函数调用中的 this"></a>在构造函数调用中的 this</h3><p>this is the newly created object in a constructor invocation<br>构造器调用的环境是新创建的对象。通过传递构造函数参数来初始化新建的对象，添加属性初始化值以及事件处理器。<br>让我们来验证以下这个例子的上下文环境：<br><img src="https://manlili.github.io/img/161213/19.png" alt="图"><br>new Foo() 建立构造器调用，它的上下文环境为 fooInstance，在 Foo 对象中初始化了 this.property 这个属性并赋予初始值。<br>在使用 class 语法时也是同样的情况（在 ES6 中），初始化只发生在它的 constructor 方法中。<br><img src="https://manlili.github.io/img/161213/20.png" alt="图"><br>当执行 new Bar() 时，JavaScript 创建了一个空对象并且它的上下文环境为 constructor 方法，因此添加属性的办法是使用 this 关键词：this.property = ‘Default Value’。</p>
<h3 id="陷阱：忘记添加-new-关键词"><a href="#陷阱：忘记添加-new-关键词" class="headerlink" title="陷阱：忘记添加 new 关键词"></a>陷阱：忘记添加 new 关键词</h3><p>一些 JavaScript 函数创建实例，不仅仅可以使用构造器的形式调用也可以利用函数调用，下面是一个RegExp 的例子：<br><img src="https://manlili.github.io/img/161213/21.png" alt="图"><br>当执行 new RegExp(‘\w ‘) 和 RegExp(‘\w ‘) 时，JavaScript 创建了两个相等的普通表达式对象。<br>但是使用函数调用创建对象会产生潜在的问题(包括工厂模式)，当失去了 new 关键词，一些构造器会取消初始化对象。<br><img src="https://manlili.github.io/img/161213/22.png" alt="图"><br>Vehicle 是一个在对象上设置了 type 和 wheelsCount 属性的函数。<br>当执行了 Vehicle(‘Car’, 4) 时，会返回对象 car，它拥有正确的属性值：car.type 指向Car，car.wheelsCount 指向 4，开发者会误以为这样创建初始化对象没有什么问题。<br>然而，当前执行的是函数调用，因此 this 指向的是 window 对象，所以它设置的属性其实是挂在 window对象上的，这样是完全错误的，它并没有创建一个新对象。<br>应该正确的执行方式是使用 new 关键词来保证构造器被正确调用：<br><img src="https://manlili.github.io/img/161213/23.png" alt="图"><br>new Vehicle(‘Car’, 4) 可以正确运行：一个新的对象被创建和初始化，因为 new 关键词代表了当前为构造器调用。<br>在构造器函数中添加验证：this instanceof Vehicle，可以保证当前的执行上下文是正确的对象类型。如果 this 不是指向 Vehicle，那么就存在错误。 如果 Vehicle(‘Broken Car’, 3) 表达式没有 new 关键词而被执行，就会抛出错误：Error: Incorrect invocation。</p>
<h2 id="间接调用"><a href="#间接调用" class="headerlink" title="间接调用"></a>间接调用</h2><p>间接调用表现为当一个函数使用了 .call() 或者 .apply() 方法。<br>在 JavaScript 中，函数为一等对象，这意味着函数是一个对象，对象类型即为 Function。<br>在函数的一系列方法中，.call() 和 .apply() 被用来配置当前调用的上下文环境。<br>方法 .call(thisArg[, arg1[, arg2[, …]]]) 接收第一个参数 thisArg 作为执行的上下文环境，以及一系列参数 arg1, arg2, …作为函数的传参被调用。<br>并且，方法 .apply(thisArg, [args]) 接收 thisArg作为上下文环境，剩下的参数可以用类数组对象[args] 传递。<br>间接调用的例子：<br><img src="https://manlili.github.io/img/161213/24.png" alt="图"><br>increment.call() 和 increment.apply() 同时传递了参数 10 调用 increment 函数。<br>两个方法最主要的区别为 .call() 接收一组参数，如 myFunction.call(thisValue, ‘value1’, ‘value2’)，而 .apply() 接收一串参数作为类数组对象传递，如 myFunction.apply(thisValue, [‘value1’, ‘value2’])。</p>
<h3 id="间接调用中的-this"><a href="#间接调用中的-this" class="headerlink" title="间接调用中的 this"></a>间接调用中的 this</h3><p>this is the first argument of .call() or .apply() in an indirect invocation<br>很明显，在间接调用中，this 指向的是 .call() 和 .apply()传递的第一个参数。<br><img src="https://manlili.github.io/img/161213/25.png" alt="图"><br>当函数执行需要特别指定上下文时，间接调用非常有用，它可以解决函数调用中的上下文问题（this 指向window 或者严格模式下指向 undefined），同时也可以用来模拟方法调用对象。<br>另一个实践例子为，在 ES5 中的类继承中，调用父级构造器。<br><img src="https://manlili.github.io/img/161213/26.png" alt="图"><br>Runner.call(this, name) 在 Rabbit 里间接调用了父级方法初始化对象。</p>
<h2 id="绑定函数调用"><a href="#绑定函数调用" class="headerlink" title="绑定函数调用"></a>绑定函数调用</h2><p>绑定函数调用是将函数绑定一个对象，它是一个原始函数使用了 .bind() 方法。<br>原始绑定函数共享相同的代码和作用域，但是在执行时拥有不同的上下文环境。<br>方法 .bind(thisArg[, arg1[, arg2[, …]]]) 接收第一个参数 thisArg 作为绑定函数在执行时的上下文环境，以及一组参数 arg1, arg2, … 作为传参传入函数中。 它返回一个新的函数，绑定了 thisArg。<br>下列代码创建了一个绑定函数并在之后被调用：<br><img src="https://manlili.github.io/img/161213/27.png" alt="图"><br>multiply.bind(2) 返回一个新的函数对象 double，它绑定了数字 2。multiply 和 double 函数拥有相同的代码和作用域。<br>对比方法 .apply() 和 .call()，它俩都立即执行了函数，而 .bind() 函数返回了一个新方法，绑定了预先指定好的 this ，并可以延后调用。</p>
<h3 id="绑定函数中的-this"><a href="#绑定函数中的-this" class="headerlink" title="绑定函数中的 this"></a>绑定函数中的 this</h3><p>this is the first argument of .bind() when invoking a bound function<br>.bind() 方法的作用是创建一个新的函数，执行时的上下文环境为 .bind() 传递的第一个参数，它允许创建预先设置好 this 的函数。<br>让我们来看看在绑定函数中如何设置 this ：<br><img src="https://manlili.github.io/img/161213/28.png" alt="图"><br>numbers.countNumbers.bind(numbers) 返回了绑定 numbers 对象的函数 boundGetNumbers，它在调用时的this 指向的是 numbers 并且返回正确的数组对象。<br>.bind() 创建了一个永恒的上下文链并不可修改。一个绑定函数即使使用 .call() 或者 .apply()传入其他不同的上下文环境，也不会更改它之前连接的上下文环境，重新绑定也不会起任何作用。<br>只有在构造器调用时，绑定函数可以改变上下文，然而这并不是特别推荐的做法。<br>下面这个例子声明了一个绑定函数，然后试图更改其预定上下文的情况：<br><img src="https://manlili.github.io/img/161213/29.png" alt="图"><br>只有 new one() 时可以改变绑定函数的上下文环境，其他类型的调用结果是 this 永远指向 1。</p>
<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数的设计意图是以精简的方式创建函数，并绑定定义时的上下文环境。<br><img src="https://manlili.github.io/img/161213/30.png" alt="图"><br>箭头函数使用了轻便的语法，去除了关键词 function 的书写，甚至当函数只有一个句子时，可以省去return 不写。<br>箭头函数是匿名的，意味着函数的属性 name 是一个空字符串 ‘’，它没有一个词汇式的函数名，意味着不利于使用递归或者解除事件处理。<br>同时它不同于普通函数，它不提供 arguments 对象，在 ES6 中可以用另外的参数代替：<br><img src="https://manlili.github.io/img/161213/31.png" alt="图"></p>
<h3 id="箭头函数中的-this"><a href="#箭头函数中的-this" class="headerlink" title="箭头函数中的 this"></a>箭头函数中的 this</h3><p>this is the enclosing context where the arrow function is defined<br>箭头函数并不创建它自身执行的上下文，使得 this 取决于它在定义时的外部函数。<br>下面的例子表示了上下文的透明属性：<br><img src="https://manlili.github.io/img/161213/32.png" alt="图"><br>setTimeout 调用了箭头函数，它的上下文和 log()方法一样都是 myPoint 对象。<br>可以看出来，箭头函数“继承”了它在定义时的函数上下文。<br>如果尝试在上述例子中使用正常函数，那么它会创建自身的作用域（window 或者严格模式下undefined）。因此，要使同样的代码可以正确运行就必须人工绑定上下文，即 setTimeout(function() {…}.bind(this))。使用箭头函数就可以省略这么详细的函数绑定，用更加干净简短的代码绑定函数。<br>如果箭头函数在最外层作用域定义，那么上下文环境将永远是全局对象，一般来说在浏览器中即为window。<br><img src="https://manlili.github.io/img/161213/33.png" alt="图"><br>箭头函数一次绑定上下文后便不可更改，即使使用了上下文更改的方法：<br><img src="https://manlili.github.io/img/161213/34.png" alt="图"><br>函数表达式可以间接调用 .call(numbers) 让 this 指向 numbers，然而 get 箭头函数的 this 也是指向numbers 的， 因为它绑定了定义时的外部函数。<br>无论怎么调用 get 函数，它的初始化上下文始终是 numbers，间接地调用其他上下文（使用 .call() 或者.apply()），或者重新绑定上下文（使用 .bind()）都没有任何作用。<br>箭头函数不可以用作构造器，如果使用 new get() 作构造器调用，JavaScript 会抛出错误：TypeError: get is not a constructor。</p>
<h3 id="陷阱：使用箭头函数定义方法"><a href="#陷阱：使用箭头函数定义方法" class="headerlink" title="陷阱：使用箭头函数定义方法"></a>陷阱：使用箭头函数定义方法</h3><p>开发者可能会想使用箭头函数在对象中声明方法，箭头函数的声明((param) =&gt; {…})要比函数表达式的声明（function(param) {…}）简短的多。<br>下面的例子在类 Period 中 使用箭头函数定义了方法 format()：<br><img src="https://manlili.github.io/img/161213/35.png" alt="图"><br>当 format 是一个箭头函数， 且被定义在全局环境下，它的 this 指向的是 window 对象。<br>即使 format 执行的时候挂载在对象上 walkPeriod.format()，window 对象依旧存在在调用的上下文环境中。这是因为箭头函数拥有静态的上下文环境，不会因为不同的调用而改变。<br>this 指向的是 window，因此 this.hour 和 this.minutes 都是 undefined。方法返回的结果为：’undefined hours and undefined minutes’。<br>正确的函数表达式可以解决这个问题，因为普通函数可以改变调用时的上下文环境：<br><img src="https://manlili.github.io/img/161213/36.png" alt="图"><br>walkPeriod.format() 是一个在对象中的方法调用，它的上下文环境为 walkPeriod，this.hours 指向2，this.minutes 指向 30，因此可以返回正确的结果：’2 hours and 30 minutes’。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>因为函数调用会极大地影响到 this，所以从现在开始不要直接问自己：<br>this 是从哪里来的？<br>而是要开始思考：<br>当前函数是怎么被调用的？<br>遇到箭头函数时，考虑：<br>当箭头函数被定义时，this 是指向什么？<br>以上思路可以帮助开发者减少判断 this 带来的烦恼。</p>
]]></content>
      
        <categories>
            
            <category> js技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> this </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java变量类型]]></title>
      <url>/2016/12/03/java%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h2 id="Java变量的命名规则"><a href="#Java变量的命名规则" class="headerlink" title="Java变量的命名规则"></a>Java变量的命名规则</h2><p><img src="https://manlili.github.io/img/161203/1.png" alt="图"><br>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class HelloWorld&#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        String name = <span class="string">"我爱lili"</span>;</div><div class="line">        String address = <span class="string">"www.baidu.com"</span>;</div><div class="line">        System.out.println(name);</div><div class="line">        System.out.println(address);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Java语言支持的变量类型"><a href="#Java语言支持的变量类型" class="headerlink" title="Java语言支持的变量类型"></a>Java语言支持的变量类型</h2><p>①局部变量<br>②成员变量<br>③类变量(静态变量)</p>
<h3 id="Java局部变量"><a href="#Java局部变量" class="headerlink" title="Java局部变量"></a>Java局部变量</h3><p>①局部变量声明在方法、构造方法或者语句块中；<br>②局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；<br>③访问修饰符不能用于局部变量；<br>④局部变量只在声明它的方法、构造方法或者语句块中可见；<br>⑤局部变量是在栈上分配的。<br>⑥局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</p>
<p>举个例子:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">package <span class="built_in">test</span>;</div><div class="line">public class PartialVar &#123;</div><div class="line">    public void <span class="function"><span class="title">lili</span></span> () &#123; //age定义后需要初始化,定义在lili()方法中，它的作用域就限制在这个方法中</div><div class="line">        int age = 25;</div><div class="line">        System.out.println(<span class="string">"年龄是"</span>+age);</div><div class="line">    &#125;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        PartialVar myAge = new PartialVar();</div><div class="line">        myAge.lili();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后的输出结果是：<br><img src="https://manlili.github.io/img/161203/2.png" alt="图"></p>
<h3 id="Java实例变量"><a href="#Java实例变量" class="headerlink" title="Java实例变量"></a>Java实例变量</h3><p>①实例变量声明在一个类中，但在方法、构造方法和语句块之外；<br>②当一个对象被实例化之后，每个实例变量的值就跟着确定；<br>③实例变量在对象创建的时候创建，在对象被销毁的时候销毁；<br>④实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；<br>⑤实例变量可以声明在使用前或者使用后；<br>⑥访问修饰符可以修饰实例变量；<br>⑦实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；<br>⑧实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；<br>⑨实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。</p>
<p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">package <span class="built_in">test</span>;</div><div class="line">public class instantiateVar &#123;</div><div class="line">    public int age; //对该类以及其他类都可见</div><div class="line">    private String name;  //仅对该类可见</div><div class="line"></div><div class="line">    public  instantiateVar (int myAge) &#123;  //该类的构造方法</div><div class="line">        age = myAge;</div><div class="line">    &#125;</div><div class="line">    public void  lili (String myName ) &#123;</div><div class="line">        name = myName;</div><div class="line">    &#125;</div><div class="line">    public void  <span class="function"><span class="title">ptintmeg</span></span> () &#123;</div><div class="line">        System.out.println(<span class="string">"姓名是"</span>+name);</div><div class="line">        System.out.println(<span class="string">"年龄是"</span>+age);</div><div class="line">    &#125;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        instantiateVar <span class="built_in">test</span> = new instantiateVar(25);</div><div class="line">        test.lili(<span class="string">"利利"</span>);</div><div class="line">        test.ptintmeg();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后的输出结果是：<br><img src="https://manlili.github.io/img/161203/3.png" alt="图"></p>
<h3 id="Java类变量-静态变量"><a href="#Java类变量-静态变量" class="headerlink" title="Java类变量(静态变量)"></a>Java类变量(静态变量)</h3><p>①类变量也称为静态变量，在类中以static关键字声明，但必须在方法构造方法和语句块之外。<br>②无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。<br>③静态变量除了被声明为常量外很少使用。常量是指声明为public/private，final和static类型的变量。常量初始化后不可改变。<br>④静态变量储存在静态存储区。经常被声明为常量，很少单独使用static声明变量。<br>⑤静态变量在程序开始时创建，在程序结束时销毁。<br>⑥与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为public类型。<br>⑦默认值和实例变量相似。数值型变量默认值是0，布尔型默认值是false，引用类型默认值是null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。<br>⑧静态变量可以通过：ClassName.VariableName的方式访问。<br>⑨类变量被声明为public static final类型时，类变量名称必须使用大写字母。如果静态变量不是public和final类型，其命名方式与实例变量以及局部变量的命名方式一致。</p>
<p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package <span class="built_in">test</span>;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by manlili on 2016/9/22.</div><div class="line"> */</div><div class="line">public class staticVar &#123;</div><div class="line">    public static String name;   //静态变量带static</div><div class="line">    public static final int age = 25;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        staticVar <span class="built_in">test</span> = new staticVar();</div><div class="line">        name = <span class="string">"利利"</span>;</div><div class="line">        System.out.println(<span class="string">"名字是"</span>+name);</div><div class="line">        System.out.println(<span class="string">"年龄是"</span>+age);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>最后的输出结果是：<br><img src="https://manlili.github.io/img/161203/4.png" alt="图"></p>
]]></content>
      
        <categories>
            
            <category> java技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 变量 </tag>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java数据类型]]></title>
      <url>/2016/11/22/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h2 id="java变量"><a href="#java变量" class="headerlink" title="java变量"></a>java变量</h2><p>变量就是申请内存来存储值。也就是说，当创建变量的时候，需要在内存中申请空间。内存管理系统根据变量的类型为变量分配存储空间，分配的空间只能用来储存该类型数据。</p>
<h2 id="java数据类型分类"><a href="#java数据类型分类" class="headerlink" title="java数据类型分类"></a>java数据类型分类</h2><p>Java 语言是一种强类型语言。通俗点说就是，在 Java 中存储的数据都是有类型的，而且必须在编译时就确定其类型。 Java 中有两类数据类型：<br><img src="https://manlili.github.io/img/161122/1.png" alt="图"><br>在 Java 的领域里，基本数据类型变量存的是数据本身，而引用类型变量存的是保存数据的空间地址,和指针差不多。说白了，基本数据类型变量里存储的是直接放在抽屉里的东西，而引用数据类型变量里存储的是这个抽屉的钥匙，钥匙和抽屉一一对应。</p>
<h2 id="内置数据类型"><a href="#内置数据类型" class="headerlink" title="内置数据类型"></a>内置数据类型</h2><p><img src="https://manlili.github.io/img/161122/2.png" alt="图"><br>举个例子:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class HelloWorld&#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        String  name=<span class="string">"哈哈哈"</span>;</div><div class="line">        char  sex=<span class="string">'男'</span>;</div><div class="line">        int  num=18;</div><div class="line">        double   price=120.5;</div><div class="line">        boolean  isOK=<span class="literal">true</span>;</div><div class="line">        System.out.println(name);</div><div class="line">        System.out.println(sex);</div><div class="line">        System.out.println(num);</div><div class="line">        System.out.println(price);</div><div class="line">        System.out.println(isOK);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><p>①在Java中，引用类型的变量非常类似于C/C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如Employee、Pubby等。变量一旦声明后，类型就不能被改变了。<br>②对象、数组都是引用数据类型。<br>③所有引用类型的默认值都是null。<br>④一个引用变量可以用来引用与任何与之兼容的类型。<br>⑤例子：Site site = new Site(“Runoob”)。</p>
<h2 id="java常量"><a href="#java常量" class="headerlink" title="java常量"></a>java常量</h2><p>常量在程序运行时，不会被修改的量。<br>在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">final double PI = 3.1415927;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> java技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 数据 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java类、对象和构造方法]]></title>
      <url>/2016/11/07/java%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="java中对象和类"><a href="#java中对象和类" class="headerlink" title="java中对象和类"></a>java中对象和类</h2><p>java中万物皆对象，比如说动物，里面有猫，狗，鱼等等，他们都能跑，都能呼吸，总之他们有一些动物的共同特征，java中可以把他们归为一类。这就是java中的类；而猫，狗等，就是这个类中的一个具体的对象。<br>猫，狗又有一些动作行为，就是方法.<br>当你想调用那些动作行为的时候，不能直接在类中调用，因为不同的动物的行为不一样，你就必须new一个对象，来调用.</p>
<h2 id="java中类"><a href="#java中类" class="headerlink" title="java中类"></a>java中类</h2><p>先来看个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Dog&#123;</div><div class="line">    String name;</div><div class="line">    int age;</div><div class="line">   </div><div class="line">    void <span class="function"><span class="title">bark</span></span>()&#123;  // 汪汪叫</div><div class="line">        System.out.println(<span class="string">"汪汪，不要过来"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    void <span class="function"><span class="title">hungry</span></span>()&#123;  // 饥饿</div><div class="line">        System.out.println(<span class="string">"主人，我饿了"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对上面例子说明:<br>public 是类的修饰符，表明该类是公共类，可以被其他类访问。<br>class 是定义类的关键字。<br>Dog 是类名称。<br>name、age 是类的成员变量，也叫属性；bark()、hungry() 是类中的函数，也叫方法。</p>
<h2 id="java变量类型"><a href="#java变量类型" class="headerlink" title="java变量类型"></a>java变量类型</h2><p>一个类可以包含以下类型变量：<br>①局部变量：在方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。<br>②成员变量：成员变量是定义在类中、方法体之外的变量。这种变量在创建对象的时候实例化（分配内存）。成员变量可以被类中的方法和特定类的语句访问。<br>③类变量：类变量也声明在类中，方法体之外，但必须声明为static类型。static 也是修饰符的一种。</p>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>注意事项:</p>
<p>在类实例化的过程中自动执行的方法叫做构造方法，它不需要你手动调用。构造方法可以在类实例化的过程中做一些初始化的工作。<br>构造方法的名称必须与类的名称相同，并且没有返回值。<br>每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认的构造方法。</p>
<p>举个例子:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.lechebang.www;</div><div class="line">public class Dog&#123; </div><div class="line">    String name;</div><div class="line">    int age;</div><div class="line"></div><div class="line">    public <span class="function"><span class="title">Dog</span></span> () &#123;   //构造方法</div><div class="line">        System.out.println(<span class="string">"我是构造方法"</span>);</div><div class="line">    &#125;</div><div class="line">    void <span class="function"><span class="title">bark</span></span>()&#123;  // 汪汪叫</div><div class="line">        System.out.println(<span class="string">"汪汪，不要过来"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void <span class="function"><span class="title">hungry</span></span>()&#123;  // 饥饿</div><div class="line">        System.out.println(<span class="string">"主人，我饿了"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Java中对象"><a href="#Java中对象" class="headerlink" title="Java中对象"></a>Java中对象</h2><p>对象是根据类创建的。在Java中，使用关键字new来创建一个新的对象。创建对象需要以下三步：<br>①声明：声明一个对象，包括对象名称和对象类型。<br>②实例化：使用关键字new来创建一个对象。<br>③初始化：使用new创建对象时，会调用构造方法初始化对象。</p>
<p>举个例子:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class Dog&#123;</div><div class="line">    String name;</div><div class="line">    int age;</div><div class="line"></div><div class="line">    public <span class="function"><span class="title">Dog</span></span> () &#123;   //构造方法</div><div class="line">        System.out.println(<span class="string">"我是构造方法"</span>);</div><div class="line">    &#125;</div><div class="line">    void <span class="function"><span class="title">bark</span></span>()&#123;  // 汪汪叫</div><div class="line">        System.out.println(<span class="string">"汪汪，不要过来"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void <span class="function"><span class="title">hungry</span></span>()&#123;  // 饥饿</div><div class="line">        System.out.println(<span class="string">"主人，我饿了"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Dog myDog = new Dog();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行结果是:<br><img src="https://manlili.github.io/img/161107/1.png" alt="图"></p>
<h2 id="访问实例变量和方法"><a href="#访问实例变量和方法" class="headerlink" title="访问实例变量和方法"></a>访问实例变量和方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 实例化</div><div class="line">Dog myDog = new Dog(<span class="string">"花花"</span>, 3);</div><div class="line">// 通过点号访问成员变量</div><div class="line">myDog.name;</div><div class="line">// 通过点号访问成员方法</div><div class="line">myDog.bark();</div></pre></td></tr></table></figure>
<p>举个例子:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class Dog2&#123;</div><div class="line">    String name;</div><div class="line">    int age;</div><div class="line"></div><div class="line">    // 构造方法，没有返回值</div><div class="line">    Dog2(String name1, int age1)&#123;</div><div class="line">        name = name1;</div><div class="line">        age = age1;</div><div class="line">        System.out.println(<span class="string">"感谢主人领养了我"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 普通方法，必须有返回值</div><div class="line">    void <span class="function"><span class="title">bark</span></span>()&#123;</div><div class="line">        System.out.println(<span class="string">"汪汪，不要过来"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    void <span class="function"><span class="title">hungry</span></span>()&#123;</div><div class="line">        System.out.println(<span class="string">"主人，我饿了"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String arg[])&#123;</div><div class="line">        // 创建对象时传递的参数要与构造方法参数列表对应</div><div class="line">        Dog2 myDog = new Dog2(<span class="string">"花花"</span>, 3);</div><div class="line">        String name = myDog.name;</div><div class="line">        int age = myDog.age;</div><div class="line">        System.out.println(<span class="string">"狗狗的名字是"</span>+name+<span class="string">";狗狗年龄是"</span>+age);</div><div class="line"></div><div class="line">        myDog.bark();</div><div class="line">        myDog.hungry();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果:<br><img src="https://manlili.github.io/img/161107/2.png" alt="图"></p>
]]></content>
      
        <categories>
            
            <category> java技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 对象 </tag>
            
            <tag> java </tag>
            
            <tag> 类 </tag>
            
            <tag> 构造方法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java入门]]></title>
      <url>/2016/10/27/java%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>这几天项目做完了,一直闲着,写写代码娱乐一下,顺便学学后台.</p>
<h2 id="java几个定义"><a href="#java几个定义" class="headerlink" title="java几个定义"></a>java几个定义</h2><p>①对象：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。<br>②类：类是一个模板，它描述一类对象的行为和状态。<br>③方法：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。<br>④实例变量：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</p>
<h2 id="java语法注意事项"><a href="#java语法注意事项" class="headerlink" title="java语法注意事项"></a>java语法注意事项</h2><p>①大小写敏感：Java是大小写敏感的，这就意味着标识符Hello与hello是不同的。<br>②类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。<br>③方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。<br>④源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记Java是大小写敏感的），文件名的后缀为.java。（如果文件名和类名不相同则会导致编译错误）。<br>⑤主方法入口：所有的Java 程序由public static void main(String []args)方法开始执行。</p>
<h2 id="Java标识符"><a href="#Java标识符" class="headerlink" title="Java标识符"></a>Java标识符</h2><p>Java所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。<br>关于Java标识符，有以下几点需要注意：<br>①所有的标识符都应该以字母（A-Z或者a-z）,美元符（$）、或者下划线（_）开始<br>②首字符之后可以是任何字符的组合<br>③关键字不能用作标识符<br>④标识符是大小写敏感的<br>⑤合法标识符举例：age、$salary、_value、__1_value<br>⑥非法标识符举例：123abc、-salary</p>
<h2 id="Java修饰符"><a href="#Java修饰符" class="headerlink" title="Java修饰符"></a>Java修饰符</h2><p>主要有两类修饰符：<br>可访问修饰符 : default, public , protected, private<br>不可访问修饰符 : final, abstract, strictfp</p>
<h2 id="java入门小例子"><a href="#java入门小例子" class="headerlink" title="java入门小例子"></a>java入门小例子</h2><p>每种语言学习基本上都要写个Hello World,下面来看一下,我用的是IDEA编辑器,目前用下来还算不错。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class HelloWorld &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        System.out.print(<span class="string">"hello world"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> java技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vueJS实现SPA]]></title>
      <url>/2016/10/25/vueJS%E5%AE%9E%E7%8E%B0SPA/</url>
      <content type="html"><![CDATA[<p>gitHub地址:<a href="https://github.com/manlili/vue_spa" target="_blank" rel="external">https://github.com/manlili/vue_spa</a></p>
<p>只是简单的写个demo，实际开发中可能需要分框架部分和业务部分，这里只是简单实现下结果。</p>
<p>先来看下目录：<br><img src="https://manlili.github.io/img/161025/1.png" alt="图"><br>我们用vue搭建单页面，需要借助vue-router.js插件，这个是vue的路由。</p>
<p>再来看下入口文件index.html的代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">		&lt;title&gt;&lt;/title&gt;</div><div class="line">		&lt;script src=<span class="string">"js/vue-router.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">		&lt;script src=<span class="string">"js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">		&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;div id=<span class="string">"app"</span>&gt;</div><div class="line">			&lt;a class=<span class="string">"list-group-item"</span> v-link=<span class="string">"&#123; path: '/home'&#125;"</span>&gt;Home&lt;/a&gt;</div><div class="line">			&lt;a class=<span class="string">"list-group-item"</span> v-link=<span class="string">"&#123; path: '/about'&#125;"</span>&gt;About&lt;/a&gt;</div><div class="line">			&lt;router-view&gt;&lt;/router-view&gt;</div><div class="line">		&lt;/div&gt;</div><div class="line">		&lt;template id=<span class="string">"home"</span>&gt;</div><div class="line">			&lt;h1&gt;</div><div class="line">				我是home</div><div class="line">			&lt;/h1&gt;</div><div class="line">		&lt;/template&gt;</div><div class="line">		&lt;template id=<span class="string">"about"</span>&gt;</div><div class="line">			&lt;h1&gt;</div><div class="line">				我是about</div><div class="line">			&lt;/h1&gt;</div><div class="line">		&lt;/template&gt;</div><div class="line">		&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">			//声明使用路由</div><div class="line">			Vue.use(VueRouter); </div><div class="line">			</div><div class="line">			var home = Vue.extend(&#123;</div><div class="line">				template: <span class="string">"#home"</span></div><div class="line">			&#125;)</div><div class="line">			var about = Vue.extend(&#123;</div><div class="line">				template: <span class="string">"#about"</span></div><div class="line">			&#125;)</div><div class="line">			</div><div class="line">			//创建路由</div><div class="line">			var router = new VueRouter();</div><div class="line">			</div><div class="line">			//映射路径</div><div class="line">			router.map(&#123;</div><div class="line">				<span class="string">'/home'</span>:&#123;component:home&#125;,</div><div class="line">				<span class="string">'/about'</span>:&#123;component:about&#125;</div><div class="line">			&#125;)</div><div class="line">			</div><div class="line">			//启动路由</div><div class="line">			var app = Vue.extend(&#123;&#125;);</div><div class="line">			router.start(app,<span class="string">"#app"</span>);</div><div class="line">		&lt;/script&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>上面的代码很简单，如果看过我写的vue的全套手册分析就能看懂了。<br>下面来看下效果：<br><img src="https://manlili.github.io/img/161025/2.png" alt="图"><br>当我们点击Home出现<br><img src="https://manlili.github.io/img/161025/3.png" alt="图"><br>当我们点击About出现<br><img src="https://manlili.github.io/img/161025/4.png" alt="图"><br>由此可知，页面的整体结构没有变化，只是更换了里面的内容。</p>
]]></content>
      
        <categories>
            
            <category> SPA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vueJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[grunt创建插件]]></title>
      <url>/2016/10/16/grunt%E5%88%9B%E5%BB%BA%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>虽然自己的水平不怎么好，但是还是想了解一下grunt插件的书写，网上找了些资料尝试着写点东西。<br>github地址：<a href="https://github.com/manlili/grunt_learn" target="_blank" rel="external">https://github.com/manlili/grunt_learn里面lesson03</a></p>
<h2 id="插件创建"><a href="#插件创建" class="headerlink" title="插件创建"></a>插件创建</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>安装 grunt-init<br>使用命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g grunt-init</div></pre></td></tr></table></figure></p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>安装grunt插件模版<br>使用命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git://github.com/gruntjs/grunt-init-gruntplugin.git ~/.grunt-init/gruntplugin</div></pre></td></tr></table></figure></p>
<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>在一个空的目录中执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt-init gruntplugin</div></pre></td></tr></table></figure></p>
<p>创建名字为”grunt-plug-in-test”的插件<br>步骤如下图：<br><img src="https://manlili.github.io/img/161016/1.png" alt="图"></p>
<h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>准备开发环境<br>使用命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure></p>
<p>接着为你的插件书写代码，这里我技术有限，就不贴代码了，大概就是这个意思。</p>
<h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><p>插件都已经写好了，需要将你创建的 Grunt 插件提发布npm.<br>命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm publish</div></pre></td></tr></table></figure></p>
<h3 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h3><p>安装你创建的插件。<br>使用命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install grunt-plug-in-test</div></pre></td></tr></table></figure></p>
<p>出现下面结果：<br><img src="https://manlili.github.io/img/161016/2.png" alt="图"></p>
]]></content>
      
        <categories>
            
            <category> grunt技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> grunt </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[requireJS实现SPA]]></title>
      <url>/2016/10/10/require%E5%AE%9E%E7%8E%B0SPA/</url>
      <content type="html"><![CDATA[<p>gitHub地址:<a href="https://github.com/manlili/require_spa" target="_blank" rel="external">https://github.com/manlili/require_spa</a><br>requireJS手册<a href="http://www.requirejs.cn/" target="_blank" rel="external">http://www.requirejs.cn/</a></p>
<h2 id="requireJS作用"><a href="#requireJS作用" class="headerlink" title="requireJS作用"></a>requireJS作用</h2><p>RequireJS的目标是鼓励代码的模块化，以一个相对于baseUrl的地址来加载所有的代码。</p>
<h2 id="开始搭建SPA"><a href="#开始搭建SPA" class="headerlink" title="开始搭建SPA"></a>开始搭建SPA</h2><p>首先来看下目录：<br><img src="https://manlili.github.io/img/161010/1.png" alt="图"><br>从上图中可以看出我引进了两个辅助的插件jquery和text，这两个插件就不介绍了，看手册很简单。</p>
<p>先来看下index.html入口文件的代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset=<span class="string">"utf-8"</span> /&gt;</div><div class="line">		&lt;title&gt;&lt;/title&gt;</div><div class="line">		&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">		&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span> class=<span class="string">"css-attribute"</span>&gt;</div><div class="line">			</div><div class="line">		&lt;/style&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">		&lt;script data-main=<span class="string">"js/main"</span> src=<span class="string">"js/require.js"</span>&gt;&lt;/script&gt;</div><div class="line">		&lt;div class=<span class="string">"page"</span>&gt;</div><div class="line">			</div><div class="line">		&lt;/div&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>require.js 在加载的时候会检察data-main 属性,我这里引进的是main.js，然后在main.js设置模板加载选项，来看下main.js内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">require.config(&#123;</div><div class="line">	paths:&#123;</div><div class="line">		<span class="string">"jquery"</span>:<span class="string">"lib/jquery-1.11.0"</span>,</div><div class="line">		<span class="string">"text"</span>:<span class="string">"lib/text"</span>,</div><div class="line">		<span class="string">"text1"</span>:<span class="string">"../template/test1.html"</span>,  //这里千万注意路径</div><div class="line">		<span class="string">"text2"</span>:<span class="string">"../template/test2.html"</span>,</div><div class="line">		<span class="string">"css1"</span>:<span class="string">"../style/test1.css"</span>,</div><div class="line">		<span class="string">"css2"</span>:<span class="string">"../style/test2.css"</span></div><div class="line">	&#125;</div><div class="line">&#125;)</div><div class="line">require([<span class="string">'jquery'</span>,<span class="string">'text!text1'</span>,<span class="string">'text!text2'</span>,<span class="string">'text!css1'</span>,<span class="string">'text!css2'</span>],<span class="keyword">function</span>($,template1,template2,css1,css2)&#123;</div><div class="line">//	进入页面先设置为页面<span class="built_in">test</span>1.html内容</div><div class="line">	$(<span class="string">".css-attribute"</span>).html(css1);</div><div class="line">	$(<span class="string">".page"</span>).html(template1);</div><div class="line">	</div><div class="line">//	点击skip按钮设置为页面<span class="built_in">test</span>2.html内容</div><div class="line">	$(<span class="string">".skip"</span>).click(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">		$(<span class="string">".css-attribute"</span>).html(css2);</div><div class="line">		$(<span class="string">".page"</span>).html(template2);</div><div class="line">	&#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>其中require.config中paths是用来配置SPA的访问路径，包括插件，html以及css等，然后再用模块的方式写各个页面的业务逻辑。</p>
<p>关于test1.css内容是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.test1&#123;</div><div class="line">	position: absolute;</div><div class="line">	top:0;</div><div class="line">	bottom:0;</div><div class="line">	left: 0;</div><div class="line">	right: 0;</div><div class="line">	background-color: red;</div><div class="line">&#125;</div><div class="line">.skip&#123;</div><div class="line">	position: absolute;</div><div class="line">	top:50%;</div><div class="line">	left: 50%;</div><div class="line">	-webkit-transform: translate(-50%,-50%);</div><div class="line">	transform: translate(-50%,-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>test2.css内容是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.test2&#123;</div><div class="line">	position: absolute;</div><div class="line">	top:0;</div><div class="line">	bottom:0;</div><div class="line">	left: 0;</div><div class="line">	right: 0;</div><div class="line">	background-color: pink;</div><div class="line">&#125;</div><div class="line">.skip2&#123;</div><div class="line">	position: absolute;</div><div class="line">	top:50%;</div><div class="line">	left: 50%;</div><div class="line">	-webkit-transform: translate(-50%,-50%);</div><div class="line">	transform: translate(-50%,-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>test1.html内容是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"test1"</span>&gt;</div><div class="line">	&lt;button class=<span class="string">"skip"</span>&gt;点击我跳到SPA第二页&lt;/button&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>test2.html内容是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"test2"</span>&gt;</div><div class="line">	&lt;button class=<span class="string">"skip2"</span>&gt;我是第二页,点击我回第一页&lt;/button&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>来看下结果：<br><img src="https://manlili.github.io/img/161010/2.png" alt="图"><br>点击按钮后的页面：<br><img src="https://manlili.github.io/img/161010/3.png" alt="图"><br>从上图框起来的代码可以知道页面仍然是index.html，但是里面的代码动态变化了。</p>
]]></content>
      
        <categories>
            
            <category> SPA </category>
            
        </categories>
        
        
        <tags>
            
            <tag> requireJS </tag>
            
            <tag> textJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[grunt实例]]></title>
      <url>/2016/10/06/grunt%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<p>学了那么多天grunt，现在来写个稍微复杂点的例子。<br>github地址：<a href="https://github.com/manlili/grunt_learn" target="_blank" rel="external">https://github.com/manlili/grunt_learn里面lesson02</a></p>
<h2 id="利用grunt进行css、js的检查、合并和压缩"><a href="#利用grunt进行css、js的检查、合并和压缩" class="headerlink" title="利用grunt进行css、js的检查、合并和压缩"></a>利用grunt进行css、js的检查、合并和压缩</h2><h3 id="第一步：准备源文件"><a href="#第一步：准备源文件" class="headerlink" title="第一步：准备源文件"></a>第一步：准备源文件</h3><p>目录如下：<br><img src="https://manlili.github.io/img/161006/1.png" alt="图"><br>其中<br>①src文件里面放源文件，里面有css文件夹包含css1.css和css2.css，js文件夹包含一个未压缩的test.js文件<br>②dist放处理过的文件<br>③.jshint和.csslint分别是检测js和css语法的配置文件<br>其中：<br>css1.css内容是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.a &#123;</div><div class="line">	color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>css2.css内容是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.b &#123;</div><div class="line">	color: black;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>test.js内容是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var i = 1,sum = 0;</div><div class="line"><span class="keyword">for</span> (i= 1; i&lt; 10; i++) &#123;</div><div class="line">	sum = sum + i;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>.jshint内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"boss"</span>:<span class="literal">false</span>,</div><div class="line">    <span class="string">"curly"</span>:<span class="literal">true</span>,</div><div class="line">    <span class="string">"eqeqeq"</span>:<span class="literal">true</span>,</div><div class="line">    <span class="string">"expr"</span>:<span class="literal">true</span>,</div><div class="line">    <span class="string">"immed"</span>:<span class="literal">true</span>,</div><div class="line">    <span class="string">"newcap"</span>:<span class="literal">true</span>,</div><div class="line">    <span class="string">"noempty"</span>:<span class="literal">true</span>,</div><div class="line">    <span class="string">"noarg"</span>:<span class="literal">true</span>,</div><div class="line">    <span class="string">"undef"</span>:<span class="literal">true</span>,</div><div class="line">    <span class="string">"regexp"</span>:<span class="literal">true</span>,</div><div class="line"></div><div class="line">    <span class="string">"browser"</span>:<span class="literal">true</span>,</div><div class="line">    <span class="string">"devel"</span>:<span class="literal">true</span>,</div><div class="line">    <span class="string">"node"</span>:<span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>.csslint内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"adjoining-classes"</span>:<span class="literal">false</span>,</div><div class="line">    <span class="string">"box-sizing"</span>:<span class="literal">false</span>,</div><div class="line">    <span class="string">"box-model"</span> : <span class="literal">false</span>,</div><div class="line">    <span class="string">"compatible-vendor-prefixes"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="string">"floats"</span>:<span class="literal">false</span>,</div><div class="line">    <span class="string">"font-sizes"</span>:<span class="literal">false</span>,</div><div class="line">    <span class="string">"gradients"</span>:<span class="literal">false</span>,</div><div class="line">    <span class="string">"important"</span>:<span class="literal">false</span>,</div><div class="line">    <span class="string">"known-properties"</span>:<span class="literal">false</span>,</div><div class="line">    <span class="string">"outline-none"</span>:<span class="literal">false</span>,</div><div class="line">    <span class="string">"qualified-headings"</span>:<span class="literal">false</span>,</div><div class="line">    <span class="string">"regex-selectors"</span>:<span class="literal">false</span>,</div><div class="line">    <span class="string">"shorthand"</span>:<span class="literal">false</span>,</div><div class="line">    <span class="string">"text-indent"</span>:<span class="literal">false</span>,</div><div class="line">    <span class="string">"unique-headings"</span>:<span class="literal">false</span>,</div><div class="line">    <span class="string">"universal-selector"</span>:<span class="literal">false</span>,</div><div class="line">    <span class="string">"unqualified-attributes"</span>:<span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="第二步-准备package-json"><a href="#第二步-准备package-json" class="headerlink" title="第二步:准备package.json"></a>第二步:准备package.json</h3><p>生成package.json命令,右键gitBash输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure></p>
<p>然后按提示输入参数即可生成package.json文件,如下图：<br><img src="https://manlili.github.io/img/161006/2.png" alt="图"><br>最后生成的package.json内容是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"grunt_learn"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"2.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"利用grunt进行css、js的检查、合并和压缩"</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"repository"</span>: &#123;</div><div class="line">    <span class="string">"type"</span>: <span class="string">"git"</span>,</div><div class="line">    <span class="string">"url"</span>: <span class="string">"git+ssh://git@github.com/manlili/grunt_learn.git"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"keywords"</span>: [</div><div class="line">    <span class="string">"grunt_learn"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"author"</span>: <span class="string">"manlili"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="string">"bugs"</span>: &#123;</div><div class="line">    <span class="string">"url"</span>: <span class="string">"https://github.com/manlili/grunt_learn/issues"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"homepage"</span>: <span class="string">"https://github.com/manlili/grunt_learn#readme"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="第三步-安装grunt和插件"><a href="#第三步-安装grunt和插件" class="headerlink" title="第三步:安装grunt和插件"></a>第三步:安装grunt和插件</h3><p>然后去安装grunt,进入package.json所在文件夹，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install grunt  --save-dev</div></pre></td></tr></table></figure></p>
<p>然后发现出现node_modules文件夹，代表安装成功，再来看下文件目录：<br><img src="https://manlili.github.io/img/161006/3.png" alt="图"><br>同时发现package.json里面devDependencies有了内容<br>再来看看package.json里面的内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"grunt_learn"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"2.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"利用grunt进行css、js的检查、合并和压缩"</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"repository"</span>: &#123;</div><div class="line">    <span class="string">"type"</span>: <span class="string">"git"</span>,</div><div class="line">    <span class="string">"url"</span>: <span class="string">"git+ssh://git@github.com/manlili/grunt_learn.git"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"keywords"</span>: [</div><div class="line">    <span class="string">"grunt_learn"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"author"</span>: <span class="string">"manlili"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="string">"bugs"</span>: &#123;</div><div class="line">    <span class="string">"url"</span>: <span class="string">"https://github.com/manlili/grunt_learn/issues"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"homepage"</span>: <span class="string">"https://github.com/manlili/grunt_learn#readme"</span>,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"grunt"</span>: <span class="string">"^1.0.1"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是我们加了–save-dev的作用，依赖grunt模块。</p>
<p>利用grunt进行css、js的检查、合并和压缩，所以我们还要引入几个插件：<br>引入的语法是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">npm install grunt-contrib-concat --save-dev</div><div class="line">npm install grunt-contrib-csslint --save-dev</div><div class="line">npm install grunt-contrib-cssmin --save-dev</div><div class="line">npm install grunt-contrib-jshint --save-dev</div><div class="line">npm install grunt-contrib-uglify --save-dev</div><div class="line">npm install grunt-contrib-watch --save-dev</div></pre></td></tr></table></figure></p>
<p>引入方法如下：<br><img src="https://manlili.github.io/img/161006/4.png" alt="图"><br>接着就会发现package.json里面devDependencies内容发生了更新<br>再来看看package.json里面的内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"grunt_learn"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"2.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"利用grunt进行css、js的检查、合并和压缩"</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"repository"</span>: &#123;</div><div class="line">    <span class="string">"type"</span>: <span class="string">"git"</span>,</div><div class="line">    <span class="string">"url"</span>: <span class="string">"git+ssh://git@github.com/manlili/grunt_learn.git"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"keywords"</span>: [</div><div class="line">    <span class="string">"grunt_learn"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"author"</span>: <span class="string">"manlili"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="string">"bugs"</span>: &#123;</div><div class="line">    <span class="string">"url"</span>: <span class="string">"https://github.com/manlili/grunt_learn/issues"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"homepage"</span>: <span class="string">"https://github.com/manlili/grunt_learn#readme"</span>,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"grunt"</span>: <span class="string">"^1.0.1"</span>,</div><div class="line">    <span class="string">"grunt-contrib-concat"</span>: <span class="string">"^1.0.1"</span>,</div><div class="line">    <span class="string">"grunt-contrib-csslint"</span>: <span class="string">"^2.0.0"</span>,</div><div class="line">    <span class="string">"grunt-contrib-cssmin"</span>: <span class="string">"^2.0.0"</span>,</div><div class="line">    <span class="string">"grunt-contrib-jshint"</span>: <span class="string">"^1.1.0"</span>,</div><div class="line">    <span class="string">"grunt-contrib-uglify"</span>: <span class="string">"^2.2.0"</span>,</div><div class="line">    <span class="string">"grunt-contrib-watch"</span>: <span class="string">"^1.0.0"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="第四步-创建Gruntfile-js文件"><a href="#第四步-创建Gruntfile-js文件" class="headerlink" title="第四步:创建Gruntfile.js文件"></a>第四步:创建Gruntfile.js文件</h3><p>直接在package.json同目录下，创建空白的js文件命名Gruntfile.js，写入内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">module.exports = <span class="keyword">function</span>(grunt)&#123;</div><div class="line">    //初始化grunt 配置</div><div class="line">    grunt.initConfig(&#123;</div><div class="line"> </div><div class="line">        //获取package.json的信息</div><div class="line">        pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</div><div class="line">        //concat插件的配置信息</div><div class="line">        concat: &#123;</div><div class="line">            options:&#123;</div><div class="line">                stripBanners:<span class="literal">true</span>, //合并时允许输出头部信息</div><div class="line">                banner:<span class="string">'/*!&lt;%= pkg.name %&gt; - &lt;%= pkg.version %&gt;-'</span>+<span class="string">'&lt;%=grunt.template.today("yyyy-mm-dd") %&gt; */'</span></div><div class="line">            &#125;,</div><div class="line">            cssConcat:&#123;</div><div class="line">                src:[<span class="string">'src/css/css1.css'</span>,<span class="string">'src/css/css2.css'</span>],</div><div class="line">                dest:<span class="string">'src/css/concat/&lt;%= pkg.name %&gt; - &lt;%= pkg.version %&gt;.css'</span> //dest 是目的地输出</div><div class="line">            &#125;,</div><div class="line">            jsConcat:&#123;</div><div class="line">                src:<span class="string">'src/js/*.js'</span>,</div><div class="line">                dest:<span class="string">'src/js/concat/&lt;%=pkg.name %&gt; - &lt;%= pkg.version %&gt;.js'</span></div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        //压缩css</div><div class="line">        cssmin:&#123;</div><div class="line">            options:&#123;</div><div class="line">                stripBanners:<span class="literal">true</span>, //合并时允许输出头部信息</div><div class="line">                banner:<span class="string">'/*!&lt;%= pkg.name %&gt; - &lt;%= pkg.version %&gt;-'</span>+<span class="string">'&lt;%=grunt.template.today("yyyy-mm-dd") %&gt; */\n'</span></div><div class="line">            &#125;,</div><div class="line">            build:&#123;</div><div class="line">                src:<span class="string">'src/css/concat/&lt;%=pkg.name %&gt; - &lt;%=pkg.version %&gt;.css'</span>,//压缩是要压缩合并了的</div><div class="line">                dest:<span class="string">'dist/css/&lt;%= pkg.name %&gt; - &lt;%= pkg.version %&gt;.min.css'</span> //dest 是目的地输出</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        //压缩js</div><div class="line">        uglify:&#123;</div><div class="line">            options:&#123;</div><div class="line">                stripBanners:<span class="literal">true</span>, //合并时允许输出头部信息</div><div class="line">                banner:<span class="string">'/*!&lt;%= pkg.name %&gt; - &lt;%= pkg.version %&gt;-'</span>+<span class="string">'&lt;%=grunt.template.today("yyyy-mm-dd") %&gt; */\n'</span></div><div class="line">            &#125;,</div><div class="line">            build:&#123;</div><div class="line">                src:<span class="string">'src/js/concat/&lt;%=pkg.name %&gt; - &lt;%=pkg.version %&gt;.js'</span>,//压缩是要压缩合并了的</div><div class="line">                dest:<span class="string">'dist/js/&lt;%= pkg.name %&gt; - &lt;%= pkg.version %&gt;.min.js'</span> //dest 是目的地输出</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line"> </div><div class="line">        jshint:&#123;</div><div class="line">            options:&#123;</div><div class="line">                jshintrc:<span class="string">'.jshint'</span></div><div class="line">            &#125;,</div><div class="line">            build:[<span class="string">'Gruntfile.js'</span>,<span class="string">'src/js/*js'</span>]</div><div class="line">        &#125;,</div><div class="line"> </div><div class="line">        csslint:&#123;</div><div class="line">            options:&#123;</div><div class="line">                csslintrc:<span class="string">'.csslint'</span></div><div class="line">            &#125;,</div><div class="line">            build:[<span class="string">'src/css/*.css'</span>]</div><div class="line"> </div><div class="line">        &#125;,</div><div class="line">        //watch自动化</div><div class="line">        watch:&#123;</div><div class="line">            build:&#123;</div><div class="line">                files:[<span class="string">'src/js/*.js'</span>,<span class="string">'src/css/*.css'</span>],</div><div class="line">                tasks:[<span class="string">'jshint'</span>,<span class="string">'csslint'</span>,<span class="string">'concat'</span>,<span class="string">'cssmin'</span>,<span class="string">'uglify'</span>],</div><div class="line">                options:&#123;spawn:<span class="literal">false</span>&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">    &#125;);</div><div class="line">    //告诉grunt我们将使用插件</div><div class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>);</div><div class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-cssmin'</span>);</div><div class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</div><div class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-jshint'</span>);</div><div class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-csslint'</span>);</div><div class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>);</div><div class="line">    //告诉grunt当我们在终端输入grunt时需要做些什么</div><div class="line">    grunt.registerInitTask(<span class="string">'default'</span>,[<span class="string">'jshint'</span>,<span class="string">'csslint'</span>,<span class="string">'concat'</span>,<span class="string">'cssmin'</span>,<span class="string">'uglify'</span>,<span class="string">'watch'</span>]);//先进行语法检查，如果没有问题，再合并，再压缩</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="第五步-运行grunt出最终结果"><a href="#第五步-运行grunt出最终结果" class="headerlink" title="第五步: 运行grunt出最终结果"></a>第五步: 运行grunt出最终结果</h3><p>右键打开gitBash输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt</div></pre></td></tr></table></figure></p>
<p>就会发现：<br><img src="https://manlili.github.io/img/161006/5.png" alt="图"><br>然后发现多了很多处理的文件<br><img src="https://manlili.github.io/img/161006/6.png" alt="图"></p>
]]></content>
      
        <categories>
            
            <category> grunt技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> grunt </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[grunt创建任务]]></title>
      <url>/2016/09/24/grunt%E5%88%9B%E5%BB%BA%E4%BB%BB%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>上一节提到了grunt的配置，配置好了以后紧接着是创建任务，然后运行任务。</p>
<h2 id="创建单任务"><a href="#创建单任务" class="headerlink" title="创建单任务"></a>创建单任务</h2><p>语法格式:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt.registerTask(taskName, [description, ] taskList)</div></pre></td></tr></table></figure></p>
<p>如果你没有指定一个任务，并且你已经定义一个名为 “default” 的任务，那么该任务将会默认被执行.<br>比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'jshint'</span>, <span class="string">'qunit'</span>, <span class="string">'concat'</span>, <span class="string">'uglify'</span>]);</div></pre></td></tr></table></figure></p>
<p>上面定义了一个 ‘default’ 任务，如果右键打开gitBash运行Grunt时没有指定任何任务，它将自动执行’jshint’、’qunit’、’concat’ 和 ‘uglify’ 任务。</p>
<p>再举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt.registerTask(<span class="string">'dist'</span>, [<span class="string">'concat:dist'</span>, <span class="string">'uglify:dist'</span>]);</div></pre></td></tr></table></figure></p>
<p>上面定义了一个 “dist”任务，如果右键打开gitBash运行Grunt dist时， 将执行 “concat” 和 “uglify” 两个任务，并且它们都带有一个 “dist” 参数。</p>
<h2 id="创建多任务"><a href="#创建多任务" class="headerlink" title="创建多任务"></a>创建多任务</h2><p>语法格式:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt.registerMultiTask(taskName, [description, ] taskFunction)</div></pre></td></tr></table></figure></p>
<p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">grunt.initConfig(&#123;</div><div class="line">  <span class="built_in">log</span>: &#123;</div><div class="line">    foo: [1, 2, 3],</div><div class="line">    bar: <span class="string">'hello world'</span>,</div><div class="line">    baz: <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>上面例子：<br>①通过grunt log:foo运行Grunt，它会输出foo: 1,2,3<br>②通过grunt log:bar来运行Grunt，它会输出bar: hello world<br>③通过grunt log运行Grunt, 它会输出foo: 1,2,3，然后是bar: hello world，最后是baz: false</p>
<h2 id="自定义任务"><a href="#自定义任务" class="headerlink" title="自定义任务"></a>自定义任务</h2><p>语法格式:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">grunt.registerTask(<span class="string">'default'</span>, <span class="string">'自定义任务名称'</span>, <span class="keyword">function</span>(参数) &#123;</div><div class="line">  你的自定义任务执行的内容</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>右键打开gitBash运行Grunt时，就会把你的自定义任务运行。</p>
<p>在一个任务内部，你可以执行其他的任务。假设存在bar和baz两个任务，举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">grunt.registerTask(<span class="string">'foo'</span>, <span class="string">'自定义任务名称'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">  grunt.task.run(<span class="string">'bar'</span>, <span class="string">'baz'</span>);</div><div class="line">  // Or:</div><div class="line">  grunt.task.run([<span class="string">'bar'</span>, <span class="string">'baz'</span>]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>注意：当运行自定义任务失败时，所有后续任务都将终止，除非指定 –force 。</p>
<h2 id="异步执行任务"><a href="#异步执行任务" class="headerlink" title="异步执行任务"></a>异步执行任务</h2><p>自定义任务时可以异步执行任务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">grunt.registerTask(<span class="string">'asyncme'</span>, <span class="string">'自定义任务名称'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">  var <span class="keyword">done</span> = this.async(); //Grunt使用同步的编码风格，可以在task体中通过调用 this.async() 将其转换为异步的</div><div class="line">  <span class="keyword">do</span>SomethingAsync(<span class="keyword">done</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> grunt技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> grunt </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[grunt配置]]></title>
      <url>/2016/09/14/grunt%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>本篇主要讲在Gruntfile文件配置。</p>
<h2 id="任务配置"><a href="#任务配置" class="headerlink" title="任务配置"></a>任务配置</h2><p>假设我需要创建concat和uglify两个JSON格式的任务以及my_property字符串格式任务和my_src_files数组格式的任务<br>直接举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">grunt.initConfig(&#123;</div><div class="line">  concat: &#123;</div><div class="line">    // 这里是concat任务的配置信息。</div><div class="line">  &#125;,</div><div class="line">  uglify: &#123;</div><div class="line">    // 这里是uglify任务的配置信息</div><div class="line">  &#125;,</div><div class="line">  // 任意数据。</div><div class="line">  my_property: <span class="string">'whatever'</span>,</div><div class="line">  my_src_files: [<span class="string">'foo/*.js'</span>, <span class="string">'bar/*.js'</span>],</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>从上图可知：由于这本身就是JavaScript，因此你不仅限于使用JSON；你可以在这里使用任何有效的JavaScript。必要的情况下，你甚至可以以编程的方式生成配置。</p>
<p>注意：当运行一个任务时，Grunt会自动查找配置对象中的同名属性。</p>
<h2 id="目标配置"><a href="#目标配置" class="headerlink" title="目标配置"></a>目标配置</h2><p>目标就是每个任务需要执行的目标，举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">grunt.initConfig(&#123;</div><div class="line">  concat: &#123;</div><div class="line">    foo: &#123;</div><div class="line">      // foo目标</div><div class="line">    &#125;,</div><div class="line">    bar: &#123;</div><div class="line">      // bar目标</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">  uglify: &#123;</div><div class="line">    bar: &#123;</div><div class="line">      // bar目标</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在上面的案例中，concat任务有名为foo和bar两个目标，而uglify任务仅仅只有一个名为bar目标。<br>我们可以执行特定的目标，比如直接在文件夹里右键直接调出gitBash,执行如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt concat:foo或者grunt concat:bar</div></pre></td></tr></table></figure></p>
<p>如果我们使用了grunt concat命令，则将遍历所有目标（foo目标，bar目标）并依次处理。</p>
<h2 id="options属性"><a href="#options属性" class="headerlink" title="options属性"></a>options属性</h2><p>options对象是可选的，如果不需要，可以忽略。</p>
<p>需要注意：<br>(1)在一个任务配置中，options属性可以用来指定覆盖内置属性的默认值。<br>(2)此外，每一个目标中还可以设置专有options属性。<br>(3)目标里面的options将会覆盖任务级的options。<br>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">grunt.initConfig(&#123;</div><div class="line">  concat: &#123;</div><div class="line">    options: &#123;</div><div class="line">      // 这里是任务级的Options，覆盖默认值 </div><div class="line">    &#125;,</div><div class="line">    foo: &#123;</div><div class="line">      options: &#123;</div><div class="line">        // foo目标的options，优先级别大于任务级option</div><div class="line">      &#125;,</div><div class="line">    &#125;,</div><div class="line">    bar: &#123;</div><div class="line">      // 不设置options</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="src-dest配置"><a href="#src-dest配置" class="headerlink" title="src-dest配置"></a>src-dest配置</h2><p>每个任务都有src-dest(源文件-目标文件)，当然dest可以没有。<br>比如jshint插件是验证JS语法的，错误的信息都直接显示在console上面，无须专门创建个dest文件。</p>
<p>(1)src-dest数组格式<br>这种方式比较直观，建议使用此方法。</p>
<p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">grunt.initConfig(&#123;</div><div class="line">  jshint: &#123;</div><div class="line">    foo: &#123;</div><div class="line">      src: [<span class="string">'src/aa.js'</span>, <span class="string">'src/aaa.js'</span>]</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">  concat: &#123;</div><div class="line">    bar: &#123;</div><div class="line">      src: [<span class="string">'src/bb.js'</span>, <span class="string">'src/bbb.js'</span>],</div><div class="line">      dest: <span class="string">'dest/b.js'</span>,</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>(2)src-dest文件对象格式<br>好处：<br>(1)每个目标对应多个src-dest形式的文件映射<br>(2)key就是目标文件，value就是源文件<br>(3)源文件一般需要用数组</p>
<p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">grunt.initConfig(&#123;</div><div class="line">  concat: &#123;</div><div class="line">    foo: &#123;</div><div class="line">      files: &#123;</div><div class="line">        <span class="string">'dest/a.js'</span>: [<span class="string">'src/aa.js'</span>, <span class="string">'src/aaa.js'</span>],</div><div class="line">        <span class="string">'dest/a1.js'</span>: [<span class="string">'src/aa1.js'</span>, <span class="string">'src/aaa1.js'</span>],</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>或者：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">grunt.initConfig(&#123;</div><div class="line">  concat: &#123;</div><div class="line">    foo: &#123;</div><div class="line">      files: [</div><div class="line">        &#123;src: [<span class="string">'src/aa.js'</span>, <span class="string">'src/aaa.js'</span>], dest: <span class="string">'dest/a.js'</span>&#125;,</div><div class="line">        &#123;src: [<span class="string">'src/aa1.js'</span>, <span class="string">'src/aaa1.js'</span>], dest: <span class="string">'dest/a1.js'</span>&#125;,</div><div class="line">      ],</div><div class="line">    &#125;,</div><div class="line">    bar: &#123;</div><div class="line">      files: [</div><div class="line">        &#123;src: [<span class="string">'src/bb.js'</span>, <span class="string">'src/bbb.js'</span>], dest: <span class="string">'dest/b/'</span>, nonull: <span class="literal">true</span>&#125;,</div><div class="line">        &#123;src: [<span class="string">'src/bb1.js'</span>, <span class="string">'src/bbb1.js'</span>], dest: <span class="string">'dest/b1/'</span>, filter: <span class="string">'isFile'</span>&#125;,</div><div class="line">      ],</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="过滤函数配置"><a href="#过滤函数配置" class="headerlink" title="过滤函数配置"></a>过滤函数配置</h2><p>可有可无，看自己需要。</p>
<p>比如node的模块系统<a href="https://nodejs.org/docs/latest/api/fs.html#fs_class_fs_stats" target="_blank" rel="external">fs里面isFile</a>是检查是否是文件的方法，举个过滤器的例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">grunt.initConfig(&#123;</div><div class="line">  clean: &#123;</div><div class="line">    foo: &#123;</div><div class="line">      src: [<span class="string">'tmp/**/*'</span>],</div><div class="line">      filter: <span class="string">'isFile'</span> //此处是过滤器</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>或者创建你自己的filter函数，根据文件是否匹配来返回true或者false。<br>下面的例子将仅仅清理一个空目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">grunt.initConfig(&#123;</div><div class="line">  clean: &#123;</div><div class="line">    foo: &#123;</div><div class="line">      src: [<span class="string">'tmp/**/*'</span>],</div><div class="line">      filter: <span class="keyword">function</span>(filepath) &#123;</div><div class="line">        <span class="built_in">return</span> (grunt.file.isDir(filepath) &amp;&amp; require(<span class="string">'fs'</span>).readdirSync(filepath).length === 0);</div><div class="line">      &#125;,</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="文件路径配置"><a href="#文件路径配置" class="headerlink" title="文件路径配置"></a>文件路径配置</h2><p>src-dest里面需要用到文件路径，通常分别指定所有源文件路径是不切实际的。</p>
<p>(1)通配符模式<br>通常分别指定所有源文件路径是不切实际的,但是我们可以用grunt提供的简写符，类似于正则里面的各种元字符，下面来看看：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">① * 匹配任意数量的字符，但不匹配 /</div><div class="line">② ? 匹配单个字符，但不匹配 /</div><div class="line">③ ** 匹配任意数量的字符，包括 /，只要它是路径中唯一的一部分</div><div class="line">④ &#123;&#125; 允许使用一个逗号分割的“或”表达式列表</div><div class="line">⑤ ! 在模式的开头用于排除一个匹配模式所匹配的任何文件</div></pre></td></tr></table></figure></p>
<p>比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">foo/*.js将匹配位于foo/目录下的所有的.js结尾的文件</div><div class="line">foo/**/*js将匹配foo/目录以及其子目录中所有以.js结尾的文件</div></pre></td></tr></table></figure></p>
<p>具体举个代码例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// 指定单个文件：</div><div class="line">&#123;src: <span class="string">'foo/this.js'</span>, dest: ...&#125;</div><div class="line">// 指定一个文件数组：</div><div class="line">&#123;src: [<span class="string">'foo/this.js'</span>, <span class="string">'foo/that.js'</span>, <span class="string">'foo/the-other.js'</span>], dest: ...&#125;</div><div class="line">// 使用一个匹配模式：</div><div class="line">&#123;src: <span class="string">'foo/th*.js'</span>, dest: ...&#125;</div><div class="line"></div><div class="line">// 一个独立的node-glob模式：</div><div class="line">&#123;src: <span class="string">'foo/&#123;a,b&#125;*.js'</span>, dest: ...&#125;</div><div class="line">// 也可以这样编写：</div><div class="line">&#123;src: [<span class="string">'foo/a*.js'</span>, <span class="string">'foo/b*.js'</span>], dest: ...&#125;</div><div class="line"></div><div class="line">// foo目录中所有的.js文件，按字母顺序排序：</div><div class="line">&#123;src: [<span class="string">'foo/*.js'</span>], dest: ...&#125;</div><div class="line">// 首先是bar.js，接着是剩下的.js文件，并按字母顺序排序：</div><div class="line">&#123;src: [<span class="string">'foo/bar.js'</span>, <span class="string">'foo/*.js'</span>], dest: ...&#125;</div><div class="line"></div><div class="line">// 除bar.js之外的所有的.js文件，按字母顺序排序：</div><div class="line">&#123;src: [<span class="string">'foo/*.js'</span>, <span class="string">'!foo/bar.js'</span>], dest: ...&#125;</div><div class="line">// 按字母顺序排序的所有.js文件，但是bar.js在最后。</div><div class="line">&#123;src: [<span class="string">'foo/*.js'</span>, <span class="string">'!foo/bar.js'</span>, <span class="string">'foo/bar.js'</span>], dest: ...&#125;</div></pre></td></tr></table></figure></p>
<p>(2)模板模式<br>①使用内部数据的模板<br>格式是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;% %&gt;</div></pre></td></tr></table></figure></p>
<p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">grunt.initConfig(&#123;</div><div class="line">	//用于任务配置模板的任意属性</div><div class="line">  foo: <span class="string">'c'</span>,</div><div class="line">  bar: <span class="string">'b&lt;%= foo %&gt;d'</span>, // <span class="string">'bcd'</span>,</div><div class="line">  baz: <span class="string">'a&lt;%= bar %&gt;e'</span>, // <span class="string">'abcde'</span>,</div><div class="line">  concat: &#123;</div><div class="line">    sample: &#123;</div><div class="line">      options: &#123;</div><div class="line">        banner: <span class="string">'/* &lt;%= baz %&gt; */\n'</span>,   // <span class="string">'/* abcde */\n'</span></div><div class="line">      &#125;,</div><div class="line">      src: [<span class="string">'&lt;%= qux %&gt;'</span>, <span class="string">'baz/*.js'</span>],  // [[<span class="string">'foo/*.js'</span>, <span class="string">'bar/*.js'</span>], <span class="string">'baz/*.js'</span>]</div><div class="line">      dest: <span class="string">'build/&lt;%= baz %&gt;.js'</span>,      // <span class="string">'build/abcde.js'</span></div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">  qux: [<span class="string">'foo/*.js'</span>, <span class="string">'bar/*.js'</span>],</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>②导入外部数据的模板<br>假设想引入package.json里面的数据,内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"grunt-test"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"grunt test exemple"</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"keywords"</span>: [</div><div class="line">    <span class="string">"grunt"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"grunt"</span>: <span class="string">"^1.0.1"</span>,</div><div class="line">    <span class="string">"grunt-contrib-uglify"</span>: <span class="string">"^2.2.0"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">"manlili"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></div><div class="line">&#125;</div><div class="line">```grunt.file.readJSON</div><div class="line">那么只要在grunt.initConfig顶部引用grunt.file.readJSON就可以了，代码如下：</div><div class="line">```bash</div><div class="line">grunt.initConfig(&#123;</div><div class="line">  pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</div><div class="line">  uglify: &#123;</div><div class="line">    options: &#123;</div><div class="line">      banner: <span class="string">'/*! &lt;%= pkg.name %&gt; &lt;%= grunt.template.today("yyyy-mm-dd") %&gt; */\n'</span></div><div class="line">    &#125;,</div><div class="line">    dist: &#123;</div><div class="line">      src: <span class="string">'src/&lt;%= pkg.name %&gt;.js'</span>,</div><div class="line">      dest: <span class="string">'dist/&lt;%= pkg.name %&gt;.min.js'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="动态构建文件对象-选读"><a href="#动态构建文件对象-选读" class="headerlink" title="动态构建文件对象(选读)"></a>动态构建文件对象(选读)</h2><p>当你希望处理大量的单个文件时，这里有一些附加的属性可以用来动态的构建一个文件列表。这些属性都可以用于Compact和Files Array文件映射格式。</p>
<p>expand 设置为true用于启用下面的选项：</p>
<ul>
<li>cwd:所有src指定的匹配都将相对于此处指定的路径（但不包括此路径）。</li>
<li>src:相对于cwd路径的匹配模式。</li>
<li>dest:目标文件路径前缀。</li>
<li>ext:对于生成的dest路径中所有实际存在文件，均使用这个属性值替换扩展名。</li>
<li>extDot:用于指定标记扩展名的英文点号的所在位置。可以赋值 ‘first’ （扩展名从文件名中的第一个英文点号开始） 或 ‘last’ （扩展名从最后一个英文点号开始），默认值为 ‘first’ [添加于 0.4.3 版本]</li>
<li>flatten:从生成的dest路径中移除所有的路径部分。</li>
<li>rename:对每个匹配的src文件调用这个函数(在重命名后缀和移除路径之后)。dest和匹配的src路径将被作为参数传入，此函数应该返回一个新的dest值。 如果相同的dest返回不止一次，那么，每个返回此值的src来源都将被添加到一个数组中作为源列表。</li>
</ul>
<p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">grunt.initConfig(&#123;</div><div class="line">  uglify: &#123;</div><div class="line">    static_mappings: &#123;</div><div class="line">      // Because these src-dest file mappings are manually specified, every</div><div class="line">      // time a new file is added or removed, the Gruntfile has to be updated.</div><div class="line">      files: [</div><div class="line">        &#123;src: <span class="string">'lib/a.js'</span>, dest: <span class="string">'build/a.min.js'</span>&#125;,</div><div class="line">        &#123;src: <span class="string">'lib/b.js'</span>, dest: <span class="string">'build/b.min.js'</span>&#125;,</div><div class="line">        &#123;src: <span class="string">'lib/subdir/c.js'</span>, dest: <span class="string">'build/subdir/c.min.js'</span>&#125;,</div><div class="line">        &#123;src: <span class="string">'lib/subdir/d.js'</span>, dest: <span class="string">'build/subdir/d.min.js'</span>&#125;,</div><div class="line">      ],</div><div class="line">    &#125;,</div><div class="line">    dynamic_mappings: &#123;</div><div class="line">      // Grunt will search <span class="keyword">for</span> <span class="string">"**/*.js"</span> under <span class="string">"lib/"</span> when the <span class="string">"uglify"</span> task</div><div class="line">      // runs and build the appropriate src-dest file mappings <span class="keyword">then</span>, so you</div><div class="line">      // don<span class="string">'t need to update the Gruntfile when files are added or removed.</span></div><div class="line">      files: [</div><div class="line">        &#123;</div><div class="line">          expand: true,     // Enable dynamic expansion.</div><div class="line">          cwd: 'lib/<span class="string">',      // Src matches are relative to this path.</span></div><div class="line">          src: ['**/*.js<span class="string">'], // Actual pattern(s) to match.</span></div><div class="line">          dest: 'build/<span class="string">',   // Destination path prefix.</span></div><div class="line">          ext: '.min.js<span class="string">',   // Dest filepaths will have this extension.</span></div><div class="line">          extDot: 'first<span class="string">'   // Extensions in filenames begin after the first dot</span></div><div class="line">        &#125;,</div><div class="line">      ],</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> grunt技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> grunt </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[grunt入门]]></title>
      <url>/2016/09/04/grunt%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>github地址：<a href="https://github.com/manlili/grunt_learn" target="_blank" rel="external">https://github.com/manlili/grunt_learn里面lesson01</a></p>
<h2 id="为何要用构建工具"><a href="#为何要用构建工具" class="headerlink" title="为何要用构建工具"></a>为何要用构建工具</h2><p>实现自动化。对于需要反复重复的任务，例如压缩（minification）、编译、单元测试、linting等，自动化工具可以减轻你的劳动，简化你的工作。<br>当你在 Gruntfile 文件正确配置好了任务，任务运行器就会自动帮你完成大部分无聊的工作。</p>
<h2 id="grunt与npm关系"><a href="#grunt与npm关系" class="headerlink" title="grunt与npm关系"></a>grunt与npm关系</h2><p>如果你想找到所需要的插件，可以去npm上面找，找不到的话，那就自己动手创造一个Grunt插件，然后将其发布到npm上吧<br>grunt插件列表的地址<a href="http://www.gruntjs.net/plugins" target="_blank" rel="external">http://www.gruntjs.net/plugins</a></p>
<h2 id="grunt与grunt-cli关系"><a href="#grunt与grunt-cli关系" class="headerlink" title="grunt与grunt-cli关系"></a>grunt与grunt-cli关系</h2><p>安装gruntcli并不等于安装了Grunt！gruntcli的任务很简单：调用与Gruntfile在同一目录中Grunt。这样带来的好处是，允许你在同一个系统上同时安装多个版本的 Grunt.</p>
<h2 id="grunt-cli工作机制"><a href="#grunt-cli工作机制" class="headerlink" title="grunt-cli工作机制"></a>grunt-cli工作机制</h2><p>每次运行grunt 时，他就利用node提供的require()系统查找本地安装的 Grunt。正是由于这一机制，你可以在项目的任意子目录中运行grunt 。<br>安装方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g grunt-cli</div></pre></td></tr></table></figure></p>
<h2 id="grunt项目准备"><a href="#grunt项目准备" class="headerlink" title="grunt项目准备"></a>grunt项目准备</h2><h3 id="准备文件"><a href="#准备文件" class="headerlink" title="准备文件"></a>准备文件</h3><p>一般需要在你的项目中添加两份文件：package.json 和 Gruntfile。<br>package.json:此文件被npm用于存储项目的元数据，以便将此项目发布为npm模块。你可以在此文件中列出项目依赖的grunt和Grunt插件，放置于devDependencies配置段内。</p>
<p>Gruntfile: 此文件被命名为 Gruntfile.js 或 Gruntfile.coffee，用来配置或定义任务（task）并加载Grunt插件的。 此文档中提到的 Gruntfile 其实说的是一个文件，文件名是 Gruntfile.js 或 Gruntfile.coffee。</p>
<p>总结：一般来说这两个文件在同一目录下</p>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>生成package.json命令,右键gitBash输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure></p>
<p>然后按提示输入参数，结果如下图：<br><img src="https://manlili.github.io/img/160904/1.png" alt="图"><br>生成的package.json内容是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"grunt-test"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"grunt test exemple"</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"keywords"</span>: [</div><div class="line">    <span class="string">"grunt"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"author"</span>: <span class="string">"manlili"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>向已经存在的package.json 文件中添加Grunt和grunt插件的最简单方式是通过npm install <module> –save-dev命令。此命令不光安装了<module>，还会自动将其添加到devDependencies 配置段中，命令如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install grunt --save-dev</div></pre></td></tr></table></figure></module></module></p>
<p>再去看package.json内容是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"grunt-test"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"grunt test exemple"</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"keywords"</span>: [</div><div class="line">    <span class="string">"grunt"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"grunt"</span>: <span class="string">"^1.0.1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">"manlili"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码发现多了devDependencies字段</p>
<h2 id="Gruntfile-js"><a href="#Gruntfile-js" class="headerlink" title="Gruntfile.js"></a>Gruntfile.js</h2><p>Gruntfile.js 或 Gruntfile.coffee 文件是有效的 JavaScript 或 CoffeeScript 文件，应当放在你的项目根目录中，和package.json文件在同一目录层级.<br>Gruntfile由以下几部分构成：<br>(1)wrapper函数<br>(2)项目与任务配置<br>(3)加载grunt插件和任务<br>(4)自定义任务<br>下面随便拿个压缩JS的Gruntfile.js讲解一下，代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">module.exports = <span class="keyword">function</span>(grunt)&#123;</div><div class="line">    //初始化grunt 配置</div><div class="line">    grunt.initConfig(&#123;</div><div class="line"> </div><div class="line">        //获取package.json的信息</div><div class="line">        pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</div><div class="line">        //压缩js</div><div class="line">        uglify:&#123;</div><div class="line">            build:&#123;</div><div class="line">                src:<span class="string">'jquery.js'</span>,//压缩是要压缩合并了的</div><div class="line">                dest:<span class="string">'jquery.min.js'</span> //dest 是目的地输出</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">    &#125;);</div><div class="line">    //告诉grunt我们将使用插件</div><div class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</div><div class="line"></div><div class="line">    //告诉grunt当我们在终端输入grunt时需要做些什么</div><div class="line">    grunt.registerInitTask(<span class="string">'default'</span>,[<span class="string">'uglify'</span>]);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="wrapper函数"><a href="#wrapper函数" class="headerlink" title="wrapper函数"></a>wrapper函数</h3><p>每一份 Gruntfile （和grunt插件）都遵循同样的格式，你所书写的Grunt代码必须放在此函数内：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">module.exports = <span class="keyword">function</span>(grunt) &#123;</div><div class="line">  ...</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="项目与任务配置"><a href="#项目与任务配置" class="headerlink" title="项目与任务配置"></a>项目与任务配置</h3><p>大部分的Grunt任务都依赖某些配置数据，这些数据被定义在一个object内，并传递给grunt.initConfig 方法。<br>比如上面的代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">grunt.initConfig(&#123;</div><div class="line"> </div><div class="line">    //获取package.json的信息</div><div class="line">    pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</div><div class="line">    //压缩js</div><div class="line">    uglify:&#123;</div><div class="line">        build:&#123;</div><div class="line">            src:<span class="string">'jquery.js'</span>,//压缩是要压缩合并了的</div><div class="line">            dest:<span class="string">'jquery.min.js'</span> //dest 是目的地输出</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>在上面的案例中，grunt.file.readJSON(‘package.json’) 将存储在package.json文件中的JSON元数据引入到grunt config中。</p>
<h3 id="加载-Grunt-插件和任务"><a href="#加载-Grunt-插件和任务" class="headerlink" title="加载 Grunt 插件和任务"></a>加载 Grunt 插件和任务</h3><p>像 grunt-contrib-uglify 和 linting这些常用的任务（task）都已经以grunt插件的形式被开发出来了。<br><strong>只要在 package.json 文件中被列为dependency（依赖）的包</strong>，并通过npm install安装之后，都可以在Gruntfile中以简单命令的形式使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//告诉grunt我们将使用插件</div><div class="line">grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="自定义任务"><a href="#自定义任务" class="headerlink" title="自定义任务"></a>自定义任务</h3><p>通过定义 default 任务，可以让Grunt默认执行一个或多个任务。<br>在下面的这个案例中，执行 grunt 命令时如果不指定一个任务的话，将会执行uglify任务。这和执行grunt uglify 或者 grunt default的效果一样。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//告诉grunt当我们在终端输入grunt时需要做些什么</div><div class="line">grunt.registerInitTask(<span class="string">'default'</span>,[<span class="string">'uglify'</span>]);</div></pre></td></tr></table></figure></p>
<p>如果Grunt插件中的任务（task）不能满足你的项目需求，你还可以在Gruntfile中自定义任务（task）。<br>例如，在下面的 Gruntfile 中自定义了一个default 任务，并且他甚至不依赖任务配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">module.exports = <span class="keyword">function</span>(grunt) &#123;</div><div class="line">  grunt.registerTask(<span class="string">'default'</span>, <span class="string">'Log some stuff.'</span>, <span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">    grunt.log.write(<span class="string">'Logging some stuff...'</span>).ok();</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="举个自动压缩JS的例子"><a href="#举个自动压缩JS的例子" class="headerlink" title="举个自动压缩JS的例子"></a>举个自动压缩JS的例子</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>(1)安装node以及npm，详见官网，本次略写<br>(2)安装grunt-cli语法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g grunt-cli</div></pre></td></tr></table></figure></p>
<p>注意，mac os 系统、部分linux系统中，在这句话的前面加上“sudo ”指令。<br>(3)准备一个无压缩的jquery文件，准备用grunt把这个文件压缩<br>整体的文件目录如下：<br><img src="https://manlili.github.io/img/160904/2.png" alt="图"></p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>下面需要准备package.json。<br>生成package.json命令,右键gitBash输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure></p>
<p>然后按提示输入参数即可生成package.json文件。</p>
<p>先来看看package.json里面的内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"grunt-test"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"grunt test exemple"</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"keywords"</span>: [</div><div class="line">    <span class="string">"grunt"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">     //注意此处内容为空</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">"manlili"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后去安装grunt,进入package.json所在文件夹，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install grunt  --save-dev</div></pre></td></tr></table></figure></p>
<p>然后发现出现node_modules文件夹，代表安装成功，同时发现package.json里面devDependencies有了内容<br>再来看看package.json里面的内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"grunt-test"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"grunt test exemple"</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"keywords"</span>: [</div><div class="line">    <span class="string">"grunt"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"grunt"</span>: <span class="string">"^1.0.1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">"manlili"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是我们加了–save-dev的作用，依赖grunt模块。</p>
<p>由于本次是讲压缩JS代码，所以我们需要引入grunt插件uglify，命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install grunt-contrib-uglify --save-dev</div></pre></td></tr></table></figure></p>
<p>然后发现package.json的”devDependencies”里面又多了grunt-contrib-uglify配置，如下图：<br><img src="https://manlili.github.io/img/160904/3.png" alt="图"></p>
<h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>下面准备Gruntfile.js。<br>直接创建空白的js文件命名Gruntfile.js，写入内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">module.exports = <span class="keyword">function</span>(grunt)&#123;</div><div class="line">    //初始化grunt 配置</div><div class="line">    grunt.initConfig(&#123;</div><div class="line"> </div><div class="line">        //获取package.json的信息</div><div class="line">        pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</div><div class="line">        //压缩js</div><div class="line">        uglify:&#123;</div><div class="line">            build:&#123;</div><div class="line">                src:<span class="string">'jquery.js'</span>,//压缩是要压缩合并了的</div><div class="line">                dest:<span class="string">'jquery.min.js'</span> //dest 是目的地输出</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">    &#125;);</div><div class="line">    //告诉grunt我们将使用插件</div><div class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</div><div class="line"></div><div class="line">    //告诉grunt当我们在终端输入grunt时需要做些什么</div><div class="line">    grunt.registerInitTask(<span class="string">'default'</span>,[<span class="string">'uglify'</span>]);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="开始压缩js"><a href="#开始压缩js" class="headerlink" title="开始压缩js"></a>开始压缩js</h3><p>右键打开gitBash输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt uglify</div></pre></td></tr></table></figure></p>
<p>就会发现：<br><img src="https://manlili.github.io/img/160904/4.png" alt="图"><br>然后发现文件夹多了jquery.min.js，如下图：<br><img src="https://manlili.github.io/img/160904/5.png" alt="图"></p>
]]></content>
      
        <categories>
            
            <category> grunt技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> grunt </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[引用文件的路径]]></title>
      <url>/2016/08/26/%E5%BC%95%E7%94%A8%E6%96%87%E4%BB%B6%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
      <content type="html"><![CDATA[<h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><p>以引用文件之网页所在位置为参考基础，而建立出的目录路径。因此，当保存于不同目录的网页引用同一个文件时，所使用的路径将不相同，故称之为相对.</p>
<h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>以Web站点根目录为参考基础的目录路径。之所以称为绝对，意指当所有网页引用同一个文件时，所使用的路径都是一样的.</p>
<h2 id="相对路径和绝对路径的区别"><a href="#相对路径和绝对路径的区别" class="headerlink" title="相对路径和绝对路径的区别"></a>相对路径和绝对路径的区别</h2><p>其实绝对路径与相对路径的不同处，只在于描述目录路径时，所采用的参考点不同.</p>
<h2 id="路径总结"><a href="#路径总结" class="headerlink" title="路径总结"></a>路径总结</h2><p>./          –代表目前所在的目录。</p>
<p>../         –代表上一层目录。</p>
<p>../../ 　  –代表上一层目录。</p>
<p>/           –代表根目录。</p>
<h2 id="相对路径举个栗子"><a href="#相对路径举个栗子" class="headerlink" title="相对路径举个栗子"></a>相对路径举个栗子</h2><h3 id="相对路径的简单应用"><a href="#相对路径的简单应用" class="headerlink" title="相对路径的简单应用"></a>相对路径的简单应用</h3><p>假设：info.html路径是：c:/Inetpub/wwwroot/sites/blabla/info.html<br>　　　index.html路径是：c:/Inetpub/wwwroot/sites/blabla/index.html<br>在info.html引用index.html写法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;a href = <span class="string">"index.html"</span>&gt;这是超连接&lt;/a&gt;</div><div class="line">或者写法:</div><div class="line">&lt;a href = <span class="string">"./index.html"</span>&gt;这是超连接&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<h3 id="如何表示上级目录"><a href="#如何表示上级目录" class="headerlink" title="如何表示上级目录"></a>如何表示上级目录</h3><p>../表示源文件所在目录的上一级目录<br>假设：info.html路径是：c:/Inetpub/wwwroot/sites/blabla/info.html<br>　　　index.html路径是：c:/Inetpub/wwwroot/sites/index.html<br>在info.html引用index.html写法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href = <span class="string">"../index.html"</span>&gt;这是超连接&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<h3 id="如何表示上上级目录"><a href="#如何表示上上级目录" class="headerlink" title="如何表示上上级目录"></a>如何表示上上级目录</h3><p>../../表示源文件所在目录的上一级目录<br>假设：info.html路径是：c:/Inetpub/wwwroot/sites/blabla/info.html<br>　　　index.html路径是：c:/Inetpub/wwwroot/index.html<br>在info.html引用index.html写法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href = <span class="string">"../../index.html"</span>&gt;index.html&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<h3 id="如何表示跨级目录"><a href="#如何表示跨级目录" class="headerlink" title="如何表示跨级目录"></a>如何表示跨级目录</h3><p>假设：info.html路径是：c:/Inetpub/wwwroot/sites/blabla/info.html<br>　　　index.html路径是：c:/Inetpub/wwwroot/sites/wowstory/index.html<br>在info.html引用index.html写法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href = <span class="string">"../wowstory/index.html"</span>&gt;index.html&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<h3 id="如何表示下级目录"><a href="#如何表示下级目录" class="headerlink" title="如何表示下级目录"></a>如何表示下级目录</h3><p>引用下级目录的文件，直接写下级目录文件的路径即可。<br>假设：info.html路径是：c:/Inetpub/wwwroot/sites/blabla/info.html<br>　　　index.html路径是：c:/Inetpub/wwwroot/sites/blabla/html/index.html<br>在info.html引用index.html写法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href = <span class="string">"html/index.html"</span>&gt;这是超连接&lt;/a&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> css技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 文件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue组件]]></title>
      <url>/2016/08/06/Vue%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>项目中自己写组件的机会不是很多，但是研究一下，尤其是父子组件之间的通信。<br>github地址:<a href="https://github.com/manlili/vue_learn" target="_blank" rel="external">https://github.com/manlili/vue_learn里面的lesson12</a></p>
<h2 id="创建组件的步骤"><a href="#创建组件的步骤" class="headerlink" title="创建组件的步骤"></a>创建组件的步骤</h2><p>直接用例子说明<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue组件&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;zujian&gt;&lt;/zujian&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myComponent = Vue.extend(&#123;   //第一步:定义</div><div class="line">                template: <span class="string">'&lt;div&gt;我是内容&lt;/div&gt;'</span></div><div class="line">            &#125;)</div><div class="line">            </div><div class="line">            Vue.component(<span class="string">'zujian'</span>,myComponent)  //第二步:注册到Vue上面</div><div class="line">            </div><div class="line">            var myVue = new Vue(&#123;    //第三步:创建实例化</div><div class="line">                el: <span class="string">'.test'</span></div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>或者用一种简单的方法创建组件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue组件&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;template id=<span class="string">"lili-template"</span>&gt; &lt;!--注意此处必须是id,用class不行--&gt;</div><div class="line">            &lt;div&gt;我是内容2&lt;/div&gt;</div><div class="line">        &lt;/template&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;zujian&gt;&lt;/zujian&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">'.test'</span>,</div><div class="line">                components: &#123;</div><div class="line">                    zujian: &#123;</div><div class="line">                        template: <span class="string">'#lili-template'</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="父子组件"><a href="#父子组件" class="headerlink" title="父子组件"></a>父子组件</h2><p>下面来看个例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue组件--父子组件&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt; &lt;!--局部注册--&gt;</div><div class="line">            &lt;zujian&gt;&lt;/zujian&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var childComponent = Vue.extend(&#123;   //第一步:定义</div><div class="line">                template: <span class="string">'&lt;div class="mychild"&gt;我是孩子&lt;/div&gt;'</span></div><div class="line">            &#125;);</div><div class="line">            var parentComponent = Vue.extend(&#123;</div><div class="line">                template: <span class="string">'&lt;div class="myParent"&gt;我是父容器&lt;child&gt;&lt;/child&gt;&lt;/div&gt;'</span>,  //注意此处要引用孩子组件</div><div class="line">                components: &#123;</div><div class="line">                    <span class="string">'child'</span>: childComponent</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            Vue.component(<span class="string">'zujian'</span>,parentComponent);  //第二步:注册到Vue上面</div><div class="line">            </div><div class="line">            var myVue = new Vue(&#123;    //第三步:创建实例化</div><div class="line">                el: <span class="string">'.test'</span></div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>或者另一种比较明了的写法:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue组件--父子组件另一种写法&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;zujian&gt;&lt;/zujian&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;template id=<span class="string">"parentComponent"</span>&gt;</div><div class="line">            &lt;div class=<span class="string">"myParent"</span>&gt;</div><div class="line">                我是父容器</div><div class="line">                &lt;child&gt;&lt;/child&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/template&gt;</div><div class="line">        </div><div class="line">        &lt;template id=<span class="string">"childComponent"</span>&gt;</div><div class="line">            &lt;div class=<span class="string">"mychild"</span>&gt;</div><div class="line">                我是孩子</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/template&gt;</div><div class="line">        </div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            </div><div class="line">            var myVue = new Vue(&#123; </div><div class="line">                el: <span class="string">'.test'</span>,</div><div class="line">                components: &#123;</div><div class="line">                    zujian: &#123;</div><div class="line">                        template:<span class="string">'#parentComponent'</span>,</div><div class="line">                        components: &#123;</div><div class="line">                            child: &#123;</div><div class="line">                                template:<span class="string">'#childComponent'</span></div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="Vue组件选项"><a href="#Vue组件选项" class="headerlink" title="Vue组件选项"></a>Vue组件选项</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue组件--组件选项&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;div class=<span class="string">"lala"</span>&gt;</div><div class="line">                &lt;zujian&gt;&lt;/zujian&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myComponent = Vue.extend(&#123;   </div><div class="line">                template: <span class="string">'&lt;div&gt;我是&#123;&#123;a&#125;&#125;&#123;&#123;b&#125;&#125;&lt;/div&gt;'</span>,</div><div class="line">                data : <span class="function"><span class="title">function</span></span> () &#123;   //不想让MyComponent 所有的实例将共享同一个 data 对象,所以将data写成函数形式返回</div><div class="line">                    <span class="built_in">return</span> &#123;</div><div class="line">                        a: 1,</div><div class="line">                        b: 2</div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                el: <span class="function"><span class="title">function</span></span> () &#123;   //不想让MyComponent 所有的实例将共享同一个 el 对象,所以将el写成函数形式返回</div><div class="line">                    <span class="built_in">return</span> <span class="string">".lala"</span></div><div class="line">                &#125;</div><div class="line">            &#125;)                    </div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">'.test'</span>,</div><div class="line">                components: &#123;</div><div class="line">                    zujian:myComponent</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="Vue组件作用域-父子通信"><a href="#Vue组件作用域-父子通信" class="headerlink" title="Vue组件作用域(父子通信)"></a>Vue组件作用域(父子通信)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue组件--组件作用域&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;!-- 子组件模板 --&gt;</div><div class="line">        &lt;template id=<span class="string">"child-template"</span>&gt;</div><div class="line">          &#123;&#123;msg1&#125;&#125;</div><div class="line">        &lt;/template&gt;</div><div class="line">        </div><div class="line">        &lt;!-- 父组件模板 --&gt;</div><div class="line">        &lt;div id=<span class="string">"events-example"</span>&gt;</div><div class="line">          &lt;p&gt;Messages: &#123;&#123; messages | json &#125;&#125;&lt;/p&gt;</div><div class="line">          &lt;child :msg1=<span class="string">"mssss"</span>&gt;</div><div class="line">              </div><div class="line">          &lt;/child&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        </div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line"></div><div class="line">            var parent = new Vue(&#123;</div><div class="line">              el: <span class="string">'#events-example'</span>,</div><div class="line">              data: &#123;</div><div class="line">                messages: <span class="string">'我是父框架222'</span>,</div><div class="line">                mssss: <span class="string">'ddddddd'</span></div><div class="line">              &#125;,</div><div class="line">              components: &#123;</div><div class="line">                  child: &#123;</div><div class="line">                      template: <span class="string">'#child-template'</span>,</div><div class="line">                      props: &#123;msg1: String &#125;</div><div class="line">                    &#125;</div><div class="line">              &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> vue技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
            <tag> 组件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue混合]]></title>
      <url>/2016/07/24/Vue%E6%B7%B7%E5%90%88/</url>
      <content type="html"><![CDATA[<p>class和style绑定的方法很多，本文写下来总结一下：<br>gitHub地址:<a href="https://github.com/manlili/vue_learn" target="_blank" rel="external">https://github.com/manlili/vue_learn里面的lesson13</a></p>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>混合以一种灵活的方式为组件提供分布复用功能。混合对象可以包含任意的组件选项。当组件使用了混合对象时，混合对象的所有选项将被“混入”组件自己的选项中。<br>实际上,我也没搞懂这句话,项目中也没用到，先研究再说,放个一年也许就自己慢慢懂了,时间这玩意可以发酵</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>先拿个例子说明：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue混合--定义&lt;/title&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myMinxin= &#123;             //第一步,创建一个混合数据</div><div class="line">                created: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                    this.hello();</div><div class="line">                &#125;,</div><div class="line">                methods: &#123;</div><div class="line">                    hello: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                        alert(<span class="string">'你好'</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            var myComponent = Vue.extend(&#123;    //将混合注册到Vue</div><div class="line">                mixins: [myMinxin]</div><div class="line">            &#125;)</div><div class="line">            </div><div class="line">            new myComponent();    //实例化这个混合</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>上面代码,弹出:<br><img src="https://manlili.github.io/img/160724/1.png" alt="图"></p>
<h2 id="混合与Vue同名冲突"><a href="#混合与Vue同名冲突" class="headerlink" title="混合与Vue同名冲突"></a>混合与Vue同名冲突</h2><p>混合对象与组件包含同名选项时，这些选项将以适当的策略合并。例如，同名钩子函数被并入一个数组，因而都会被调用。另外，混合的钩子将在组件自己的钩子之前调用。<br>同名钩子函数冲突,代码如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue混合--同名冲突&lt;/title&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myMinxin= &#123;             //第一步,创建一个混合数据</div><div class="line">                created: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                    this.hello();</div><div class="line">                &#125;,</div><div class="line">                methods: &#123;</div><div class="line">                    hello: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                        alert(<span class="string">'你好'</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            var myComponent = Vue.extend(&#123;    //注意Vue的created与minxin的created重合,这里将先执行minxin的created</div><div class="line">                created: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                    alert(<span class="string">'我是Vue的created'</span>);</div><div class="line">                &#125;,</div><div class="line">                mixins: [myMinxin]</div><div class="line">            &#125;)</div><div class="line">            </div><div class="line">            new myComponent();    //实例化这个混合</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>先弹出:<br><img src="https://manlili.github.io/img/160724/2.png" alt="图"><br>再弹出<br><img src="https://manlili.github.io/img/160724/3.png" alt="图"></p>
<p>值为对象同名冲突,代码如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue混合--同名冲突&lt;/title&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myMinxin= &#123;             //第一步,创建一个混合数据</div><div class="line">                created: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                    this.hello();</div><div class="line">                    this.nono();</div><div class="line">                &#125;,</div><div class="line">                methods: &#123;</div><div class="line">                    hello: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                        alert(<span class="string">'你好1'</span>);</div><div class="line">                    &#125;,</div><div class="line">                    nono: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                        alert(<span class="string">'nono1'</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            var myComponent = Vue.extend(&#123;     //methods中对象冲突,只显示Vue实例中的方法</div><div class="line">                created: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                    this.hello();</div><div class="line">                    this.nono();</div><div class="line">                &#125;,</div><div class="line">                mixins: [myMinxin],</div><div class="line">                methods: &#123;</div><div class="line">                    hello: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                        alert(<span class="string">'你好2'</span>);</div><div class="line">                    &#125;,</div><div class="line">                    nono: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                        alert(<span class="string">'nono2'</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            </div><div class="line">            new myComponent();    //实例化这个混合</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>依次输出如下:<br><img src="https://manlili.github.io/img/160724/4.png" alt="图"><br><img src="https://manlili.github.io/img/160724/5.png" alt="图"><br><img src="https://manlili.github.io/img/160724/6.png" alt="图"><br><img src="https://manlili.github.io/img/160724/7.png" alt="图"></p>
]]></content>
      
        <categories>
            
            <category> vue技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
            <tag> 混合 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue表单]]></title>
      <url>/2016/07/16/Vue%E8%A1%A8%E5%8D%95/</url>
      <content type="html"><![CDATA[<p>很简单的表单，随意记下笔记<br>github地址:<a href="https://github.com/manlili/vue_learn" target="_blank" rel="external">https://github.com/manlili/vue_learn里面的lesson11</a></p>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>真的很简单，但实际上项目却不常用，这里只写个简单的例子就结束了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue表单&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;!--输入框--&gt;</div><div class="line">            &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> v-model=<span class="string">"msg"</span>&gt; &lt;br /&gt;</div><div class="line">            </div><div class="line">            &lt;!--单选框--&gt;</div><div class="line">            &lt;input id=<span class="string">"mycb1"</span> <span class="built_in">type</span>=<span class="string">"radio"</span> v-model=<span class="string">"choose1"</span>&gt;</div><div class="line">            &lt;label <span class="keyword">for</span>=<span class="string">"mycb1"</span>&gt;&#123;&#123;choose1&#125;&#125;&lt;/label&gt;</div><div class="line">            </div><div class="line">            &lt;!--复选框--&gt;</div><div class="line">            &lt;input id=<span class="string">"mycb2"</span> <span class="built_in">type</span>=<span class="string">"checkbox"</span> v-model=<span class="string">"choose2"</span>&gt;</div><div class="line">            &lt;label <span class="keyword">for</span>=<span class="string">"mycb2"</span>&gt;&#123;&#123;choose2&#125;&#125;&lt;/label&gt;</div><div class="line">            </div><div class="line">            &lt;!--Select--&gt;</div><div class="line">            &lt;select v-model=<span class="string">"selected"</span>&gt;</div><div class="line">              &lt;option&gt;A&lt;/option&gt;</div><div class="line">              &lt;option&gt;B&lt;/option&gt;</div><div class="line">              &lt;option&gt;C&lt;/option&gt;</div><div class="line">            &lt;/select&gt;</div><div class="line">            &lt;span&gt;选中: &#123;&#123; selected &#125;&#125;&lt;/span&gt;</div><div class="line">            </div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var vm = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    msg: <span class="string">'我是文本'</span>,</div><div class="line">                    choose1: <span class="literal">false</span>,</div><div class="line">                    choose2: <span class="literal">false</span>,</div><div class="line">                    selected:<span class="string">''</span></div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>实现的结果如下：<br><img src="https://manlili.github.io/img/160716/1.jpg" alt="图"><br>选中后的结果是：<br><img src="https://manlili.github.io/img/160716/2.jpg" alt="图"></p>
]]></content>
      
        <categories>
            
            <category> vue技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
            <tag> 表单 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue方法和事件]]></title>
      <url>/2016/07/01/Vue%E6%96%B9%E6%B3%95%E4%B8%8E%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>项目经常用到的方法和事件，在这里稍微写一下测试例子总结一下<br>github地址:<a href="https://github.com/manlili/vue_learn" target="_blank" rel="external">https://github.com/manlili/vue_learn里面的lesson10</a></p>
<h2 id="vue方法实现"><a href="#vue方法实现" class="headerlink" title="vue方法实现"></a>vue方法实现</h2><p>不多说了，很简单，直接贴上代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue方法与事件&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div id=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;button @click=<span class="string">"sayHi"</span>&gt;点击我&lt;/button&gt; &lt;!--这里使用@--&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">'#test'</span>,</div><div class="line">                methods: &#123;      //这里使用methods</div><div class="line">                    sayHi: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                        alert(<span class="string">'我被点击了'</span>)</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="vue方法传参"><a href="#vue方法传参" class="headerlink" title="vue方法传参"></a>vue方法传参</h2><p>直接在方法名中带个参数就可以了，可以传多个参数，只要接收的顺序正确就可以了，举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue方法与事件&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div id=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;button @click=<span class="string">"sayHi('你好')"</span>&gt;说你好&lt;/button&gt; &lt;!--这里使用@--&gt;</div><div class="line">            &lt;button @click=<span class="string">"sayHi('我被点击了')"</span>&gt;说我被点击了&lt;/button&gt; &lt;!--这里使用@--&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">'#test'</span>,</div><div class="line">                methods: &#123;      //这里使用methods</div><div class="line">                    sayHi: <span class="keyword">function</span> (message) &#123;</div><div class="line">                        alert(message)</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="vue访问原生-DOM-事件"><a href="#vue访问原生-DOM-事件" class="headerlink" title="vue访问原生 DOM 事件"></a>vue访问原生 DOM 事件</h2><p>注意用$event获取<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue方法与事件&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div id=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;button @click=<span class="string">"changeColor('你好',<span class="variable">$event</span>)"</span>&gt;点击我&lt;/button&gt; &lt;!--这里使用@--&gt;</div><div class="line">            &lt;div style=<span class="string">"height: 100px;width: 100px;background-color: red;"</span> @mouseover=<span class="string">"over('鼠标从我上面滑过',<span class="variable">$event</span>)"</span>&gt;</div><div class="line">                鼠标从我上面滑过试试</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">'#test'</span>,</div><div class="line">                methods: &#123;      //这里使用methods</div><div class="line">                    changeColor: <span class="keyword">function</span> (message, event) &#123;</div><div class="line">                        alert(message+event);    //弹出我被点击了,事件是[object MouseEvent]</div><div class="line">                    &#125;,</div><div class="line">                    over :<span class="keyword">function</span> (message, event) &#123;</div><div class="line">                        alert(message+event);   //弹出鼠标从我上面滑过,事件是[object MouseEvent]</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><p>直接举个例子，解释都在注释里面写了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue方法与事件&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div id=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;button @click.stop=<span class="string">"sayHi('你好')"</span>&gt;说你好&lt;/button&gt; &lt;!-- 阻止单击事件冒泡 --&gt;</div><div class="line">            &lt;button @click.prevent=<span class="string">"sayHi('你好')"</span>&gt;说你好&lt;/button&gt; &lt;!-- 提交事件不再重载页面 --&gt;</div><div class="line">            &lt;button @click.stop.prevent=<span class="string">"sayHi('你好')"</span>&gt;说你好&lt;/button&gt; &lt;!-- 阻止单击事件冒泡和提交事件不再重载页面 --&gt;</div><div class="line">            &lt;button @click.capture=<span class="string">"sayHi('你好')"</span>&gt;说你好&lt;/button&gt;  &lt;!-- 添加事件侦听器时使用 capture 模式 --&gt;</div><div class="line">            &lt;button @click.self=<span class="string">"sayHi('你好')"</span>&gt;说你好&lt;/button&gt;    &lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</div><div class="line">            </div><div class="line">            &lt;div @keyup.13=<span class="string">"sayHi('你好')"</span>&gt;说你好&lt;/div&gt;  &lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">'#test'</span>,</div><div class="line">                methods: &#123;      //这里使用methods</div><div class="line">                    sayHi: <span class="keyword">function</span> (message) &#123;</div><div class="line">                        alert(message)</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> vue技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 事件 </tag>
            
            <tag> vue </tag>
            
            <tag> 方法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue列表渲染]]></title>
      <url>/2016/06/24/Vue%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/</url>
      <content type="html"><![CDATA[<p>项目中最常用的是列表的循环，本次写几个测试例子总结一下：<br>github地址:<a href="https://github.com/manlili/vue_learn" target="_blank" rel="external">https://github.com/manlili/vue_learn里面的lesson09</a></p>
<h2 id="for循环数组"><a href="#for循环数组" class="headerlink" title="for循环数组"></a>for循环数组</h2><p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue列表&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;ul class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;li v-for=<span class="string">"item in name"</span>&gt; &lt;!--获取位置第一种写法:<span class="variable">$index</span>是vue自带的位置索引--&gt;</div><div class="line">                &#123;&#123;<span class="variable">$index</span>&#125;&#125;--&#123;&#123;item.message&#125;&#125;        &lt;!--输出0--Foo    1--Bar--&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &lt;li v-for=<span class="string">"(index,item) in name"</span>&gt;  &lt;!--获取位置第二种写法:自定义一个index变量直接跟着item--&gt;</div><div class="line">                &#123;&#123;index&#125;&#125;**&#123;&#123;item.message&#125;&#125;                    &lt;!--输出0**Foo    1**Bar--&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    name: [   //注意name是数组</div><div class="line">					  &#123; message: <span class="string">'Foo'</span> &#125;,</div><div class="line">					  &#123; message: <span class="string">'Bar'</span> &#125;</div><div class="line">					]</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="for循环对象"><a href="#for循环对象" class="headerlink" title="for循环对象"></a>for循环对象</h2><p>直接上个例子，注意看注释<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue列表&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;ul class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;li v-for=<span class="string">"value in name"</span>&gt; </div><div class="line">                &#123;&#123;<span class="variable">$key</span>&#125;&#125;--&#123;&#123;value&#125;&#125;     &lt;!--输出是 FirstName--John LastName--Doe Age--30--&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    name:&#123; //注意name是对象</div><div class="line">					  FirstName: <span class="string">'John'</span>,</div><div class="line">					  LastName: <span class="string">'Doe'</span>,</div><div class="line">					  Age: 30</div><div class="line">					&#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="track-by定义不需重新渲染的DOM片段"><a href="#track-by定义不需重新渲染的DOM片段" class="headerlink" title="track-by定义不需重新渲染的DOM片段"></a>track-by定义不需重新渲染的DOM片段</h2><p>功能:有时候数组数据变化,页面所有DOM都需要重新渲染,这样会增加渲染时间,但是track-by可以定义哪些DOM被复用,使Vue.js 因而能尽可能地复用已有实例.<br>下面写个测试例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue列表&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;ul class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;li v-for=<span class="string">"item in name"</span> track-by=<span class="string">"id"</span>&gt; &lt;!--然后在替换数组 name 时，如果 Vue.js 遇到一个包含id:<span class="string">'01'</span> 的新对象，vue可以复用这个已有对象的作用域与 DOM 元素。--&gt;</div><div class="line">                &#123;&#123;<span class="variable">$index</span>&#125;&#125;--&#123;&#123;item.message&#125;&#125;        &lt;!--输出0--Foo    1--Bar--&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    name: [   //注意item是数组</div><div class="line">					  &#123; message: <span class="string">'Foo'</span>,id:01 &#125;,</div><div class="line">					  &#123; message: <span class="string">'Bar'</span>,id:02 &#125;</div><div class="line">					]</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> vue技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
            <tag> 列表 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue条件渲染]]></title>
      <url>/2016/06/17/Vue%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/</url>
      <content type="html"><![CDATA[<p>最近项目中用到了Vue条件渲染，写几个测试例子总结一下<br>github地址:<a href="https://github.com/manlili/vue_learn" target="_blank" rel="external">https://github.com/manlili/vue_learn里面的lesson08</a></p>
<h2 id="v-if显示单个元素"><a href="#v-if显示单个元素" class="headerlink" title="v-if显示单个元素"></a>v-if显示单个元素</h2><p>注意else只能跟在v-if或者v-show后面<br>测试例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue条件渲染&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;div v-if=<span class="string">"isDisplay"</span>&gt;   &lt;!--if...else... 单个元素--&gt;</div><div class="line">                显示我1</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;div v-else&gt;</div><div class="line">                显示我2</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue =new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    isDisplay: 1</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>输出结果是:显示我1</p>
<h2 id="v-if显示多个元素-需配合template标签"><a href="#v-if显示多个元素-需配合template标签" class="headerlink" title="v-if显示多个元素,需配合template标签"></a>v-if显示多个元素,需配合template标签</h2><p>注意else只能跟在v-if或者v-show后面<br>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue条件渲染&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;template v-if=<span class="string">"isDisplay"</span>&gt; &lt;!--if...else... 用template实现多个元素--&gt;</div><div class="line">                &lt;div&gt;显示我1&lt;/div&gt;</div><div class="line">                &lt;div&gt;显示我11&lt;/div&gt;</div><div class="line">                &lt;div&gt;显示我12&lt;/div&gt;</div><div class="line">                &lt;div&gt;显示我13&lt;/div&gt;</div><div class="line">            &lt;/template&gt;</div><div class="line">            &lt;div v-else&gt;</div><div class="line">                显示我2</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue =new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    isDisplay: 1</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>输出结果: 显示我1 显示我11 显示我12 显示我13</p>
<h2 id="v-show只支持单元素显示-不支持template标签包含的多元素"><a href="#v-show只支持单元素显示-不支持template标签包含的多元素" class="headerlink" title="v-show只支持单元素显示,不支持template标签包含的多元素"></a>v-show只支持单元素显示,不支持template标签包含的多元素</h2><p>注意else只能跟在v-if或者v-show后面<br>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue条件渲染&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;div v-show=<span class="string">"isDisplay"</span>&gt;   &lt;!--if...else... 单个元素,注意注意 v-show 不支持 &lt;template&gt; 语法--&gt;</div><div class="line">                显示我1</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;div v-else&gt;</div><div class="line">                显示我2</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue =new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    isDisplay: 1</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="v-if与v-show的区别"><a href="#v-if与v-show的区别" class="headerlink" title="v-if与v-show的区别"></a>v-if与v-show的区别</h2><p>(1)v-if是真实的渲染与卸载,只不过第一次渲染后,会将结果缓存一下<br>(2)v-show元素始终被编译并保留，只是简单地基于 CSS 切换<br>(3)总结: 如果需要频繁切换 v-show 较好，如果在运行时条件不大可能改变 v-if 较好</p>
]]></content>
      
        <categories>
            
            <category> vue技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
            <tag> 条件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue中class与style绑定]]></title>
      <url>/2016/06/10/Vue%E4%B8%ADclass%E4%B8%8Estyle%E7%BB%91%E5%AE%9A/</url>
      <content type="html"><![CDATA[<p>class和style绑定的方法很多，本文写下来总结一下：<br>github地址:<a href="https://github.com/manlili/vue_learn" target="_blank" rel="external">https://github.com/manlili/vue_learn里面的lesson07</a></p>
<h2 id="用对象的方法绑定class"><a href="#用对象的方法绑定class" class="headerlink" title="用对象的方法绑定class"></a>用对象的方法绑定class</h2><p>很简单,举个例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;class与style绑定&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;div class=<span class="string">"otherClass"</span> :class=<span class="string">"&#123;'class1':name1,'class2':name2&#125;"</span>&gt;我是文字&lt;/div&gt; &lt;!--法一:用对象的方式实现--&gt;</div><div class="line">        &lt;/div&gt;    </div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el:<span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    name1: <span class="literal">true</span>,</div><div class="line">                    name2: <span class="literal">false</span>,</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>最后实现效果<br><img src="https://manlili.github.io/img/160610/1.png" alt="图"><br>关于使用对象绑定class,还可以用另外一种写法:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;class与style绑定&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;div class=<span class="string">"test"</span> :class=<span class="string">"classObj"</span>&gt;我是文字&lt;/div&gt; &lt;!--法一:用对象的方式实现--&gt;</div><div class="line">        &lt;/div&gt;    </div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el:<span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    classObj: &#123;</div><div class="line">                        name1: <span class="literal">false</span>,</div><div class="line">                        name2: <span class="literal">true</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>最后的实现效果是:<br><img src="https://manlili.github.io/img/160610/2.png" alt="图"></p>
<h2 id="用数组的方法绑定class"><a href="#用数组的方法绑定class" class="headerlink" title="用数组的方法绑定class"></a>用数组的方法绑定class</h2><p>看个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;class与style绑定&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;div class=<span class="string">"otherClass"</span> :class=<span class="string">"[class1,class2]"</span>&gt;我是文字&lt;/div&gt; &lt;!--法二:用数组的方式实现--&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        </div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el:<span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    class1: <span class="string">'name1'</span>,</div><div class="line">                    class2: <span class="string">'name2'</span>,</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>实现效果:<br><img src="https://manlili.github.io/img/160610/3.png" alt="图"><br>其实在数组中还可以用判断是否显示这个类名,举个例子:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;class与style绑定&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;div class=<span class="string">"otherClass"</span> :class=<span class="string">"[class1,isShow? class2:'']"</span>&gt;我是文字&lt;/div&gt; &lt;!--法二:用数组的方式实现--&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        </div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el:<span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    class1: <span class="string">'name1'</span>,</div><div class="line">                    class2: <span class="string">'name2'</span>,</div><div class="line">                    isShow: <span class="literal">false</span></div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>实现效果:<br><img src="https://manlili.github.io/img/160610/4.png" alt="图"></p>
<h2 id="用数组和对象混合的方法绑定class"><a href="#用数组和对象混合的方法绑定class" class="headerlink" title="用数组和对象混合的方法绑定class"></a>用数组和对象混合的方法绑定class</h2><p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;class与style绑定&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;div class=<span class="string">"otherClass"</span> :class=<span class="string">"[class1,&#123;class2: isShow&#125;]"</span>&gt;我是文字&lt;/div&gt; &lt;!--法二:用数组的方式实现--&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        </div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el:<span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    class1: <span class="string">'name1'</span>,</div><div class="line">                    class2: <span class="string">'name2'</span>,</div><div class="line">                    isShow: <span class="literal">true</span></div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>实现效果:<br><img src="https://manlili.github.io/img/160610/5.png" alt="图"></p>
<h2 id="用对象的方式实现style绑定"><a href="#用对象的方式实现style绑定" class="headerlink" title="用对象的方式实现style绑定"></a>用对象的方式实现style绑定</h2><p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;class与style绑定&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;div class=<span class="string">"otherClass"</span> :style=<span class="string">"&#123;color: yanse,width: kuan + 'px' &#125;"</span>&gt;我是文字&lt;/div&gt; &lt;!--法一:用对象的方式实现--&gt;</div><div class="line">        &lt;/div&gt;    </div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el:<span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    yanse: <span class="string">'red'</span>,</div><div class="line">                    kuan: 100,</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>实现效果:<br><img src="https://manlili.github.io/img/160610/6.png" alt="图"><br>其实也可以写为第二种方式:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;class与style绑定&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;div class=<span class="string">"otherClass"</span> :style=<span class="string">"styleObj"</span>&gt;我是文字&lt;/div&gt; &lt;!--法一:用对象的方式实现--&gt;</div><div class="line">        &lt;/div&gt;    </div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el:<span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    styleObj: &#123;</div><div class="line">                        color: <span class="string">'pink'</span>,</div><div class="line">                        width: <span class="string">'200px'</span>,</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>实现结果是:<br><img src="https://manlili.github.io/img/160610/7.png" alt="图"></p>
<h2 id="用数组和对象混合的方式实现style绑定"><a href="#用数组和对象混合的方式实现style绑定" class="headerlink" title="用数组和对象混合的方式实现style绑定"></a>用数组和对象混合的方式实现style绑定</h2><p>举个例子:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;class与style绑定&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;div class=<span class="string">"otherClass"</span> :style=<span class="string">"[styleObjectA,styleObjectB]"</span>&gt;我是文字&lt;/div&gt; &lt;!--法一:用数组和对象的方式实现--&gt;</div><div class="line">        &lt;/div&gt;    </div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el:<span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    styleObjectA: &#123;</div><div class="line">                        color: <span class="string">'red'</span>,</div><div class="line">                        width: <span class="string">'100px'</span>,</div><div class="line">                    &#125;,</div><div class="line">                    styleObjectB: &#123;</div><div class="line">                        top: <span class="string">'20px'</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>实现效果:<br><img src="https://manlili.github.io/img/160610/8.png" alt="图"></p>
<p>上面说了那么多方法，只要选择一个适合自己开发的就可以了。</p>
]]></content>
      
        <categories>
            
            <category> vue技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
            <tag> class </tag>
            
            <tag> style </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue计算属性]]></title>
      <url>/2016/05/23/Vue%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>写一下最近用到的vue计算属性<br>github地址:<a href="https://github.com/manlili/vue_learn" target="_blank" rel="external">https://github.com/manlili/vue_learn里面的lesson06</a></p>
<h2 id="计算属性定位"><a href="#计算属性定位" class="headerlink" title="计算属性定位"></a>计算属性定位</h2><p>当一些数据需要根据其它数据变化时,这时候就需要计算属性</p>
<h2 id="watch实现计算属性"><a href="#watch实现计算属性" class="headerlink" title="$watch实现计算属性"></a>$watch实现计算属性</h2><p>举个例子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;vue计算属性&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            a的值是&#123;&#123;a&#125;&#125;</div><div class="line">            b的值是&#123;&#123;b&#125;&#125;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    a: 1,</div><div class="line">                    b: 0</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            myVue.<span class="variable">$watch</span>(<span class="string">"a"</span>,<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                this.b = this.a+3;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>正常输出时:a的值是1,b的值为0,但是当在控制台输入:<br><img src="https://manlili.github.io/img/160523/1.png" alt="图"><br>说明b的数据是根据a变化而变化的</p>
<h2 id="computed实现计算属性"><a href="#computed实现计算属性" class="headerlink" title="computed实现计算属性"></a>computed实现计算属性</h2><p>上面用$watch可以实现计算属性,但是有点麻烦,首先需要定义b,实例化以后给实例绑定一个$watch方法,下面来看一个更简单的方法实现计算属性<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;vue计算属性&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            a的值是&#123;&#123;a&#125;&#125;</div><div class="line">            b的值是&#123;&#123;b&#125;&#125;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    a: 1</div><div class="line">                &#125;,</div><div class="line">                computed: &#123;</div><div class="line">                    b: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                        <span class="built_in">return</span> this.a+3;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>上面正常的输出是:a的值是1,b的值是4,但是在控制台输入:<br><img src="https://manlili.github.io/img/160523/2.png" alt="图"><br>说明b的数据是根据a变化而变化的</p>
<h2 id="set实现反计算"><a href="#set实现反计算" class="headerlink" title="set实现反计算"></a>set实现反计算</h2><p>多数时候a变化,b跟着a变化,但是有时候我们想让b变化时,a跟着b变化,Vue作者给我们提供了set方法来反计算.<br>举个栗子:(get是b获取值,set是给b赋新值)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;vue计算属性&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            a的值是&#123;&#123;a&#125;&#125;</div><div class="line">            b的值是&#123;&#123;b&#125;&#125;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    a: 1</div><div class="line">                &#125;,</div><div class="line">                computed: &#123;</div><div class="line">                    b:&#123;</div><div class="line">                        get: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                            <span class="built_in">return</span> this.a+3;</div><div class="line">                        &#125;,</div><div class="line">                        <span class="built_in">set</span>: <span class="keyword">function</span> (newValue) &#123;  //参数不能少</div><div class="line">                            this.a = newValue-1;   //a的值变化也会导致b变化</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>上面正常的输出是:a的值是1,b的值是4,但是在控制台输入:<br><img src="https://manlili.github.io/img/160523/3.png" alt="图"></p>
]]></content>
      
        <categories>
            
            <category> vue技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
            <tag> 计算属性 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue过滤器]]></title>
      <url>/2016/05/09/Vue%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>学习一下vue的过滤器<br>github地址:<a href="https://github.com/manlili/vue_learn" target="_blank" rel="external">https://github.com/manlili/vue_learn里面的lesson05</a></p>
<h2 id="Vue自带的过滤器"><a href="#Vue自带的过滤器" class="headerlink" title="Vue自带的过滤器"></a>Vue自带的过滤器</h2><h3 id="过滤器写法"><a href="#过滤器写法" class="headerlink" title="过滤器写法"></a>过滤器写法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; message | Filter&#125;&#125;</div></pre></td></tr></table></figure>
<h3 id="Vue自带的过滤器-capitalize"><a href="#Vue自带的过滤器-capitalize" class="headerlink" title="Vue自带的过滤器:capitalize"></a>Vue自带的过滤器:capitalize</h3><p>功能:首字母大写<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue自带的过滤器&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &#123;&#123;message | capitalize&#125;&#125;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    message: <span class="string">"abc"</span></div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>上面代码输出:Abc</p>
<h3 id="Vue自带的过滤器-uppercase"><a href="#Vue自带的过滤器-uppercase" class="headerlink" title="Vue自带的过滤器:uppercase"></a>Vue自带的过滤器:uppercase</h3><p>功能:全部大写<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue自带的过滤器&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &#123;&#123;message | uppercase&#125;&#125;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    message: <span class="string">"abc"</span></div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>上面代码输出:ABC</p>
<h3 id="Vue自带的过滤器-lowercase"><a href="#Vue自带的过滤器-lowercase" class="headerlink" title="Vue自带的过滤器:lowercase"></a>Vue自带的过滤器:lowercase</h3><p>功能:全部小写<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue自带的过滤器&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &#123;&#123;message | lowercase&#125;&#125;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    message: <span class="string">"ABC"</span></div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>上面代码输出:abc</p>
<h3 id="Vue自带的过滤器-currency"><a href="#Vue自带的过滤器-currency" class="headerlink" title="Vue自带的过滤器:currency"></a>Vue自带的过滤器:currency</h3><p>功能:输出金钱以及小数点<br>参数:<br>第一个参数     {String} [货币符号] - 默认值: ‘$’<br>第二个参数     {Number} [小数位] - 默认值: 2<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue自带的过滤器&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &#123;&#123;message | currency&#125;&#125; &lt;!--输出<span class="variable">$123</span>.47--&gt;</div><div class="line">            &#123;&#123;message | currency <span class="string">'￥'</span> <span class="string">"1"</span>&#125;&#125; &lt;!--输出<span class="variable">$123</span>.5--&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    message: <span class="string">"123.4673"</span></div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Vue自带的过滤器-pluralize"><a href="#Vue自带的过滤器-pluralize" class="headerlink" title="Vue自带的过滤器:pluralize"></a>Vue自带的过滤器:pluralize</h3><p>功能: 如果只有一个参数，复数形式只是简单地在末尾添加一个 “s”。如果有多个参数，参数被当作一个字符串数组，对应一个、两个、三个…复数词。如果值的个数多于参数的个数，多出的使用最后一个参数。<br>参数：{String} single, [double, triple, …<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue自带的过滤器&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">        &#123;&#123;message&#125;&#125;    &#123;&#123;message | pluralize <span class="string">'item'</span>&#125;&#125; &lt;!--输出: 1 item--&gt;</div><div class="line">        </div><div class="line">            &lt;ul v-for=<span class="string">"item in lili"</span>&gt;</div><div class="line">                &lt;li&gt;</div><div class="line">                    &#123;&#123;item&#125;&#125;    &#123;&#123;item | pluralize <span class="string">'item'</span>&#125;&#125; &lt;!--输出: 1    item 2    items 3    items--&gt;</div><div class="line">                &lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">            </div><div class="line">            &lt;ul v-for=<span class="string">"item in lili"</span>&gt;</div><div class="line">                &lt;li&gt;</div><div class="line">                    &#123;&#123;item&#125;&#125;    &#123;&#123;item | pluralize <span class="string">'st'</span> <span class="string">'rd'</span>&#125;&#125; &lt;!--输出: 1    st 2    rd 3    rd--&gt;</div><div class="line">                &lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">            </div><div class="line">            &lt;ul v-for=<span class="string">"item in man"</span>&gt;</div><div class="line">                &lt;li&gt;</div><div class="line">                    &#123;&#123;item&#125;&#125;    &#123;&#123;item | pluralize <span class="string">'item'</span>&#125;&#125; &lt;!--输出: 1    item 2    items 3    items--&gt;</div><div class="line">                &lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">            </div><div class="line">            &lt;ul v-for=<span class="string">"item in man"</span>&gt;</div><div class="line">                &lt;li&gt;</div><div class="line">                    &#123;&#123;item&#125;&#125;    &#123;&#123;item | pluralize <span class="string">'st'</span> <span class="string">'rd'</span>&#125;&#125; &lt;!--输出: 1    st 2    rd 3    rd--&gt;</div><div class="line">                &lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    message: 1,</div><div class="line">                    lili: [1,2,3],</div><div class="line">                    man: &#123;</div><div class="line">                        name1: 1,</div><div class="line">                        name2: 2,</div><div class="line">                        name3: 3</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Vue自带的过滤器-debounce"><a href="#Vue自带的过滤器-debounce" class="headerlink" title="Vue自带的过滤器:debounce"></a>Vue自带的过滤器:debounce</h3><p>(1)限制： 需在@里面使用<br>(2)参数:{Number} [wait] - 默认值： 300<br>(3)功能：包装处理器，让它延迟执行 x ms， 默认延迟 300ms。包装后的处理器在调用之后至少将延迟 x ms， 如果在延迟结束前再次调用，延迟时长重置为 x ms。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue自带的过滤器&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;button id=<span class="string">"btn"</span> @click=<span class="string">"disappear | debounce 10000"</span>&gt;点击我,我将10秒后消失&lt;/button&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                methods: &#123;</div><div class="line">                    disappear: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                        document.getElementById(<span class="string">"btn"</span>).style.display= <span class="string">"none"</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Vue自带的过滤器-limitBy"><a href="#Vue自带的过滤器-limitBy" class="headerlink" title="Vue自带的过滤器:limitBy"></a>Vue自带的过滤器:limitBy</h3><p>(1)限制:需在v-for(即数组)里面使用<br>(2)两个参数:<br>第一个参数:{Number} 取得数量<br>第二个参数:{Number} 偏移量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue自带的过滤器&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;ul v-for=<span class="string">"item in lili | limitBy 10"</span>&gt; &lt;!--输出1 2 3 4 5 6 7 8 9 10--&gt;</div><div class="line">                &lt;li&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">            &lt;ul v-for=<span class="string">"item in lili | limitBy 10 3"</span>&gt; &lt;!--输出 4 5 6 7 8 9 10 11 12 13--&gt;</div><div class="line">                &lt;li&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    lili: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Vue自带的过滤器-filterBy"><a href="#Vue自带的过滤器-filterBy" class="headerlink" title="Vue自带的过滤器:filterBy"></a>Vue自带的过滤器:filterBy</h3><p>(1)限制:需在v-for(即数组)里面使用<br>(2)三个参数:<br>第一个参数: {String | Function} 需要搜索的字符串<br>第二个参数: in (可选,指定搜寻位置)<br>第三个参数: {String} (可选,数组格式)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue自带的过滤器&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;ul v-for=<span class="string">"item in lili | filterBy 'o' "</span>&gt; &lt;!--输出oi oa lo ouo oala--&gt;</div><div class="line">                &lt;li&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">            </div><div class="line">            &lt;ul v-for=<span class="string">"item in man | filterBy 'l' in 'name' "</span>&gt; &lt;!--输出lily lucy--&gt;</div><div class="line">                &lt;li&gt;&#123;&#123;item.name&#125;&#125;&lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">            </div><div class="line">            &lt;ul v-for=<span class="string">"item in man | filterBy 'l' in 'name' 'dada' "</span>&gt; &lt;!--输出lily+undefined lucy+undefined undefined+lsh--&gt;</div><div class="line">                &lt;li&gt;&#123;&#123;item.name+<span class="string">"+"</span>+item.dada&#125;&#125;&lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    lili: [<span class="string">"oi"</span>, <span class="string">"oa"</span>, <span class="string">"ll"</span>, <span class="string">"lo"</span> ,<span class="string">"ouo"</span> ,<span class="string">"kk"</span> ,<span class="string">"oala"</span>],</div><div class="line">                    man: [   //此处注意man是数组,不是对象</div><div class="line">                    &#123;name: <span class="string">"lily"</span>&#125;,</div><div class="line">                    &#123;name: <span class="string">"lucy"</span>&#125;,</div><div class="line">                    &#123;name: <span class="string">"oo"</span>&#125;,</div><div class="line">                    &#123;dada: <span class="string">"lsh"</span>&#125;,</div><div class="line">                    &#123;dada: <span class="string">"ofg"</span>&#125;</div><div class="line">                    ]</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Vue自带的过滤器-orderBy"><a href="#Vue自带的过滤器-orderBy" class="headerlink" title="Vue自带的过滤器:orderBy"></a>Vue自带的过滤器:orderBy</h3><p>(1)限制:需在v-for(即数组)里面使用<br>(2)三个参数:<br>第一个参数: {String | Array<string> | Function} 需要搜索的字符串<br>第二个参数: {String} 可选参数 order 决定结果升序（order &gt;= 0）或降序（order &lt; 0）,默认是升序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;Vue自带的过滤器&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;    </div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;!--遍历数组--&gt;</div><div class="line">            &lt;ul v-for=<span class="string">"item in lili | orderBy 'o' 1"</span>&gt; &lt;!--输出kk ll oi--&gt;</div><div class="line">                &lt;li&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">            </div><div class="line">            &lt;ul v-for=<span class="string">"item in lili | orderBy 'o' -1"</span>&gt; &lt;!--输出oi ll kk--&gt;</div><div class="line">                &lt;li&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">            </div><div class="line">            &lt;!--遍历含对象的数组--&gt;</div><div class="line">            &lt;ul v-for=<span class="string">"item in man | orderBy 'name' 1"</span>&gt; &lt;!--输出Bruce Chuck Jackie--&gt;</div><div class="line">                &lt;li&gt;&#123;&#123;item.name&#125;&#125;&lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">            </div><div class="line">            &lt;ul v-for=<span class="string">"item in man | orderBy 'name' -1"</span>&gt; &lt;!--输出Jackie Chuck Bruce--&gt;</div><div class="line">                &lt;li&gt;&#123;&#123;item.name&#125;&#125;&lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">            </div><div class="line">            &lt;!--使用函数排序--&gt;</div><div class="line">            &lt;ul v-for=<span class="string">"item in man | orderBy ageByTen"</span>&gt; &lt;!--输出Bruce Chuck Jackie--&gt;</div><div class="line">                &lt;li&gt;&#123;&#123;item.name&#125;&#125;&lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    lili: [<span class="string">"oi"</span>, <span class="string">"kk"</span>, <span class="string">"ll"</span>],</div><div class="line">                    man: [   //此处注意man是数组,不是对象</div><div class="line">                  &#123;</div><div class="line">                    name: <span class="string">'Jackie'</span>,</div><div class="line">                    age: 62</div><div class="line">                  &#125;,</div><div class="line">                  &#123;</div><div class="line">                    name: <span class="string">'Chuck'</span>,</div><div class="line">                    age: 76</div><div class="line">                  &#125;,</div><div class="line">                  &#123;</div><div class="line">                    name: <span class="string">'Bruce'</span>,</div><div class="line">                    age: 61</div><div class="line">                  &#125;</div><div class="line">                ]</div><div class="line">                &#125;,</div><div class="line">                methods: &#123;</div><div class="line">                    ageByTen: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                        <span class="built_in">return</span> 1;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></string></p>
<p>上面基本上把vue自带的过滤器过了一遍，上面的代码引入vue.js后都可以直接拷贝看效果。但是项目中我们要按照项目需求来自定义过滤器，仅仅使用vue自带的是远远不够的，下面来看一下自定义的vue过滤器。</p>
<h2 id="Vue自定义过滤器"><a href="#Vue自定义过滤器" class="headerlink" title="Vue自定义过滤器"></a>Vue自定义过滤器</h2><h3 id="自定义过滤器-注册在Vue全局"><a href="#自定义过滤器-注册在Vue全局" class="headerlink" title="自定义过滤器(注册在Vue全局)"></a>自定义过滤器(注册在Vue全局)</h3><p>注意事项:<br>(1)全局方法 Vue.filter() 注册一个自定义过滤器,必须放在Vue实例化前面<br>(2)过滤器函数始终以表达式的值作为第一个参数。带引号的参数视为字符串，而不带引号的参数按表达式计算<br>(3)可以设置两个过滤器参数,前提是这两个过滤器处理的不冲突<br>(4)用户从input输入的数据在回传到model之前也可以先处理<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;vue自定义过滤器&lt;/title&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;p&gt;&#123;&#123;message | sum&#125;&#125;&lt;/p&gt;</div><div class="line">            &lt;p&gt;&#123;&#123;message | cal 10 20&#125;&#125;&lt;/p&gt;  &lt;!--过滤器函数始终以表达式的值作为第一个参数。带引号的参数视为字符串，而不带引号的参数按表达式计算。--&gt;</div><div class="line">            &lt;p&gt;&#123;&#123;message | sum | currency &#125;&#125;&lt;/p&gt; &lt;!--添加两个过滤器,注意不要冲突--&gt;</div><div class="line">            </div><div class="line">            &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> v-model=<span class="string">"message | change"</span>&gt; &lt;!--用户从input输入的数据在回传到model之前也可以先处理--&gt;</div><div class="line">            </div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">        </div><div class="line">//        -----------------------------------------华丽分割线(从model-&gt;view)---------------------------------------</div><div class="line">            Vue.filter(<span class="string">"sum"</span>, <span class="keyword">function</span>(value) &#123;   //全局方法 Vue.filter() 注册一个自定义过滤器,必须放在Vue实例化前面</div><div class="line">                <span class="built_in">return</span> value + 4;</div><div class="line">            &#125;);</div><div class="line">            </div><div class="line">            Vue.filter(<span class="string">'cal'</span>, <span class="keyword">function</span> (value, begin, xing) &#123;   //全局方法 Vue.filter() 注册一个自定义过滤器,必须放在Vue实例化前面</div><div class="line">                <span class="built_in">return</span> value + begin + xing;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">//        -----------------------------------------华丽分割线(从view-&gt;model)---------------------------------------</div><div class="line">            Vue.filter(<span class="string">"change"</span>, &#123;</div><div class="line">                <span class="built_in">read</span>: <span class="keyword">function</span> (value) &#123; // model -&gt; view 在更新 `&lt;input&gt;` 元素之前格式化值</div><div class="line">                    <span class="built_in">return</span> value;</div><div class="line">                &#125;,</div><div class="line">                write: <span class="keyword">function</span> (newVal,oldVal) &#123; // view -&gt; model  在写回数据之前格式化值</div><div class="line">                    console.log(<span class="string">"newVal:"</span>+newVal); </div><div class="line">                    console.log(<span class="string">"oldVal:"</span>+oldVal);</div><div class="line">                    <span class="built_in">return</span> newVal;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    message:12</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            </div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h3 id="自定义过滤器-注册在实例化内部"><a href="#自定义过滤器-注册在实例化内部" class="headerlink" title="自定义过滤器(注册在实例化内部)"></a>自定义过滤器(注册在实例化内部)</h3><p>上面的例子直接注册在Vue全局上面,其他不用这个过滤器的实例也会被迫接受,其实过滤器可以注册在实例内部,仅在使用它的实例里面注册<br>上面的程序改写为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;vue自定义过滤器&lt;/title&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;p&gt;&#123;&#123;message | sum&#125;&#125;&lt;/p&gt;</div><div class="line">            &lt;p&gt;&#123;&#123;message | cal 10 20&#125;&#125;&lt;/p&gt;  &lt;!--过滤器函数始终以表达式的值作为第一个参数。带引号的参数视为字符串，而不带引号的参数按表达式计算。--&gt;</div><div class="line">            &lt;p&gt;&#123;&#123;message | sum | currency &#125;&#125;&lt;/p&gt; &lt;!--添加两个过滤器,注意不要冲突--&gt;</div><div class="line">            </div><div class="line">            &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> v-model=<span class="string">"message | change"</span>&gt; &lt;!--用户从input输入的数据在回传到model之前也可以先处理--&gt;</div><div class="line">            </div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            Vue.filter(<span class="string">"change"</span>, &#123;</div><div class="line">                <span class="built_in">read</span>: <span class="keyword">function</span> (value) &#123; // model -&gt; view 在更新 `&lt;input&gt;` 元素之前格式化值</div><div class="line">                    <span class="built_in">return</span> value;</div><div class="line">                &#125;,</div><div class="line">                write: <span class="keyword">function</span> (newVal,oldVal) &#123; // view -&gt; model  在写回数据之前格式化值</div><div class="line">                    console.log(<span class="string">"newVal:"</span>+newVal); </div><div class="line">                    console.log(<span class="string">"oldVal:"</span>+oldVal);</div><div class="line">                    <span class="built_in">return</span> newVal;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    message:12</div><div class="line">                &#125;,</div><div class="line">                filters: &#123;</div><div class="line">                    sum: <span class="keyword">function</span> (value) &#123;</div><div class="line">                        <span class="built_in">return</span> value + 4;</div><div class="line">                    &#125;,</div><div class="line">                    cal: <span class="keyword">function</span> (value, begin, xing) &#123;</div><div class="line">                        <span class="built_in">return</span> value + begin + xing;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            </div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> vue技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
            <tag> 过滤器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue数据绑定]]></title>
      <url>/2016/04/22/Vue%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</url>
      <content type="html"><![CDATA[<p>学习一下vue的数据绑定<br>github地址:<a href="https://github.com/manlili/vue_learn" target="_blank" rel="external">https://github.com/manlili/vue_learn里面的lesson04</a></p>
<h2 id="双括号用来数据绑定"><a href="#双括号用来数据绑定" class="headerlink" title="双括号用来数据绑定"></a>双括号用来数据绑定</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(1)写法一: &#123;&#123;message&#125;&#125;,这种可以实时响应</div><div class="line">(2)写法二: &#123;&#123;*message&#125;&#125;,单次插值,今后的数据变化就不会再引起插值更新了</div><div class="line">(3)双括号标签也可以用在属性上</div></pre></td></tr></table></figure>
<p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;vue插值&lt;/title&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</div><div class="line">            .lili-xiaoman &#123;</div><div class="line">                color: red;</div><div class="line">            &#125;</div><div class="line">        &lt;/style&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt; &lt;!--这个值可以实时响应--&gt;</div><div class="line">            &lt;p&gt;&#123;&#123;*message&#125;&#125;&lt;/p&gt; &lt;!--单次插值,今后的数据变化就不会再引起插值更新了,例如在控制台写入:myVue.message=123--&gt;</div><div class="line">            &lt;p class=<span class="string">"lili-&#123;&#123;message&#125;&#125;"</span>&gt;双括号标签也可以用在属性上&lt;/p&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    message:<span class="string">"xiaoman"</span></div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>当我在控制台改变message时,带星号的message不会跟着改变值<br><img src="https://manlili.github.io/img/160627/1.png" alt="图"></p>
<h2 id="双括号里面可以为javascript单元表达式"><a href="#双括号里面可以为javascript单元表达式" class="headerlink" title="双括号里面可以为javascript单元表达式"></a>双括号里面可以为javascript单元表达式</h2><p>需要注意的是双括号里面只支持单元表达式<br>比如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; number + 1 &#125;&#125;</div><div class="line">&#123;&#123; ok ? <span class="string">'YES'</span> : <span class="string">'NO'</span> &#125;&#125;</div></pre></td></tr></table></figure></p>
<p>但是不支持<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 这是一个语句，不是一个表达式： --&gt;</div><div class="line">&#123;&#123; var a = 1 &#125;&#125;</div><div class="line"></div><div class="line">&lt;!-- 流程控制也不可以，可改用三元表达式 --&gt;</div><div class="line">&#123;&#123; <span class="keyword">if</span> (ok) &#123; <span class="built_in">return</span> message &#125; &#125;&#125;</div></pre></td></tr></table></figure></p>
<p>完整测试代码如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;vue双括号里面的内容&lt;/title&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;p&gt;&#123;&#123;message+1&#125;&#125;&lt;/p&gt; &lt;!--JavaScript 表达式,但是只支持单元表达式--&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    message:12</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            </div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>上面的输出是13</p>
<h2 id="双括号可以放过滤器"><a href="#双括号可以放过滤器" class="headerlink" title="双括号可以放过滤器"></a>双括号可以放过滤器</h2><p>关于过滤器，我们可以先看下写法，后面会专门写一遍文章细细讲解。<br>测试代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;vue数据绑定&lt;/title&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;p&gt;&#123;&#123;message | sum&#125;&#125;&lt;/p&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            Vue.filter(<span class="string">"sum"</span>, <span class="keyword">function</span>(value) &#123;   //全局方法 Vue.filter() 注册一个自定义过滤器,必须放在Vue实例化前面</div><div class="line">                <span class="built_in">return</span> value + 4;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    message: 12</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            </div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>上面代码的输出值是16</p>
<h2 id="用指令绑定数据"><a href="#用指令绑定数据" class="headerlink" title="用指令绑定数据"></a>用指令绑定数据</h2><p>指令 是特殊的带有前缀 v- 的特性。<br>举个v-if的例子:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;vue数据绑定&lt;/title&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;p v-if=<span class="string">"isShow"</span>&gt;isShow控制着我是否显示1&lt;/p&gt;</div><div class="line">            &lt;p v-if=<span class="string">"!isShow"</span>&gt;isShow控制着我是否显示2&lt;/p&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    isShow: <span class="literal">true</span>,</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>上面只显示第一个div</p>
<h2 id="v-bind绑定数据"><a href="#v-bind绑定数据" class="headerlink" title="v-bind绑定数据"></a>v-bind绑定数据</h2><p>需要注意事项:<br>(1) 直接在属性里面写双括号里面也是正确的,因为Vue内部渲染的时候会把属性里面的双括号转为v-bind,这样会比直接用v-bind效率效率稍微慢一点<br>(2) v-bind可简写为 :<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;vue数据绑定&lt;/title&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;a href=&#123;&#123;url&#125;&#125;&gt;点击我跳到百度首页&lt;/a&gt; &lt;!--这种写法没错,实际上在内部特性插值会转为 v-bind 绑定,这样会稍微降低效率--&gt;</div><div class="line">            &lt;a v-bind:href=<span class="string">"url"</span>&gt;点击我跳到百度首页&lt;/a&gt;  &lt;!--简写为:href--&gt;</div><div class="line">            </div><div class="line">            &lt;div style=<span class="string">"color: &#123;&#123;colorA&#125;&#125;"</span>&gt;我是红色&lt;/div&gt; &lt;!--这种写法没错,实际上在内部特性插值会转为 v-bind 绑定,这样会稍微降低效率--&gt;</div><div class="line">            &lt;div v-bind:style=<span class="string">"&#123;color: colorB&#125;"</span>&gt;我是绿色&lt;/div&gt; &lt;!--简写为:style--&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    url: <span class="string">"https://www.baidu.com/"</span>,</div><div class="line">                    colorA: <span class="string">'red'</span>,</div><div class="line">                    colorB: <span class="string">'green'</span> </div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="v-on绑定数据"><a href="#v-on绑定数据" class="headerlink" title="v-on绑定数据"></a>v-on绑定数据</h2><p>(1) v-on是在vue的methods里面实现的<br>(2) v-on可以简写为 @<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;vue数据绑定&lt;/title&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;button v-on:click=<span class="string">"goAction()"</span>&gt; &lt;!--可以简写为@click--&gt;</div><div class="line">                点击我跳到百度</div><div class="line">            &lt;/button&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                methods: &#123;</div><div class="line">                    goAction: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                        location.href = <span class="string">"https://www.baidu.com/"</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> vue技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
            <tag> 生命周期 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue实例和方法]]></title>
      <url>/2016/04/14/Vue%E5%AE%9E%E4%BE%8B%E5%92%8C%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>今天继续学习Vue实例和方法，写了几个测试例子，记点笔记。<br>gitHub地址:github地址:<a href="https://github.com/manlili/vue_learn" target="_blank" rel="external">https://github.com/manlili/vue_learn里面的lesson03</a></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>每个 Vue 实例都会代理其 data 对象里所有的属性,改变data,vue实例同时改变,当然改变vue实例,data也同时改变,即   vue实例&lt;=&gt;data<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;vue实例与方法&lt;/title&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &#123;&#123;a&#125;&#125;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var data = &#123;</div><div class="line">                a: 1</div><div class="line">            &#125;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: data</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>在console控制台操作是:(其中每种颜色框起来的代码都是一组改变)<br><img src="https://manlili.github.io/img/160414/1.png" alt="图"></p>
<h2 id="实例数据如何被追踪变化"><a href="#实例数据如何被追踪变化" class="headerlink" title="实例数据如何被追踪变化"></a>实例数据如何被追踪变化</h2><p>注意只有这些被代理的属性是响应的。如果在实例创建之后添加新的属性到实例上，它不会触发视图更新.那么就要讲下实例数据如何被追踪变化<br>把一个普通对象传给 Vue 实例作为它的 data 选项，Vue.js 将遍历它的属性，用Object.defineProperty 将它们转为 getter/setter,在内部它们让 Vue.js 追踪依赖，在属性被访问和修改时通知变化,<br>举个例子:(我们访问接口时返回的数据通常是get和set)<br><img src="https://manlili.github.io/img/160414/2.png" alt="图"></p>
<p>那么来了解一下追踪原理:<br><img src="https://manlili.github.io/img/160414/3.png" alt="图"><br>上图描述的是:模板中每个指令/数据绑定都有一个对应的 watcher 对象，在计算过程中它把属性记录为依赖。之后当依赖的 setter 被调用时，会触发 watcher 重新计算 ，也就会导致它的关联指令更新 DOM。</p>
<p>那么我们如果在实例化后给数据添加一个属性,由于ES5的限制,Vue.js 不能检测到对象属性的添加或删除,实际上vue的做法是初始化实例时将属性转为 getter/setter，这时已经开始了监控数据变化,所以数据是响应的,但是后来添加进去的属性就没办法转化为getter/setter.</p>
<p>举个例子,还是上面那段代码:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;vue实例与方法&lt;/title&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &#123;&#123;a&#125;&#125;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var data = &#123;</div><div class="line">                a: 1</div><div class="line">            &#125;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: data</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>在控制台新添加b和c两个新属性,如下:<br><img src="https://manlili.github.io/img/160414/4.png" alt="图"></p>
<p> 但是vue的作者还是想办法实现了在实例创建之后添加属性并且让它是响应的,但是不推荐,先来看一下做法:<br>(1)方式一:对于 Vue 实例，可以使用 $set(key, value) 实例方法<br><img src="https://manlili.github.io/img/160414/5.png" alt="图"></p>
<p>(2)方式二：对于普通数据对象，可以使用全局方法 Vue.set(object, key, value)<br><img src="https://manlili.github.io/img/160414/6.png" alt="图"></p>
<p>既然vue的作者已经提供了实例化后添加新属性并让它成为实时响应的,那为什么还不推荐使用?<br>(1)data 对象就像组件状态的模式（schema）。在它上面声明所有的属性让组件代码更易于理解。<br>(2)添加一个顶级响应属性会强制所有的 watcher 重新计算，因为它之前不存在，没有 watcher 追踪它。这么做性能通常是可以接受的，但是可以在初始化时避免。</p>
]]></content>
      
        <categories>
            
            <category> vue技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
            <tag> vue实例 </tag>
            
            <tag> vue方法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue生命周期]]></title>
      <url>/2016/04/06/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<p>项目马上就要用到vue技术，趁着最近有空学一下吧，写点笔记，方便以后复习。github地址:<a href="https://github.com/manlili/vue_learn" target="_blank" rel="external">https://github.com/manlili/vue_learn里面的lesson02</a></p>
<h2 id="vue的生命周期"><a href="#vue的生命周期" class="headerlink" title="vue的生命周期"></a>vue的生命周期</h2><p>如下图所示<br><img src="https://manlili.github.io/img/160530/1.png" alt="图"><br>上图不需要解释了，一目了然。</p>
<h2 id="vue生命周期的代码"><a href="#vue生命周期的代码" class="headerlink" title="vue生命周期的代码"></a>vue生命周期的代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;vue生命周期&lt;/title&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span>&gt;&lt;/script&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span> style=<span class="string">"border: 1px black dashed;padding: 8px;"</span>&gt;</div><div class="line">            &#123;&#123;a&#125;&#125;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div class=<span class="string">"test2"</span> style=<span class="string">"border: 1px red solid;margin-top: 10px;padding: 8px;"</span>&gt;</div><div class="line">            我是内容二</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var myVue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,</div><div class="line">                data: &#123;</div><div class="line">                    a: <span class="string">"我是内容,在控制台输入myVue.a=123456,可以改变我的值"</span></div><div class="line">                &#125;,</div><div class="line">                created: <span class="function"><span class="title">function</span></span> () &#123; </div><div class="line">                    //在实例创建之后同步调用。此时实例已经结束解析选项，这意味着已建立：数据绑定，计算属性，方法，watcher/事件回调。</div><div class="line">                    //但是还没有开始 DOM 编译，<span class="variable">$el</span> 还不存在,但是实例存在,即this.a存在,可打印出来 。</div><div class="line">                    console.log(<span class="string">"建立"</span>);</div><div class="line">                &#125;,</div><div class="line">                beforeCompile: <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                    console.log(<span class="string">"未开始编译"</span>);</div><div class="line">                &#125;,</div><div class="line">                compiled: <span class="function"><span class="title">function</span></span> () &#123; </div><div class="line">                    //在编译结束后调用。此时所有的指令已生效，因而数据的变化将触发 DOM 更新。但是不担保 <span class="variable">$el</span> 已插入文档。</div><div class="line">                    console.log(<span class="string">"编译完成"</span>);</div><div class="line">                &#125;,</div><div class="line">                ready: <span class="function"><span class="title">function</span></span> () &#123; </div><div class="line">                    //在编译结束和 <span class="variable">$el</span> 第一次插入文档之后调用，如在第一次 attached 钩子之后调用。注意必须是由 Vue 插入（如 vm.<span class="variable">$appendTo</span>() 等方法或指令更新）才触发 ready 钩子。</div><div class="line">                    console.log(<span class="string">"一切准备好了"</span>);</div><div class="line">                &#125;,</div><div class="line">                attached :<span class="function"><span class="title">function</span></span> () &#123;  //myVue.<span class="variable">$appendTo</span>(<span class="string">".test2"</span>)暂时触发不了,不知道怎么解决</div><div class="line">                    //在 vm.<span class="variable">$el</span> 插入 DOM 时调用。必须是由指令或实例方法（如 <span class="variable">$appendTo</span>()）插入，直接操作 vm.<span class="variable">$el</span> 不会 触发这个钩子。</div><div class="line">                    console.log(<span class="string">"插入DOM成功"</span>);</div><div class="line">                &#125;,</div><div class="line">                detached :<span class="function"><span class="title">function</span></span> () &#123; //触发事件 myVue.<span class="variable">$destroy</span>(<span class="literal">true</span>),其中参数<span class="literal">true</span>控制是否删除DOM节点或者myVue.<span class="variable">$remove</span>()</div><div class="line">                    //在 vm.<span class="variable">$el</span> 从 DOM 中删除时调用。必须是由指令或实例方法删除，直接操作 vm.<span class="variable">$el</span> 不会 触发这个钩子。</div><div class="line">                    console.log(<span class="string">"删除DOM成功"</span>);</div><div class="line">                &#125;,</div><div class="line">                beforeDestroy: <span class="function"><span class="title">function</span></span> () &#123;  //触发方式,在console里面打myVue.<span class="variable">$destroy</span>();</div><div class="line">                    //在开始销毁实例时调用。此时实例仍然有功能。</div><div class="line">                    console.log(<span class="string">"销毁前"</span>);</div><div class="line">                &#125;,</div><div class="line">                destroyed: <span class="function"><span class="title">function</span></span> () &#123;   //触发方式,在console里面打myVue.<span class="variable">$destroy</span>();其中myVue.<span class="variable">$destroy</span>(<span class="literal">true</span>)是删除DOM节点,会触发detached函数,但是实例仍然存在</div><div class="line">                    //在实例被销毁之后调用。此时所有的绑定和实例的指令已经解绑，注意是解绑不是销毁,所有的子实例也已经被销毁。</div><div class="line">                    console.log(<span class="string">"已销毁"</span>);</div><div class="line">                &#125;</div><div class="line">        &#125;);</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><strong>注意触发vue的created事件以后,this便指向vue实例,这点很重要</strong></p>
<p>将上面代码贴入后,在chrome控制台进行控制,刚开始载入页面的时候触发的事件是:<br><img src="https://manlili.github.io/img/160530/2.png" alt="图"></p>
<p>在控制台触发detached 事件如下(注意DOM已删除,但是实例仍然存在):<br><img src="https://manlili.github.io/img/160530/3.png" alt="图"></p>
<p> 在控制台触发beforeDestroy和destroyed事件如下:(注意destroyed事件触发后,是解绑实例,不是删除实例)<br> <img src="https://manlili.github.io/img/160530/4.png" alt="图"></p>
]]></content>
      
        <categories>
            
            <category> vue技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
            <tag> 生命周期 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[chrome 调试 SASS]]></title>
      <url>/2016/03/31/chrome-%E8%B0%83%E8%AF%95-SASS/</url>
      <content type="html"><![CDATA[<p>第一步: 执行sass预编译命令<br>先来我的项目文件夹结构:<br><img src="https://manlili.github.io/img/160331/1.png" alt="图"><br>-&gt;进入sass /css文件下-&gt;打开cmd命令 -&gt;输入sass –watch –scss  test.scss:test.css     如下图:-&gt;<br><img src="https://manlili.github.io/img/160331/2.png" alt="图"><br>进入sass项目发现文件多了test.css.map和test.css两个文件夹,如下图:<br><img src="https://manlili.github.io/img/160331/3.png" alt="图"><br>这里生成的test.css.map是chrome调试的关键 -&gt;<br>打开chrome F12开发者工具 -&gt;输入项目地址,来配置一下chrome,使它支持map调试:<br><img src="https://manlili.github.io/img/160331/4.png" alt="图"><br>-&gt;下一步 勾选Enable CSS source maps<br><img src="https://manlili.github.io/img/160331/5.png" alt="图"><br>-&gt;如下图(查看图中的注意事项):<br>在source里面打开css/test.scss文件<br><img src="https://manlili.github.io/img/160331/6.png" alt="图"><br>但是我们在chrome上面更改了test.scss内容却无法保存,左上角总是出现黄色叹号提示,如下图:<br><img src="https://manlili.github.io/img/160331/7.png" alt="图"><br>那么来看一下怎么把它加入工作区,也就是它原本在项目中存在的位置<br><img src="https://manlili.github.io/img/160331/8.png" alt="图"><br>-&gt; 然后chrome会请求获取这个文件的操作权限,点击容许就可以了 -&gt;发现source下方多了css文件夹,这样test.scss就和你本地的项目中的test.scss关联上了<br><img src="https://manlili.github.io/img/160331/9.png" alt="图"><br>同时需要注意是你编辑器里面的代码也跟着变了,如下图:<br><img src="https://manlili.github.io/img/160331/10.png" alt="图"><br>也就是说,你更改chrome里面的test.scss,本地test.scss也会跟着变.<br>差不多就把调试步骤说完了,当然chome浏览器一直在更新对SASS的支持,可能后面的设置就不会那么麻烦了,所以上面的步骤仅供参考.</p>
]]></content>
      
        <categories>
            
            <category> sass技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> sass </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SASS高级语法]]></title>
      <url>/2016/03/30/SASS%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>github地址:[<a href="https://github.com/manlili/sass" target="_blank" rel="external">https://github.com/manlili/sass</a>]</p>
<p>用到的sass语法是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass --watch test.scss:test.css --style expanded</div></pre></td></tr></table></figure></p>
<h2 id="SASS高级语法"><a href="#SASS高级语法" class="headerlink" title="SASS高级语法"></a>SASS高级语法</h2><h3 id="导入外部文件-缺省文件后缀默认是sass-scss文件-一般在头部声明"><a href="#导入外部文件-缺省文件后缀默认是sass-scss文件-一般在头部声明" class="headerlink" title="导入外部文件,缺省文件后缀默认是sass/scss文件,一般在头部声明"></a>导入外部文件,缺省文件后缀默认是sass/scss文件,一般在头部声明</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@import <span class="string">"lili.scss"</span>;  //导入一个文件</div><div class="line">@import <span class="string">"lili.scss"</span>, <span class="string">"haha.scss"</span>; //导入两个文件 </div><div class="line">/*但在以下情况下， 仅作为普通的 CSS @import 规则语句，不会导入任何 Sass 文件。</div><div class="line">*(1) 如果文件的扩展名是 .css。</div><div class="line">*(2) 如果文件名以 http:// 开始。</div><div class="line">*(3) 如果文件名是 url()</div><div class="line">*(4)如果@import 中包含任何的媒体查询（media queries)</div><div class="line">*/</div><div class="line">@import <span class="string">"lili.css"</span>;</div><div class="line">@import <span class="string">"http://foo.com/bar"</span>;</div><div class="line">@import url(lili);</div><div class="line">@import <span class="string">"lili"</span> screen;</div><div class="line"></div><div class="line">/*在import里面插入动态变量,但是仅适用于url方式*/</div><div class="line"><span class="variable">$name</span>:family;</div><div class="line">@import url(<span class="string">"http://fonts.googleapis.com/css?family=#&#123;<span class="variable">$name</span>&#125;"</span>);</div><div class="line"></div><div class="line">/*导入scss文件,却不需要将它编译为css文件做法:</div><div class="line"> *(1)新建一个文件夹,为了将不需要编译的文件和需要编译的文件分开,这点千万注意</div><div class="line"> *(2)在已经建好的文件夹里面,将不要编译的*.scss文件命名为_*.scss</div><div class="line"> *(3)导入的时候不要用下划线,直接@import(<span class="string">"新建文件夹名字/*.scss"</span>)</div><div class="line"> */</div></pre></td></tr></table></figure></p>
<p>其中lili.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.test1 &#123;</div><div class="line">    color: black;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中haha.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.test11 &#123;</div><div class="line">    color: deeppink;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@import url(lili.css);</div><div class="line">@import <span class="string">"http://foo.com/bar"</span>;</div><div class="line">@import url(lili);</div><div class="line">@import <span class="string">"lili"</span> screen;</div><div class="line">@import url(<span class="string">"http://fonts.googleapis.com/css?family=family"</span>);</div><div class="line">.test1 &#123;</div><div class="line">  color: black;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.test1 &#123;</div><div class="line">  color: black;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.test11 &#123;</div><div class="line">  color: deeppink;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="extend函数-不只继承类名选择器的样式-还继承与它相关的样式-包括继承它的父选择器"><a href="#extend函数-不只继承类名选择器的样式-还继承与它相关的样式-包括继承它的父选择器" class="headerlink" title="extend函数,不只继承类名选择器的样式,还继承与它相关的样式,包括继承它的父选择器"></a>extend函数,不只继承类名选择器的样式,还继承与它相关的样式,包括继承它的父选择器</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.test2 &#123;</div><div class="line">  border: 1px <span class="comment">#f00;</span></div><div class="line">  background-color: <span class="comment">#fdd;</span></div><div class="line">&#125;</div><div class="line">.test2.test21 &#123;</div><div class="line">  background-image: url(<span class="string">"/image/hacked.png"</span>);</div><div class="line">&#125;</div><div class="line">.test2 .test22 &#123;</div><div class="line">  background-image: url(<span class="string">"/image/haha.png"</span>);</div><div class="line">&#125;</div><div class="line">html .test2 &#123;</div><div class="line">  width: 100px;</div><div class="line">&#125;</div><div class="line">.lili &#123;</div><div class="line">  @extend .test2;</div><div class="line">  border-width: 3px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">.test2, .lili &#123;</div><div class="line">  border: 1px <span class="comment">#f00;</span></div><div class="line">  background-color: <span class="comment">#fdd;</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line">.test2.test21, .test21.lili &#123;</div><div class="line">  background-image: url(<span class="string">"/image/hacked.png"</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">.test2 .test22, .lili .test22 &#123;</div><div class="line">  background-image: url(<span class="string">"/image/haha.png"</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">html .test2, html .lili &#123;</div><div class="line">  width: 100px;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">.lili &#123;</div><div class="line">  border-width: 3px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="extend函数-继承单元素选择器样式-同时继承与它相关的样式-包括继承它的父选择器"><a href="#extend函数-继承单元素选择器样式-同时继承与它相关的样式-包括继承它的父选择器" class="headerlink" title="extend函数,继承单元素选择器样式,同时继承与它相关的样式,包括继承它的父选择器"></a>extend函数,继承单元素选择器样式,同时继承与它相关的样式,包括继承它的父选择器</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">a:hover &#123;</div><div class="line">    color: green;</div><div class="line">&#125;</div><div class="line">a.class1:hover &#123;</div><div class="line">    height: 10px;</div><div class="line">&#125;</div><div class="line">html a:hover &#123;</div><div class="line">    width: 10px;</div><div class="line">&#125;</div><div class="line">.test3 &#123;</div><div class="line">    @extend a:hover;</div><div class="line">    width: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">a:hover, .test3 &#123;</div><div class="line">  color: green;</div><div class="line">&#125;</div><div class="line"></div><div class="line">a.class1:hover, .class1.test3 &#123;</div><div class="line">  height: 10px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">html a:hover, html .test3 &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.test3 &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="extend中链式扩展"><a href="#extend中链式扩展" class="headerlink" title="extend中链式扩展"></a>extend中链式扩展</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.test4 &#123;</div><div class="line">    width:20px;</div><div class="line">&#125;</div><div class="line">.test41 &#123;</div><div class="line">    @extend .test4;</div><div class="line">    height: 20px;</div><div class="line">&#125;</div><div class="line">.test42 &#123;</div><div class="line">    @extend .test41;</div><div class="line">    top:20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.test4, .test41, .test42 &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.test41, .test42 &#123;</div><div class="line">  height: 20px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.test42 &#123;</div><div class="line">  top: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="占位符-不会被编译到css里面"><a href="#占位符-不会被编译到css里面" class="headerlink" title="占位符%,%不会被编译到css里面"></a>占位符%,%不会被编译到css里面</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.test5 a%name &#123;</div><div class="line">    width: 100px;</div><div class="line">&#125;</div><div class="line">.lili &#123;</div><div class="line">    height: 200%;</div><div class="line">    @extend %name;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.test5 a.lili &#123;</div><div class="line">  width: 100px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.lili &#123;</div><div class="line">  height: 200%;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="extend中防止继承不存在的样式出错-用-optional直接跳过空样式"><a href="#extend中防止继承不存在的样式出错-用-optional直接跳过空样式" class="headerlink" title="extend中防止继承不存在的样式出错,用!optional直接跳过空样式"></a>extend中防止继承不存在的样式出错,用!optional直接跳过空样式</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.test6 &#123;</div><div class="line">    @extend noexist!optional;</div><div class="line">    height: 100px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.test6 &#123;</div><div class="line">  height: 100px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="at-root指令导致一个或多个规则被限定输出在文档的根层级上，而不是被嵌套在其父选择器下"><a href="#at-root指令导致一个或多个规则被限定输出在文档的根层级上，而不是被嵌套在其父选择器下" class="headerlink" title="@at-root指令导致一个或多个规则被限定输出在文档的根层级上，而不是被嵌套在其父选择器下"></a>@at-root指令导致一个或多个规则被限定输出在文档的根层级上，而不是被嵌套在其父选择器下</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.test7 &#123;</div><div class="line">    height: 20px;</div><div class="line">    @at-root &#123;</div><div class="line">        .children1 &#123;</div><div class="line">            color: red;</div><div class="line">        &#125;</div><div class="line">        .children2 &#123;</div><div class="line">            color: black;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.test7 &#123;</div><div class="line">  height: 20px;</div><div class="line">&#125;</div><div class="line">.children1 &#123;</div><div class="line">  color: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.children2 &#123;</div><div class="line">  color: black;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="at-root-without-类名-将选择器移动到嵌套指令之外"><a href="#at-root-without-类名-将选择器移动到嵌套指令之外" class="headerlink" title="@at-root(without:类名)将选择器移动到嵌套指令之外"></a>@at-root(without:类名)将选择器移动到嵌套指令之外</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.gaga &#123;</div><div class="line">    @media name &#123;</div><div class="line">      .page &#123;</div><div class="line">        width: 8px;</div><div class="line">        @at-root (without: media) &#123;  //注意此处目前测试是不支持类名的,比如.test8</div><div class="line">          color: red;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@media name &#123;</div><div class="line">  .gaga .page &#123;</div><div class="line">    width: 8px;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">.gaga .page &#123;</div><div class="line">  color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="if条件判断-注意不支持if…else…"><a href="#if条件判断-注意不支持if…else…" class="headerlink" title="if条件判断,注意不支持if…else…"></a>if条件判断,注意不支持if…else…</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">.test8 &#123;   //if...if..</div><div class="line">    @<span class="keyword">if</span> 1+1 == 2 &#123;</div><div class="line">        width: 20px;</div><div class="line">    &#125;</div><div class="line">    @<span class="keyword">if</span> 5 &lt; 3 &#123;</div><div class="line">        width: 100px;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">.test81 &#123;  //if...else if...</div><div class="line">    @<span class="keyword">if</span> 1+1 != 2 &#123;</div><div class="line">        width: 20px;</div><div class="line">    &#125;</div><div class="line">    @<span class="keyword">else</span> <span class="keyword">if</span> 5 &gt; 3 &#123;</div><div class="line">        width: 100px;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">.test82 &#123;  //if...else if...else...</div><div class="line">    @<span class="keyword">if</span> 1+1 != 2 &#123;</div><div class="line">        width: 20px;</div><div class="line">    &#125;</div><div class="line">    @<span class="keyword">else</span> <span class="keyword">if</span> 5 &lt; 3 &#123; </div><div class="line">        width: 100px;</div><div class="line">    &#125;</div><div class="line">    @<span class="keyword">else</span> &#123;</div><div class="line">        width: 10px;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.test8 &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.test81 &#123;</div><div class="line">  width: 100px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.test82 &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//第一种格式 @<span class="keyword">for</span> <span class="variable">$var</span> from &lt;start&gt; through &lt;end&gt;,注意范围包括&lt;start&gt;和&lt;end&gt;的值</div><div class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 through 3 &#123;</div><div class="line">    .gray<span class="comment">#&#123;$i*3&#125; &#123;</span></div><div class="line">        color: <span class="comment">#333*$i; </span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//第二种格式 @<span class="keyword">for</span> <span class="variable">$var</span> from &lt;start&gt; to &lt;end&gt;,注意范围从&lt;start&gt;开始运行，但不包括&lt;end&gt;的值</div><div class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 to 4 &#123;</div><div class="line">    .gray2<span class="comment">#&#123;$i*3&#125; &#123;</span></div><div class="line">        color: <span class="comment">#333*$i; </span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">.gray3 &#123;</div><div class="line">  color: <span class="comment">#333333;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">.gray6 &#123;</div><div class="line">  color: <span class="comment">#666666;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">.gray9 &#123;</div><div class="line">  color: <span class="comment">#999999;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">.gray23 &#123;</div><div class="line">  color: <span class="comment">#333333;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">.gray26 &#123;</div><div class="line">  color: <span class="comment">#666666;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">.gray29 &#123;</div><div class="line">  color: <span class="comment">#999999;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="each循环语句-each-var-in"><a href="#each循环语句-each-var-in" class="headerlink" title="each循环语句  @each $var in "></a>each循环语句  @each $var in <list or="" map=""></list></h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>:<span class="string">"lili"</span>,<span class="string">"yaya"</span>,<span class="string">"sansa"</span>;  //注意数组list的写法</div><div class="line">@each <span class="variable">$i</span> <span class="keyword">in</span> <span class="variable">$name</span> &#123;</div><div class="line">    <span class="built_in">test</span>9.<span class="comment">#&#123;$i&#125; &#123;</span></div><div class="line">        width: 10px;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="variable">$name2</span>:(name21:<span class="string">"lili"</span>,name22:<span class="string">"yaya"</span>,name23:<span class="string">"sansa"</span>);  //注意对象map的写法</div><div class="line">@each <span class="variable">$i</span> <span class="keyword">in</span> <span class="variable">$name2</span> &#123;</div><div class="line">    <span class="built_in">test</span>9.<span class="comment">#&#123;$i&#125; &#123;</span></div><div class="line">        width: 10px;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="variable">$name3</span>:(name31:1,name32:2,name33:3);  //注意对象map的写法</div><div class="line">@each <span class="variable">$key</span>,<span class="variable">$value</span> <span class="keyword">in</span> <span class="variable">$name3</span> &#123;</div><div class="line">    <span class="built_in">test</span>9.<span class="comment">#&#123;$key&#125; &#123;</span></div><div class="line">        width: 10px*<span class="variable">$value</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">test</span>9.lili &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="built_in">test</span>9.yaya &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="built_in">test</span>9.sansa &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="built_in">test</span>9.name21 lili &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="built_in">test</span>9.name22 yaya &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="built_in">test</span>9.name23 sansa &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="built_in">test</span>9.name31 &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="built_in">test</span>9.name32 &#123;</div><div class="line">  width: 20px;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="built_in">test</span>9.name33 &#123;</div><div class="line">  width: 30px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$i</span>:3;</div><div class="line">@<span class="keyword">while</span> <span class="variable">$i</span> &gt; 0 &#123;</div><div class="line">    .gray<span class="comment">#&#123;$i&#125; &#123;</span></div><div class="line">        color: <span class="comment">#333*$i;</span></div><div class="line">    &#125;</div><div class="line">    <span class="variable">$i</span>:<span class="variable">$i</span> - 1; //注意此处不能写成<span class="variable">$i</span>:<span class="variable">$i</span>-1,因为会被当成字符串</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.gray3 &#123;</div><div class="line">  color: <span class="comment">#999999;</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line">.gray2 &#123;</div><div class="line">  color: <span class="comment">#666666;</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line">.gray1 &#123;</div><div class="line">  color: <span class="comment">#333333;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="混入指令-实现代码块复用"><a href="#混入指令-实现代码块复用" class="headerlink" title="混入指令,实现代码块复用"></a>混入指令,实现代码块复用</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">@mixin left01 &#123;  //不带参数</div><div class="line">    <span class="built_in">float</span>: left;</div><div class="line">&#125;</div><div class="line">.test10 &#123;</div><div class="line">    @include left01;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">@mixin left02(<span class="variable">$left</span>) &#123;  //带1个参数</div><div class="line">    <span class="built_in">float</span>: <span class="variable">$left</span>;</div><div class="line">&#125;</div><div class="line">.test101 &#123;</div><div class="line">    @include left02(left);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">@mixin left03(<span class="variable">$left</span>,<span class="variable">$width</span>) &#123;  //带2个参数,或者说参数为数组</div><div class="line">    <span class="built_in">float</span>: <span class="variable">$left</span>;</div><div class="line">    .lili &#123;</div><div class="line">        width: <span class="variable">$width</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">.test102 &#123;</div><div class="line">    @include left03(left,100px);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">@mixin left04(<span class="variable">$name31</span>,<span class="variable">$name32</span>,<span class="variable">$name33</span>) &#123;  //参数为对象,但是接受传递的参数必须是对象相对应key,同时需要用...传递参数</div><div class="line">    .lili &#123;</div><div class="line">        width: <span class="variable">$name31</span>;</div><div class="line">        height: <span class="variable">$name32</span>;</div><div class="line">        top: <span class="variable">$name33</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="variable">$map</span>:(name31:<span class="string">"1px"</span>,name32:<span class="string">"2px"</span>,name33:<span class="string">"3px"</span>);</div><div class="line">.test103 &#123;</div><div class="line">    @include left04(<span class="variable">$map</span>...);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">@mixin left05(<span class="variable">$left</span>:right) &#123;  //带默认参数,不传参的话就用默认参数</div><div class="line">    <span class="built_in">float</span>: <span class="variable">$left</span>;</div><div class="line">&#125;</div><div class="line">.test104 &#123;</div><div class="line">    @include left05;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">@mixin box-shadow(<span class="variable">$shadows</span>...) &#123;  //不定参数,用...</div><div class="line">      -moz-box-shadow: <span class="variable">$shadows</span>;</div><div class="line">      -webkit-box-shadow: <span class="variable">$shadows</span>;</div><div class="line">      box-shadow: <span class="variable">$shadows</span>;</div><div class="line">&#125;</div><div class="line">.shadows &#123;</div><div class="line">  @include box-shadow(0px 4px 5px <span class="comment">#666, 2px 6px 10px #999);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">.test10 &#123;</div><div class="line">  <span class="built_in">float</span>: left;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">.test101 &#123;</div><div class="line">  <span class="built_in">float</span>: left;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">.test102 &#123;</div><div class="line">  <span class="built_in">float</span>: left;</div><div class="line">&#125;</div><div class="line">.test102 .lili &#123;</div><div class="line">  width: 100px;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">.test103 .lili &#123;</div><div class="line">  width: <span class="string">"1px"</span>;</div><div class="line">  height: <span class="string">"2px"</span>;</div><div class="line">  top: <span class="string">"3px"</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">.test104 &#123;</div><div class="line">  <span class="built_in">float</span>: right;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">.shadows &#123;</div><div class="line">  -moz-box-shadow: 0px 4px 5px <span class="comment">#666, 2px 6px 10px #999;</span></div><div class="line">  -webkit-box-shadow: 0px 4px 5px <span class="comment">#666, 2px 6px 10px #999;</span></div><div class="line">  box-shadow: 0px 4px 5px <span class="comment">#666, 2px 6px 10px #999;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="传递内容块-content到混入-传递到-content位置"><a href="#传递内容块-content到混入-传递到-content位置" class="headerlink" title="传递内容块@content到混入,传递到@content位置"></a>传递内容块@content到混入,传递到@content位置</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@mixin lala &#123;</div><div class="line">    html &#123;</div><div class="line">        color: <span class="comment">#888;</span></div><div class="line">        @content;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@include lala &#123;  //此处名字必须和上面保持一致</div><div class="line">    .logo &#123;</div><div class="line">        font-size: 15px;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">  color: <span class="comment">#888;</span></div><div class="line">&#125;</div><div class="line">html .logo &#123;</div><div class="line">  font-size: 15px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="变量在混入-mixin的作用域"><a href="#变量在混入-mixin的作用域" class="headerlink" title="变量在混入@mixin的作用域"></a>变量在混入@mixin的作用域</h3><p>即传递给混入（mixin）的内容块在其被定义的作用域中进行运算，而不是混入（mixin）的作用域。这意味着混入（mixin）的局部变量不能传递给样式块使用<br>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$color</span>: white;</div><div class="line">@mixin haha(<span class="variable">$color</span>:black) &#123;</div><div class="line">    background-color: <span class="variable">$color</span>;</div><div class="line">    @content;</div><div class="line">&#125;</div><div class="line">.test12 &#123;</div><div class="line">    @include haha&#123;</div><div class="line">        color: <span class="variable">$color</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.test12 &#123;</div><div class="line">  background-color: black;</div><div class="line">  color: white;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="函数-用法类似-mixin"><a href="#函数-用法类似-mixin" class="headerlink" title="函数,用法类似@mixin"></a>函数,用法类似@mixin</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">function</span> sasa(<span class="variable">$name</span>) &#123;</div><div class="line">    @<span class="built_in">return</span> <span class="variable">$name</span>;</div><div class="line">&#125;</div><div class="line">.test13 &#123;</div><div class="line">    font-size: sasa(15px);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.test13 &#123;</div><div class="line">  font-size: 15px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> sass技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> sass </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SASS中级语法]]></title>
      <url>/2016/03/27/SASS%E4%B8%AD%E7%BA%A7%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>github地址:[<a href="https://github.com/manlili/sass" target="_blank" rel="external">https://github.com/manlili/sass</a>]</p>
<p>用到的sass语法是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass --watch test.scss:test.css --style expanded</div></pre></td></tr></table></figure></p>
<h2 id="SASS中级语法"><a href="#SASS中级语法" class="headerlink" title="SASS中级语法"></a>SASS中级语法</h2><h3 id="类名嵌套"><a href="#类名嵌套" class="headerlink" title="类名嵌套"></a>类名嵌套</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.test1 &#123;</div><div class="line">    font-size: .15rem;</div><div class="line">    p&#123;</div><div class="line">        color: <span class="comment">#333;</span></div><div class="line">        .test11 &#123;</div><div class="line">            width: 3px;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.test1 &#123;</div><div class="line">  font-size: .15rem;</div><div class="line">&#125;</div><div class="line">.test1 p &#123;</div><div class="line">  color: <span class="comment">#333;</span></div><div class="line">&#125;</div><div class="line">.test1 p .test11 &#123;</div><div class="line">  width: 3px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="属性嵌套"><a href="#属性嵌套" class="headerlink" title="属性嵌套"></a>属性嵌套</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.test2 &#123;</div><div class="line">    margin: &#123;</div><div class="line">        left: 10px;</div><div class="line">        right: 20px;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">.test21 &#123;</div><div class="line">    margin: 0 0 0 0&#123;    /*命名空间也可以有自己的属性*/</div><div class="line">        left: 10px;</div><div class="line">        right: 20px;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.test2 &#123;</div><div class="line">  margin-left: 10px;</div><div class="line">  margin-right: 20px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.test21 &#123;</div><div class="line">  margin: 0 0 0 0;</div><div class="line">  margin-left: 10px;</div><div class="line">  margin-right: 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="引用父选择器和精确定位父选择器和反向成为父选择器"><a href="#引用父选择器和精确定位父选择器和反向成为父选择器" class="headerlink" title="引用父选择器和精确定位父选择器和反向成为父选择器"></a>引用父选择器和精确定位父选择器和反向成为父选择器</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.a &#123;</div><div class="line">    font-size: .15rem;</div><div class="line">    &amp;:hover &#123;           //引用父选择器</div><div class="line">        color: red;</div><div class="line">    &#125;</div><div class="line">    .ll &#123;               //精确定位父选择器</div><div class="line">       color: black;</div><div class="line">        &amp;:hover &#123;</div><div class="line">            height: 20px;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    .test3 &amp; &#123;          //反向成为父选择器</div><div class="line">        width: 10px;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.a &#123;</div><div class="line">  font-size: .15rem;</div><div class="line">&#125;</div><div class="line">.a:hover &#123;</div><div class="line">  color: red;</div><div class="line">&#125;</div><div class="line">.a .ll &#123;</div><div class="line">  color: black;</div><div class="line">&#125;</div><div class="line">.a .ll:hover &#123;</div><div class="line">  height: 20px;</div><div class="line">&#125;</div><div class="line">.test3 .a &#123;</div><div class="line">  width: 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/*方法一*/</div><div class="line"><span class="variable">$color</span>: red;</div><div class="line">.test4 &#123;</div><div class="line">    color: <span class="variable">$color</span>;</div><div class="line">&#125;</div><div class="line">/*方法二*/</div><div class="line">.test41 &#123;</div><div class="line">    <span class="variable">$red</span>: red !global;</div><div class="line">    color: <span class="variable">$red</span>;</div><div class="line">&#125;</div><div class="line">.test42 &#123;</div><div class="line">    color: <span class="variable">$red</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/*方法一*/</div><div class="line">.test4 &#123;</div><div class="line">  color: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*方法二*/</div><div class="line">.test41 &#123;</div><div class="line">  color: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.test42 &#123;</div><div class="line">  color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="带引号的字符串将被编译为不带引号的字符串"><a href="#带引号的字符串将被编译为不带引号的字符串" class="headerlink" title="带引号的字符串将被编译为不带引号的字符串"></a>带引号的字符串将被编译为不带引号的字符串</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@mixin <span class="built_in">test</span>5(<span class="variable">$left</span>) &#123;   //此处$不可去掉</div><div class="line">    border-<span class="comment">#&#123;$left&#125;:1px #000 solid;</span></div><div class="line">    left: 20px;</div><div class="line">    top: 10px;</div><div class="line">&#125;</div><div class="line">.lili2 &#123;</div><div class="line">    @include <span class="built_in">test</span>5(<span class="string">"left"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.lili2 &#123;</div><div class="line">  border-left: 1px <span class="comment">#000 solid;</span></div><div class="line">  left: 20px;</div><div class="line">  top: 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="精讲除法"><a href="#精讲除法" class="headerlink" title="精讲除法"></a>精讲除法</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/*需要注意:Sass 数学函数在算术运算期间会保留单位</div><div class="line">*可以将/解析为除法三种情况</div><div class="line">*(1)如果该值，或值的任何部分，存储在一个变量中或通过函数返回。</div><div class="line">* (2)如果该值是由括号括起来的，除非这些括号是在一个列表（list）外部，并且值是括号内部。</div><div class="line">* (3)如果该值被用作另一个算术表达式的一部分。</div><div class="line">*/</div><div class="line">p &#123;</div><div class="line">    font-size: 10px/2px; // 原生的CSS，不作为除法 </div><div class="line">    <span class="variable">$width</span>: 100px;</div><div class="line">    width: <span class="variable">$width</span>/2;</div><div class="line">    height: (100px/2);</div><div class="line">    margin-left: 5px + 8px/2px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">  font-size: 10px/2px;</div><div class="line">  width: 50px;</div><div class="line">  height: 50px;</div><div class="line">  margin-left: 9px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="颜色运算"><a href="#颜色运算" class="headerlink" title="颜色运算"></a>颜色运算</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.test7 &#123;</div><div class="line">    color: <span class="comment">#302010 + #333333;</span></div><div class="line">&#125;</div><div class="line">.test71 &#123;</div><div class="line">    color: <span class="comment">#010101 * 2;</span></div><div class="line">&#125;</div><div class="line">.test72 &#123;</div><div class="line">    color: rgba(0,0,0,0.3) + rgba(1,1,1,0.3); //必须具有相同的alpha值，才能进行颜色运算,但是alpha不变</div><div class="line">&#125;</div><div class="line">/*如果想让alpha值变化,则需要计算函数*/</div><div class="line">.test73 &#123;</div><div class="line">    color: opacify(rgba(0,0,0,0.3),0.3);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.test7 &#123;</div><div class="line">  color: <span class="comment">#635343;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">.test71 &#123;</div><div class="line">  color: <span class="comment">#020202;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">.test72 &#123;</div><div class="line">  color: rgba(1, 1, 1, 0.3);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*如果想让alpha值变化,则需要计算函数*/</div><div class="line">.test73 &#123;</div><div class="line">  color: rgba(0, 0, 0, 0.6);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="字符串运算"><a href="#字符串运算" class="headerlink" title="字符串运算"></a>字符串运算</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.test8 &#123;</div><div class="line">    width: 2px + 3px;</div><div class="line">&#125;</div><div class="line">.test81::after &#123;    //带引号字符串和不带引号字符串,谁在前面就以谁为主</div><div class="line">    font-family: <span class="string">"arial"</span> + black;</div><div class="line">    content: lala + <span class="string">"lili"</span>;</div><div class="line">&#125;</div><div class="line"><span class="variable">$value</span>: 20;     //在字符串里面插入动态值</div><div class="line">.test82::before &#123;</div><div class="line">    content: <span class="string">"wo ke yi #&#123;<span class="variable">$value</span>&#125; lili"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.test8 &#123;</div><div class="line">  width: 5px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.test81::after &#123;</div><div class="line">  font-family: <span class="string">"arialblack"</span>;</div><div class="line">  content: lalalili;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.test82::before &#123;</div><div class="line">  content: <span class="string">"wo ke yi 20 lili"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="圆括号提升优先级"><a href="#圆括号提升优先级" class="headerlink" title="圆括号提升优先级"></a>圆括号提升优先级</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.test9 &#123;</div><div class="line">    width: 1px + (2px * 3);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.test9 &#123;</div><div class="line">  width: 7px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="默认变量-default"><a href="#默认变量-default" class="headerlink" title="默认变量 !default"></a>默认变量 !default</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/*如果分配给变量的值后面添加了!default标志 ，这意味着该变量如果已经赋值，那么它不会被重新赋值，但是，如果它尚未赋值，那么它会被赋予新的给定值。*/</div><div class="line"><span class="variable">$color</span>: red;</div><div class="line"><span class="variable">$color</span>: pink !default;</div><div class="line">.test10 &#123;</div><div class="line">    color: <span class="variable">$color</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.test10 &#123;</div><div class="line">  color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> sass技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> sass </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SASS初级语法]]></title>
      <url>/2016/03/22/SASS%E5%88%9D%E7%BA%A7%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>github地址:[<a href="https://github.com/manlili/sass" target="_blank" rel="external">https://github.com/manlili/sass</a>]</p>
<p>用到的sass语法是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sass --watch test.scss:test.css --style expanded</div></pre></td></tr></table></figure></p>
<h2 id="SASS初级语法"><a href="#SASS初级语法" class="headerlink" title="SASS初级语法"></a>SASS初级语法</h2><h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$color</span>: black;</div><div class="line">.test1 &#123;</div><div class="line">    background-color: <span class="variable">$color</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.test1 &#123;</div><div class="line">  background-color: black;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="在字符串内加变量"><a href="#在字符串内加变量" class="headerlink" title="在字符串内加变量"></a>在字符串内加变量</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$left</span>: left;</div><div class="line">.test2 &#123;</div><div class="line">    border-<span class="comment">#&#123;$left&#125;:1px  #000 solid;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.test2 &#123;</div><div class="line">  border-left: 1px  <span class="comment">#000 solid;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="样式内进行加减乘除-注意除法书写"><a href="#样式内进行加减乘除-注意除法书写" class="headerlink" title="样式内进行加减乘除(注意除法书写)"></a>样式内进行加减乘除(注意除法书写)</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$para</span>:4;</div><div class="line">.test3 &#123;</div><div class="line">    height: 5px+3px;</div><div class="line">    width: (14px/7);</div><div class="line">    right: <span class="variable">$para</span>*4;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$para</span>:4;</div><div class="line">.test3 &#123;</div><div class="line">    height: 5px+3px;</div><div class="line">    width: (14px/7);</div><div class="line">    right: <span class="variable">$para</span>*4;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="子元素书写"><a href="#子元素书写" class="headerlink" title="子元素书写"></a>子元素书写</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.test4 &#123;</div><div class="line">    .lala &#123;</div><div class="line">        color: pink;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.test4 .lala &#123;</div><div class="line">  color: pink;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="继承-SASS允许一个选择器，继承另一个选择器"><a href="#继承-SASS允许一个选择器，继承另一个选择器" class="headerlink" title="继承(SASS允许一个选择器，继承另一个选择器)"></a>继承(SASS允许一个选择器，继承另一个选择器)</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.class1 &#123;</div><div class="line">    border-left: 1px <span class="comment">#000 solid;</span></div><div class="line">&#125;</div><div class="line">.class2 &#123;</div><div class="line">    @extend .class1;</div><div class="line">    font-size: 15px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.class1, .class2 &#123;</div><div class="line">  border-left: 1px <span class="comment">#000 solid;</span></div><div class="line">&#125;</div><div class="line">.class2 &#123;</div><div class="line">  font-size: 15px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="复用代码块-无变量"><a href="#复用代码块-无变量" class="headerlink" title="复用代码块(无变量)"></a>复用代码块(无变量)</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@mixin <span class="built_in">test</span>6 &#123;</div><div class="line">    height: 5px;</div><div class="line">    left: 20px;</div><div class="line">    top: 10px;</div><div class="line">&#125;</div><div class="line">.lili &#123;</div><div class="line">    @include <span class="built_in">test</span>6;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.lili &#123;</div><div class="line">  height: 5px;</div><div class="line">  left: 20px;</div><div class="line">  top: 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="复用代码块-有变量"><a href="#复用代码块-有变量" class="headerlink" title="复用代码块(有变量)"></a>复用代码块(有变量)</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@mixin <span class="built_in">test</span>62(<span class="variable">$height</span>) &#123;</div><div class="line">    height: <span class="variable">$height</span>;</div><div class="line">    left: 20px;</div><div class="line">    top: 10px;</div><div class="line">&#125;</div><div class="line">.lili2 &#123;</div><div class="line">    @include <span class="built_in">test</span>62(100px);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.lili2 &#123;</div><div class="line">  height: 100px;</div><div class="line">  left: 20px;</div><div class="line">  top: 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">function</span> aa(<span class="variable">$color</span>) &#123;</div><div class="line">    @<span class="built_in">return</span> <span class="variable">$color</span>;</div><div class="line">&#125;</div><div class="line">.test7 &#123;</div><div class="line">    color: aa(pink);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.test7 &#123;</div><div class="line">  color: pink;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="导入外部scss或者css文件"><a href="#导入外部scss或者css文件" class="headerlink" title="导入外部scss或者css文件"></a>导入外部scss或者css文件</h3><p>test.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@import <span class="string">'more.scss'</span></div></pre></td></tr></table></figure></p>
<p>more.scss内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$width</span>: 30px;</div><div class="line">.test8 &#123;</div><div class="line">    width: <span class="variable">$width</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译成test.css内容是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.test8 &#123;</div><div class="line">  width: 30px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> sass技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> sass </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue基础理论]]></title>
      <url>/2016/03/14/Vue%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA/</url>
      <content type="html"><![CDATA[<p>大概了解下vue的基础理论<br>github地址:<a href="https://github.com/manlili/vue_learn" target="_blank" rel="external">https://github.com/manlili/vue_learn里面的lesson02</a></p>
<h2 id="vue的定位"><a href="#vue的定位" class="headerlink" title="vue的定位"></a>vue的定位</h2><p>(1)Vue.js是一个构建数据驱动的 web 界面的库。<br>(2)Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。<br>(3)Vue.js 自身不是一个全能框架——它只聚焦于视图层。因此它非常容易学习，非常容易与其它库或已有项目整合。<br>(4)在与相关工具和支持库一起使用时，Vue.js 也能完美地驱动复杂的单页应用。</p>
<h2 id="响应的数据绑定"><a href="#响应的数据绑定" class="headerlink" title="响应的数据绑定"></a>响应的数据绑定</h2><p>通俗地讲，它意味着我们在普通 HTML 模板中使用特殊的语法将 DOM “绑定”到底层数据。一旦创建了绑定，DOM 将与数据保持同步。每当修改了数据，DOM 便相应地更新。这样我们应用中的逻辑就几乎都是直接修改数据了，不必像jquery与 DOM 更新搅在一起。这种思想可以概括为数据驱动的视图,具体用下图展示<br><img src="https://manlili.github.io/img/160314/1.png" alt="图"><br>用程序说明上图的意义,如下:(绑定 DOM 文本到数据)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;vue基础理论&lt;/title&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt; &lt;!--视图View--&gt;</div><div class="line">            &#123;&#123;name&#125;&#125;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var datas=&#123;    //数据Model</div><div class="line">                name:<span class="string">"lili"</span></div><div class="line">            &#125;;</div><div class="line">            </div><div class="line">            var myVue = new Vue(&#123;   //vue库,连接View和Model</div><div class="line">                el:<span class="string">".test"</span>,</div><div class="line">                data:datas</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>注意我们不需要撰写任何 DOM 操作代码：被绑定增强的 HTML 模板是底层数据状态的声明式的映射，数据不过是普通 JavaScript 对象。我们的视图完全由数据驱动。</p>
<p>上面的程序仅仅代表绑定绑定 DOM 文本到数据,其实还存在绑定绑定 DOM 结构到数据,程序如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">        &lt;title&gt;vue基础理论--绑定 DOM 结构 到数据&lt;/title&gt;</div><div class="line">        &lt;script src=<span class="string">"../js/vue.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt; &lt;!--视图View--&gt;</div><div class="line">            &lt;p v-if=<span class="string">"isShow"</span>&gt;</div><div class="line">                我是视图View</div><div class="line">            &lt;/p&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            var datas=&#123;    //数据Model</div><div class="line">                isShow:<span class="literal">true</span></div><div class="line">            &#125;;</div><div class="line">            </div><div class="line">            var myVue = new Vue(&#123;   //vue库,连接View和Model</div><div class="line">                el:<span class="string">".test"</span>,</div><div class="line">                data:datas</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>上面程序是用v-if指令控制p标签(DOM结构)的显示与否</p>
<h2 id="组合的视图组件"><a href="#组合的视图组件" class="headerlink" title="组合的视图组件"></a>组合的视图组件</h2><p>组件系统是 Vue.js 另一个重要概念，因为它提供了一种抽象，让我们可以用独立可复用的小组件来构建大型应用。如果我们考虑到这点，几乎任意类型的应用的界面都可以抽象为一个组件树：<br><img src="https://manlili.github.io/img/160314/2.png" alt="图"><br>一般使用了组件的程序结构大概如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"app"</span>&gt;</div><div class="line">  &lt;app-nav&gt;&lt;/app-nav&gt;</div><div class="line">  &lt;app-view&gt;</div><div class="line">    &lt;app-sidebar&gt;&lt;/app-sidebar&gt;</div><div class="line">    &lt;app-content&gt;&lt;/app-content&gt;</div><div class="line">  &lt;/app-view&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>上面程序仔细一看,很像新出的HTML5里面的自定义元素,但是vue组件和自定义组件的区别是:<br>(1)自定义元素规范仍然远未完成，并且多数浏览器并未支持。相比之下，Vue.js 组件不需要任何补丁，并且在所有支持的浏览器（IE9 及更高版本）之下表现一致。必要时，Vue.js 组件也可以放在原生自定义元素之内。<br>(2)Vue.js 组件提供了原生自定义元素所不具备的一些重要功能，比如组件间的数据流，自定义事件系统，以及动态的、带特效的组件替换。</p>
<p>总之:组件系统是用 Vue.js 构建大型应用的基础.</p>
]]></content>
      
        <categories>
            
            <category> vue技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
            <tag> 理论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue入门演示]]></title>
      <url>/2016/03/04/Vue%E5%85%A5%E9%97%A8%E6%BC%94%E7%A4%BA/</url>
      <content type="html"><![CDATA[<p>研究下最近很流行的vue，写几个测试代码<br>github地址:<a href="https://github.com/manlili/vue_learn" target="_blank" rel="external">https://github.com/manlili/vue_learn里面的lesson01</a><br>目录如下：<br><img src="https://manlili.github.io/img/160304/1.png" alt="图"></p>
<h2 id="单向数据绑定"><a href="#单向数据绑定" class="headerlink" title="单向数据绑定"></a>单向数据绑定</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"utf-8"</span> /&gt;</div><div class="line">        &lt;title&gt;vue&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;script src=<span class="string">"js/vue.js"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &#123;&#123;message&#125;&#125;</div><div class="line">    &lt;/div&gt;</div><div class="line">        &lt;script&gt;</div><div class="line">            var vue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,   //必须有el</div><div class="line">                data:&#123;</div><div class="line">                    message:<span class="string">"这是个测试"</span></div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"utf-8"</span>&gt;</div><div class="line">        &lt;title&gt;vue双向数据成功&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span>&gt;</div><div class="line">        &lt;script src=<span class="string">"js/vue.js"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;  &lt;!--注意文本和input要在同一个el下面,要不然input输入改变不了p里面内容--&gt;</div><div class="line">            &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</div><div class="line">            &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> v-model=<span class="string">"message"</span>&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">        &lt;script&gt;</div><div class="line">            var vue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,   //必须有el</div><div class="line">                data:&#123;</div><div class="line">                    message:<span class="string">"这是个测试"</span></div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="访问数组数据"><a href="#访问数组数据" class="headerlink" title="访问数组数据"></a>访问数组数据</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"utf-8"</span>&gt;</div><div class="line">        &lt;title&gt;vue数组&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span>&gt;</div><div class="line">        &lt;script src=<span class="string">"js/vue.js"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;ul class=<span class="string">"test"</span> v-for=<span class="string">"item in message"</span>&gt;</div><div class="line">                &lt;li&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">        &lt;script&gt;</div><div class="line">            var vue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,   //必须有el</div><div class="line">                data:&#123;</div><div class="line">                    message:[<span class="string">"aa"</span>,<span class="string">"bb"</span>,<span class="string">"cc"</span>]</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="访问数组中对象数据"><a href="#访问数组中对象数据" class="headerlink" title="访问数组中对象数据"></a>访问数组中对象数据</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"utf-8"</span>&gt;</div><div class="line">        &lt;title&gt;vue数组中对象&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span>&gt;</div><div class="line">        &lt;script src=<span class="string">"js/vue.js"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;ul class=<span class="string">"test"</span> v-for=<span class="string">"item in message"</span>&gt;</div><div class="line">            &lt;li&gt;&#123;&#123;item.name&#125;&#125;&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">        &lt;script&gt;</div><div class="line">            var vue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,   //必须有el</div><div class="line">                data:&#123;</div><div class="line">                    message:[&#123;name:<span class="string">"lili"</span>&#125;,&#123;name:<span class="string">"haha"</span>&#125;,&#123;name:<span class="string">"kkkk"</span>&#125;], //注意此处name这个key值必须保持一致,要不然数组循环没法访问不同的key值</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="vue方法"><a href="#vue方法" class="headerlink" title="vue方法"></a>vue方法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"utf-8"</span>&gt;</div><div class="line">        &lt;title&gt;vue方法&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span>&gt;</div><div class="line">        &lt;script src=<span class="string">"js/vue.js"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">            &lt;p class=<span class="string">"pp"</span>&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</div><div class="line">            &lt;button @click=<span class="string">"changeColor"</span>&gt;使用vue方法&lt;/button&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">        &lt;script&gt;</div><div class="line">            var vue = new Vue(&#123;</div><div class="line">                el: <span class="string">".test"</span>,   //必须有el</div><div class="line">                data:&#123;</div><div class="line">                    message:<span class="string">"这是个测试"</span></div><div class="line">                &#125;,</div><div class="line">                methods:&#123;</div><div class="line">                    changeColor:<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                        document.getElementsByClassName(<span class="string">"pp"</span>)[0].style.color=<span class="string">"#ff0000"</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> vue技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式执行函数]]></title>
      <url>/2016/01/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[MVC vs MVP vs MVVM]]></title>
      <url>/2015/07/12/MVC-vs-MVP-vs-MVVM/</url>
      <content type="html"><![CDATA[<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>MVC模式的意思是，软件可以分成三个部分。<br><img src="https://manlili.github.io/img/150712/1.png" alt="图"><br>解释如下：</p>
<ol>
<li>视图（View）：用户界面。</li>
<li>控制器（Controller）：业务逻辑</li>
<li>模型（Model）：数据保存</li>
</ol>
<p>各部分之间的通信方式如下。<br><img src="https://manlili.github.io/img/150712/2.png" alt="图"><br>解释如下：</p>
<ol>
<li>View 传送指令到 Controller</li>
<li>Controller 完成业务逻辑后，要求 Model 改变状态</li>
<li>Model 将新的数据发送到 View，用户得到反馈<br>注意：所有通信都是单向的。</li>
</ol>
<h2 id="互动模式"><a href="#互动模式" class="headerlink" title="互动模式"></a>互动模式</h2><p>接受用户指令时，MVC 可以分成两种方式。一种是通过 View 接受指令，传递给 Controller。<br><img src="https://manlili.github.io/img/150712/3.png" alt="图"><br>另一种是直接通过controller接受指令。<br><img src="https://manlili.github.io/img/150712/4.png" alt="图"></p>
<h2 id="实例：Backbone"><a href="#实例：Backbone" class="headerlink" title="实例：Backbone"></a>实例：Backbone</h2><p>实际项目往往采用更灵活的方式，以 Backbone.js 为例。<br><img src="https://manlili.github.io/img/150712/5.png" alt="图"><br>解释如下：</p>
<ol>
<li>用户可以向 View 发送指令（DOM 事件），再由 View 直接要求 Model 改变状态。</li>
<li>用户也可以直接向 Controller 发送指令（改变 URL 触发 hashChange 事件），再由 Controller 发送给 View。</li>
<li>Controller 非常薄，只起到路由的作用，而 View 非常厚，业务逻辑都部署在 View。所以，Backbone 索性取消了 Controller，只保留一个 Router（路由器） 。</li>
</ol>
<h2 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h2><p>MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向。<br><img src="https://manlili.github.io/img/150712/6.png" alt="图"><br>解释如下：</p>
<ol>
<li>各部分之间的通信，都是双向的。</li>
<li>View 与 Model 不发生联系，都通过 Presenter 传递。</li>
<li>View 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。</li>
</ol>
<h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。<br><img src="https://manlili.github.io/img/150712/7.png" alt="图"><br>唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。Angular 和 Ember 都采用这种模式。</p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MVC </tag>
            
            <tag> MVP </tag>
            
            <tag> MVVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AMD规范]]></title>
      <url>/2015/07/08/AMD%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h2 id="模块的规范"><a href="#模块的规范" class="headerlink" title="模块的规范"></a>模块的规范</h2><p>先想一想，为什么模块很重要？<br>因为有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。<br>但是，这样做有一个前提，那就是大家必须以同样的方式编写模块，否则你有你的写法，我有我的写法，岂不是乱了套！考虑到Javascript模块现在还没有官方规范，这一点就更重要了。<br>目前，通行的Javascript模块规范共有两种：CommonJS和AMD。我主要介绍AMD，但是要先从CommonJS讲起。</p>
<h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>2009年，美国程序员Ryan Dahl创造了node.js项目，将javascript语言用于服务器端编程。<br><img src="https://manlili.github.io/img/150708/1.jpg" alt="图"><br>这标志”Javascript模块化编程”正式诞生。因为老实说，在浏览器环境下，没有模块也不是特别大的问题，毕竟网页程序的复杂性有限；但是在服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。</p>
<p>node.js的模块系统，就是参照CommonJS规范实现的。在CommonJS中，有一个全局性方法require()，用于加载模块。假定有一个数学模块math.js，就可以像下面这样加载。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var math = require(<span class="string">'math'</span>);</div></pre></td></tr></table></figure></p>
<p>然后，就可以调用模块提供的方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var math = require(<span class="string">'math'</span>);</div><div class="line">math.add(2,3); // 5</div></pre></td></tr></table></figure></p>
<p>因为这个系列主要针对浏览器编程，不涉及node.js，所以对CommonJS就不多做介绍了。我们在这里只要知道，require()用于加载模块就行了。</p>
<h2 id="浏览器环境"><a href="#浏览器环境" class="headerlink" title="浏览器环境"></a>浏览器环境</h2><p>有了服务器端模块以后，很自然地，大家就想要客户端模块。而且最好两者能够兼容，一个模块不用修改，在服务器和浏览器都可以运行。<br>但是，由于一个重大的局限，使得CommonJS规范不适用于浏览器环境。还是上一节的代码，如果在浏览器中运行，会有一个很大的问题，你能看出来吗？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var math = require(<span class="string">'math'</span>);</div><div class="line">math.add(2, 3);</div></pre></td></tr></table></figure></p>
<p>第二行math.add(2, 3)，在第一行require(‘math’)之后运行，因此必须等math.js加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。<br>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。</p>
<p>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是AMD规范诞生的背景。</p>
<h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>AMD是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p>
<p>AMD也采用require()语句加载模块，但是不同于CommonJS，它要求两个参数：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">require([module], callback);</div></pre></td></tr></table></figure></p>
<p>第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数callback，则是加载成功之后的回调函数。如果将前面的代码改写成AMD形式，就是下面这样：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">require([<span class="string">'math'</span>], <span class="keyword">function</span> (math) &#123;</div><div class="line">　　math.add(2, 3);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>math.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。</p>
]]></content>
      
        <categories>
            
            <category> js模块 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AMD </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node的文件系统]]></title>
      <url>/2015/06/13/Node%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<p>一般用js没办法对本地盘中文件进行读取或者其他操作，但是node.js有文件系统，可以很方便的读取文件内容。<br>测试例子<a href="https://github.com/manlili/node_learn" target="_blank" rel="external">github地址：https://github.com/manlili/node_learn里面lesson07</a></p>
<h2 id="同步和异步读取文件"><a href="#同步和异步读取文件" class="headerlink" title="同步和异步读取文件"></a>同步和异步读取文件</h2><p>Node 导入文件系统模块(fs)语法如下所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var fs = require(<span class="string">"fs"</span>)</div></pre></td></tr></table></figure></p>
<p>创建readfile.js，内容是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var fs = require(<span class="string">'fs'</span>);</div><div class="line">fs.readFile(<span class="string">'test.txt'</span>,<span class="keyword">function</span>(err, data) &#123;</div><div class="line">	<span class="keyword">if</span> (err) &#123;</div><div class="line">		<span class="built_in">return</span> console.log(err);</div><div class="line">	&#125;</div><div class="line">	console.log(<span class="string">"异步读取的文件内容是："</span>+data.toString());</div><div class="line">&#125;)</div><div class="line"></div><div class="line">var data = fs.readFileSync(<span class="string">'test.txt'</span>);</div><div class="line">console.log(<span class="string">"同步读取的文件内容是："</span>+data.toString());</div></pre></td></tr></table></figure></p>
<p>进入js所在的文件夹内，打开gitBash输入：<br><img src="https://manlili.github.io/img/150613/1.png" alt="图"></p>
<h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><p>定义规则：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.open(path, flags[, mode], callback)</div></pre></td></tr></table></figure></p>
<p>参数说明：<br>path - 文件的路径。<br>flags - 文件打开的行为。具体值详见下文。<br>mode - 设置文件模式(权限)，文件创建默认权限为 0666(可读，可写)。<br>callback - 回调函数，带有两个参数如：callback(err, fd)。</p>
<p>关于flags 参数可以是以下值：<br>r:以读取模式打开文件。如果文件不存在抛出异常。<br>r+:以读写模式打开文件。如果文件不存在抛出异常。<br>rs:以同步的方式读取文件。<br>rs+:以同步的方式读取和写入文件。<br>w:以写入模式打开文件，如果文件不存在则创建。<br>wx:类似 ‘w’，但是如果文件路径存在，则文件写入失败。<br>w+:以读写模式打开文件，如果文件不存在则创建。<br>wx+:类似 ‘w+’， 但是如果文件路径存在，则文件读写失败。<br>a:以追加模式打开文件，如果文件不存在则创建。<br>ax:类似 ‘a’， 但是如果文件路径存在，则文件追加失败。<br>a+:以读取追加模式打开文件，如果文件不存在则创建。<br>ax+:类似 ‘a+’， 但是如果文件路径存在，则文件读取追加失败。</p>
<p>创建openfile.js，内容是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var fs = require(<span class="string">'fs'</span>);</div><div class="line">console.log(<span class="string">"准备打开文件"</span>);</div><div class="line">fs.open(<span class="string">'test.txt'</span>,<span class="string">'r+'</span>,<span class="keyword">function</span>(err, data) &#123;</div><div class="line">	<span class="keyword">if</span> (err) &#123;</div><div class="line">		<span class="built_in">return</span> console.log(err);</div><div class="line">	&#125;</div><div class="line">	console.log(<span class="string">"文件打开成功"</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>进入js所在的文件夹内，打开gitBash输入：<br><img src="https://manlili.github.io/img/150613/2.png" alt="图"></p>
<h2 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h2><p>以下为通过异步模式获取文件信息的语法格式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.stat(path, callback)</div></pre></td></tr></table></figure></p>
<p>参数使用说明如下：<br>path - 文件路径。<br>callback - 回调函数，带有两个参数如：(err, stats), stats 是 fs.Stats 对象。<br>其中stats类中的方法有：<br>stats.isFile():如果是文件返回 true，否则返回 false。<br>stats.isDirectory():如果是目录返回 true，否则返回 false。<br>stats.isBlockDevice():如果是块设备返回 true，否则返回 false。<br>stats.isCharacterDevice():如果是字符设备返回 true，否则返回 false。<br>stats.isSymbolicLink():如果是软链接返回 true，否则返回 false。<br>stats.isFIFO():如果是FIFO，返回true，否则返回 false。FIFO是UNIX中的一种特殊类型的命令管道。<br>stats.isSocket():如果是 Socket 返回 true，否则返回 false。</p>
<p>创建statsfile.js，内容是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var fs = require(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line">console.log(<span class="string">"准备打开文件！"</span>);</div><div class="line">fs.stat(<span class="string">'test.txt'</span>, <span class="keyword">function</span> (err, stats) &#123;</div><div class="line">   <span class="keyword">if</span> (err) &#123;</div><div class="line">       <span class="built_in">return</span> console.error(err);</div><div class="line">   &#125;</div><div class="line">   console.log(stats);</div><div class="line">   console.log(<span class="string">"读取文件信息成功！"</span>);</div><div class="line">   </div><div class="line">   // 检测文件类型</div><div class="line">   console.log(<span class="string">"是否为文件(isFile) ? "</span> + stats.isFile());</div><div class="line">   console.log(<span class="string">"是否为目录(isDirectory) ? "</span> + stats.isDirectory());    </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>进入js所在的文件夹内，打开gitBash输入：<br><img src="https://manlili.github.io/img/150613/3.png" alt="图"></p>
<h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><p>以下为异步模式下写入文件的语法格式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.writeFile(filename, data[, options], callback)</div></pre></td></tr></table></figure></p>
<p>参数使用说明如下：<br>path - 文件路径。<br>data - 要写入文件的数据，可以是 String(字符串) 或 Buffer(流) 对象。<br>options - 该参数是一个对象，包含 {encoding, mode, flag}。默认编码为 utf8, 模式为 0666 ， flag 为 ‘w’<br>callback - 回调函数，回调函数只包含错误信息参数(err)，在写入失败时返回。</p>
<p>创建writefile.js，内容是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var fs = require(<span class="string">'fs'</span>);</div><div class="line">fs.writeFile(<span class="string">'lili.txt'</span>, <span class="string">'我是一只猪'</span>, <span class="keyword">function</span> (err) &#123;</div><div class="line">	<span class="keyword">if</span> (err) &#123;</div><div class="line">       <span class="built_in">return</span> console.error(err);</div><div class="line">   &#125;</div><div class="line">&#125;)</div><div class="line">fs.readFile(<span class="string">'lili.txt'</span>,<span class="keyword">function</span>(err, data) &#123;</div><div class="line">	console.log(<span class="string">"异步读取文件数据: "</span> + data.toString());</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>进入js所在的文件夹内，打开gitBash输入：<br><img src="https://manlili.github.io/img/150613/4.png" alt="图"></p>
<p>当然还有很多关于文件的操作，详情请见文件系统手册<a href="http://www.runoob.com/nodejs/nodejs-fs.html" target="_blank" rel="external">http://www.runoob.com/nodejs/nodejs-fs.html</a></p>
]]></content>
      
        <categories>
            
            <category> node技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 文件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node之express]]></title>
      <url>/2015/06/02/Node%E4%B9%8Bexpress/</url>
      <content type="html"><![CDATA[<p>测试例子<a href="https://github.com/manlili/node_learn" target="_blank" rel="external">github地址：https://github.com/manlili/node_learn里面lesson06</a><br>相关api可查看express官网<a href="http://www.expressjs.com.cn/" target="_blank" rel="external">http://www.expressjs.com.cn/</a></p>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。使用 Express 可以快速地搭建一个完整功能的网站。</p>
<h2 id="Express-框架核心特性"><a href="#Express-框架核心特性" class="headerlink" title="Express 框架核心特性"></a>Express 框架核心特性</h2><p>(1)可以设置中间件来响应 HTTP 请求。<br>(2)定义了路由表用于执行不同的 HTTP 请求动作。<br>(3)可以通过向模板传递参数来动态渲染 HTML 页面。</p>
<h2 id="Express搭建本地服务器"><a href="#Express搭建本地服务器" class="headerlink" title="Express搭建本地服务器"></a>Express搭建本地服务器</h2><p>假设有个express.js代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var express = require(<span class="string">'express'</span>);</div><div class="line">var app = express();</div><div class="line"></div><div class="line">app.get(<span class="string">'/'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">   res.send(<span class="string">'Hello World'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">var server = app.listen(8081, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line"></div><div class="line">  var host = server.address().address</div><div class="line">  var port = server.address().port</div><div class="line"></div><div class="line">  console.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>上面的代码启动一个服务并监听从 8081 端口进入的所有连接请求。他将对所有 (/) URL 或 路由 返回 “Hello World!” 字符串。对于其他所有路径全部返回 404 Not Found。<br>在js所在的文件夹里面打开gitBash输入：<br><img src="https://manlili.github.io/img/150602/1.png" alt="图"><br>再在浏览器里面输入<a href="http://127.0.0.1:8081/地址发现：" target="_blank" rel="external">http://127.0.0.1:8081/地址发现：</a><br><img src="https://manlili.github.io/img/150602/2.png" alt="图"></p>
<h2 id="request-和-response-对象"><a href="#request-和-response-对象" class="headerlink" title="request 和 response 对象"></a>request 和 response 对象</h2><p>上面的例子req和res分别代表请求和响应</p>
<h3 id="Request-对象"><a href="#Request-对象" class="headerlink" title="Request 对象"></a>Request 对象</h3><p>request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：<br>req.app：当callback为外部文件时，用req.app访问express的实例<br>req.baseUrl：获取路由当前安装的URL路径<br>req.body / req.cookies：获得「请求主体」/ Cookies<br>req.fresh / req.stale：判断请求是否还「新鲜」<br>req.hostname / req.ip：获取主机名和IP地址<br>req.originalUrl：获取原始请求URL<br>req.params：获取路由的parameters<br>req.path：获取请求路径<br>req.protocol：获取协议类型<br>req.query：获取URL的查询参数串<br>req.route：获取当前匹配的路由<br>req.subdomains：获取子域名<br>req.accepts()：检查可接受的请求的文档类型<br>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码<br>req.get()：获取指定的HTTP请求头<br>req.is()：判断请求头Content-Type的MIME类型</p>
<h3 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h3><p>response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：<br>res.app：同req.app一样<br>res.append()：追加指定HTTP头<br>res.set()在res.append()后将重置之前设置的头<br>res.cookie(name，value [，option])：设置Cookie<br>opition: domain / expires / httpOnly / maxAge / path / secure / signed<br>res.clearCookie()：清除Cookie<br>res.download()：传送指定路径的文件<br>res.get()：返回指定的HTTP头<br>res.json()：传送JSON响应<br>res.jsonp()：传送JSONP响应<br>res.location()：只设置响应的Location HTTP头，不设置状态码或者close response<br>res.redirect()：设置响应的Location HTTP头，并且设置状态码302<br>res.send()：传送HTTP响应<br>res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type<br>res.set()：设置HTTP头，传入object可以一次设置多个头<br>res.status()：设置HTTP状态码<br>res.type()：设置Content-Type的MIME类型</p>
<h2 id="Express路由"><a href="#Express路由" class="headerlink" title="Express路由"></a>Express路由</h2><p>我们已经了解了 HTTP 请求的基本应用，而路由决定了由谁(指定脚本)去响应客户端请求。每一个路由都可以有一个或者多个处理器函数，当匹配到路由时，这个/些函数将被执行。<br>路由定义：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.method(path, <span class="keyword">function</span>)</div></pre></td></tr></table></figure></p>
<p>其中，app 是一个 express 实例；method 是某个 HTTP 请求方式中的一个；path 是服务器端的路径；function 是当路由匹配到时需要执行的函数。</p>
<p>下面来看测试代码expressrounter.js内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">var express = require(<span class="string">'express'</span>);</div><div class="line">var app = express();</div><div class="line"></div><div class="line">//  主页输出 <span class="string">"Hello World"</span></div><div class="line">app.get(<span class="string">'/'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">   console.log(<span class="string">"主页 GET 请求"</span>);</div><div class="line">   res.send(<span class="string">'Hello GET'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">//  POST 请求</div><div class="line">app.post(<span class="string">'/'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">   console.log(<span class="string">"主页 POST 请求"</span>);</div><div class="line">   res.send(<span class="string">'Hello POST'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">//  /del_user 页面响应</div><div class="line">app.get(<span class="string">'/del_user'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">   console.log(<span class="string">"/del_user 响应 DELETE 请求"</span>);</div><div class="line">   res.send(<span class="string">'删除页面'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">//  /list_user 页面 GET 请求</div><div class="line">app.get(<span class="string">'/list_user'</span>, <span class="keyword">function</span> (req, res) &#123;</div><div class="line">   console.log(<span class="string">"/list_user GET 请求"</span>);</div><div class="line">   res.send(<span class="string">'用户列表页面'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 对页面 abcd, abxcd, ab123<span class="built_in">cd</span>, 等响应 GET 请求</div><div class="line">app.get(<span class="string">'/ab*cd'</span>, <span class="keyword">function</span>(req, res) &#123;   </div><div class="line">   console.log(<span class="string">"/ab*cd GET 请求"</span>);</div><div class="line">   res.send(<span class="string">'正则匹配'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">var server = app.listen(3000, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line"></div><div class="line">  var host = server.address().address</div><div class="line">  var port = server.address().port</div><div class="line"></div><div class="line">  console.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>在js所在的文件夹里面打开gitBash输入：<br><img src="https://manlili.github.io/img/150602/3.png" alt="图"><br>再在浏览器里面输入<a href="http://127.0.0.1:3000/中不同的文件名发现" target="_blank" rel="external">http://127.0.0.1:3000/中不同的文件名发现</a><br><img src="https://manlili.github.io/img/150602/4.png" alt="图"><br><img src="https://manlili.github.io/img/150602/5.png" alt="图"><br><img src="https://manlili.github.io/img/150602/6.png" alt="图"><br><img src="https://manlili.github.io/img/150602/7.png" alt="图"></p>
<h2 id="Express静态文件"><a href="#Express静态文件" class="headerlink" title="Express静态文件"></a>Express静态文件</h2><p>Express 提供了内置的中间件 express.static 来设置静态文件如：图片， CSS, JavaScript 等。<br>你可以使用 express.static 中间件来设置静态文件路径。例如，如果你将图片， CSS, JavaScript 文件放在 public目录下，你可以这么写：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(express.static(<span class="string">'public'</span>));</div></pre></td></tr></table></figure></p>
<p>我们可以到 public/img 目录下放些图片,如下所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">expressstatic.js</div><div class="line">public/</div><div class="line">public/img</div><div class="line">public/img/timg.jpg</div></pre></td></tr></table></figure></p>
<p>在js所在的文件夹里面打开gitBash输入：<br><img src="https://manlili.github.io/img/150602/9.png" alt="图"><br>再在浏览器里面输入<a href="http://127.0.0.1:4000/img/timg.jpg发现" target="_blank" rel="external">http://127.0.0.1:4000/img/timg.jpg发现</a><br><img src="https://manlili.github.io/img/150602/10.png" alt="图"></p>
]]></content>
      
        <categories>
            
            <category> node技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> express </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node之http和https]]></title>
      <url>/2015/06/01/Node%E4%B9%8Bhttp%E5%92%8Chttps/</url>
      <content type="html"><![CDATA[<p>研究node.js需要学习下后端知识，先从http和https开始吧。</p>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>1.HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。<br>2.HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。<br>3.HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。<br>如下图<br><img src="https://manlili.github.io/img/150601/1.jpg" alt="图"></p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>1.简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。<br>2.灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。<br>3.无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。<br>4.无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。<br>5.支持B/S及C/S模式。</p>
<h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息<br>URL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1<span class="comment">#name</span></div></pre></td></tr></table></figure></p>
<p>从上面的URL可以看出，一个完整的URL包括以下几部分：<br>1.协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在”HTTP”后面的“//”为分隔符<br>2.域名部分：该URL的域名部分为“www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用<br>3.端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口<br>4.虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”<br>5.文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名<br>6.锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分<br>7.参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</p>
<h2 id="URI和URL和URN的区别"><a href="#URI和URL和URN的区别" class="headerlink" title="URI和URL和URN的区别"></a>URI和URL和URN的区别</h2><h3 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h3><p>URI是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。<br>Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的<br>URI一般由三部组成：<br>①访问资源的命名机制<br>②存放资源的主机名<br>③资源自身的名称，由路径表示，着重强调于资源。</p>
<h3 id="URL-1"><a href="#URL-1" class="headerlink" title="URL"></a>URL</h3><p>URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。<br>URL是Internet上用来描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上，特别是著名的Mosaic。<br>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。URL一般由三部组成：<br>①协议(或称为服务方式)<br>②存有该资源的主机IP地址(有时也包括端口号)<br>③主机资源的具体地址。如目录和文件名等</p>
<h3 id="URN"><a href="#URN" class="headerlink" title="URN"></a>URN</h3><p>URN是uniform resource name，统一资源命名，是通过名字来标识资源，比如mailto:java-net@java.sun.com。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。笼统地说，每个 URL 都是 URI，但不一定每个 URI 都是 URL。这是因为 URI 还包括一个子类，即统一资源名称 (URN)，它命名资源但不指定如何定位资源。上面的 mailto、news 和 isbn URI 都是 URN 的示例。<br>在Java的URI中，一个URI实例可以代表绝对的，也可以是相对的，只要它符合URI的语法规则。而URL类则不仅符合语义，还包含了定位该资源的信息，因此它不能是相对的。<br>在Java类库中，URI类不包含任何访问资源的方法，它唯一的作用就是解析。<br>相反的是，URL类可以打开一个到达资源的流。</p>
<h2 id="HTTP之请求消息Request"><a href="#HTTP之请求消息Request" class="headerlink" title="HTTP之请求消息Request"></a>HTTP之请求消息Request</h2><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：<br>请求行（request line）、请求头部（header）、空行和请求数据四个部分组成。<br>如下图<br><img src="https://manlili.github.io/img/150601/2.png" alt="图"><br>（1）请求行<br>请求行由请求方法字段、URL字段和HTTP协议版本字段3个字段组成，它们用空格分隔。例如，GET /index.html<br>HTTP/1.1。<br>HTTP协议的请求方法有GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE、CONNECT。这里介绍最常用的GET方法和POST方法。<br>GET：当客户端要从服务器中读取文档时，使用GET方法。GET方法要求服务器将URL定位的资源放在响应报文的数据部分，回送给客户端。使用GET方法时，请求参数和对应的值附加在URL后面，利用一个问号（“?”）代表URL的结尾与请求参数的开始，传递参数长度受限制。例如，/index.jsp?id=100&amp;op=bind。<br>POST：当客户端给服务器提供信息较多时可以使用POST方法。POST方法将请求参数封装在HTTP请求数据中，以名称/值的形式出现，可以传输大量数据。 </p>
<p>（2）请求头部<br>请求头部由关键字/值对组成，每行一对，关键字和值用英文冒号“:”分隔。请求头部通知服务器有关于客户端请求的信息，典型的请求头有：<br>User-Agent：产生请求的浏览器类型。<br>Accept：客户端可识别的内容类型列表。<br>Host：请求的主机名，允许多个域名同处一个IP地址，即虚拟主机。</p>
<p>（3）空行<br>最后一个请求头之后是一个空行，发送回车符和换行符，通知服务器以下不再有请求头。</p>
<p>（4）请求数据<br>请求数据不在GET方法中使用，而是在POST方法中使用。POST方法适用于需要客户填写表单的场合。与请求数据相关的最常使用的请求头是Content-Type和Content-Length。</p>
<p>举个GET请求例子,使用Charles抓取的request请求得到如下图：<br><img src="https://manlili.github.io/img/150601/3.png" alt="图"></p>
<h2 id="HTTP之响应消息Response"><a href="#HTTP之响应消息Response" class="headerlink" title="HTTP之响应消息Response"></a>HTTP之响应消息Response</h2><p>一般情况下，服务器接收并处理客户端发过来的请求后会返回一个HTTP的响应消息。<br>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。<br>举个GET请求例子,使用Charles抓取的response请求得到如下图：<br><img src="https://manlili.github.io/img/150601/4.jpg" alt="图"></p>
<h2 id="HTTP之状态码"><a href="#HTTP之状态码" class="headerlink" title="HTTP之状态码"></a>HTTP之状态码</h2><p>状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:<br>1xx：指示信息–表示请求已接收，继续处理<br>2xx：成功–表示请求已被成功接收、理解、接受<br>3xx：重定向–要完成请求必须进行更进一步的操作<br>4xx：客户端错误–请求有语法错误或请求无法实现<br>5xx：服务器端错误–服务器未能实现合法的请求</p>
<p>常见状态码：<br>200 OK                        //客户端请求成功<br>400 Bad Request               //客户端请求有语法错误，不能被服务器所理解<br>401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用<br>403 Forbidden                 //服务器收到请求，但是拒绝提供服务<br>404 Not Found                 //请求资源不存在，eg：输入了错误的URL<br>500 Internal Server Error     //服务器发生不可预期的错误<br>503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后可能恢复正常</p>
<p>更多状态码<a href="http://www.runoob.com/http/http-status-codes.html" target="_blank" rel="external">http://www.runoob.com/http/http-status-codes.html</a></p>
<h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><p>根据HTTP标准，HTTP请求可以使用多种请求方法。<br>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。<br>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。<br>其中：<br>GET:请求指定的页面信息，并返回实体主体。<br>HEAD:类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头<br>POST:向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。<br>PUT:从客户端向服务器传送的数据取代指定的文档的内容。<br>DELETE:请求服务器删除指定的页面。<br>CONNECT:HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。<br>OPTIONS:允许客户端查看服务器的性能。<br>TRACE:回显服务器收到的请求，主要用于测试或诊断。</p>
<h2 id="HTTP工作原理"><a href="#HTTP工作原理" class="headerlink" title="HTTP工作原理"></a>HTTP工作原理</h2><p>HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。</p>
<p>以下是 HTTP 请求/响应的步骤：<br>1、客户端连接到Web服务器<br>一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。例如，<a href="http://www.oakcms.cn。" target="_blank" rel="external">http://www.oakcms.cn。</a></p>
<p>2、发送HTTP请求<br>通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。</p>
<p>3、服务器接受请求并返回HTTP响应<br>Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。</p>
<p>4、释放连接TCP连接<br>若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;</p>
<p>5、客户端浏览器解析HTML内容<br>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。</p>
<p>例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：<br>1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;<br>2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;<br>3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;<br>4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;<br>5、释放 TCP连接;<br>6、浏览器将该 html 文本并显示内容; </p>
<h2 id="GET和POST请求的区别"><a href="#GET和POST请求的区别" class="headerlink" title="GET和POST请求的区别"></a>GET和POST请求的区别</h2><p>get    请求举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GET /books/?sex=man&amp;name=Professional HTTP/1.1</div><div class="line">Host: www.wrox.com</div><div class="line">User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</div><div class="line">Gecko/20050225 Firefox/1.0.1</div><div class="line">Connection: Keep-Alive</div></pre></td></tr></table></figure></p>
<p>post请求举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">POST / HTTP/1.1</div><div class="line">Host: www.wrox.com</div><div class="line">User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</div><div class="line">Gecko/20050225 Firefox/1.0.1</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Content-Length: 40</div><div class="line">Connection: Keep-Alive</div><div class="line"></div><div class="line">name=Professional%20Ajax&amp;publisher=Wiley</div></pre></td></tr></table></figure></p>
<h2 id="地址栏显示参数"><a href="#地址栏显示参数" class="headerlink" title="地址栏显示参数"></a>地址栏显示参数</h2><p>GET提交，请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，多个参数用&amp;连接；例 如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0 %E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如： %E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。<br>POST提交：把提交的数据放置在是HTTP包的包体中。<br>因此，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变</p>
<h2 id="传输数据的大小"><a href="#传输数据的大小" class="headerlink" title="传输数据的大小"></a>传输数据的大小</h2><p>首先声明：HTTP协议没有对传输的数据大小进行限制，HTTP协议规范也没有对URL长度进行限制。<br>而在实际开发中存在的限制主要有：<br>GET:特定浏览器和服务器对URL长度有限制，例如 IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系 统的支持。<br>因此对于GET提交时，传输数据就会受到URL长度的 限制。</p>
<p>POST:由于不是通过URL传值，理论上数据不受 限。但实际各个WEB服务器会规定对post提交数据大小进行限制，Apache、IIS6都有各自的配置。</p>
<h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>POST的安全性要比GET的安全性高。比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为<br>(1)登录页面有可能被浏览器缓存；<br>(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击</p>
<p>Http协议定义了很多与服务器交互的方法，最基本的有4种，分别是GET,POST,PUT,DELETE. 一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。 我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息.</p>
<p>总结：我们看看GET和POST的区别<br>(1) GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456. POST方法是把提交的数据放在HTTP包的Body中.<br>(2) GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.<br>(3) GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。<br>(4) GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码.</p>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。<br>它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。<br>https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。</p>
<h2 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h2><p>SSL(Secure Sockets Layer 安全套接层),及其继任者传输层安全(Transport Layer Security，TLS)是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。</p>
<h3 id="SSL协议分层"><a href="#SSL协议分层" class="headerlink" title="SSL协议分层"></a>SSL协议分层</h3><p>SSL协议可分为两层:<br>(1)SSL记录协议（SSL Record Protocol）：它建立在可靠的传输协议（如TCP）之上，为高层协议提供数据封装、压缩、加密等基本功能的支持。<br>(2)SSL握手协议（SSL Handshake Protocol）：它建立在SSL记录协议之上，用于在实际的数据传输开始前，通讯双方进行身份认证、协商加密算法、交换加密密钥等。</p>
<h3 id="SSL协议提供的服务"><a href="#SSL协议提供的服务" class="headerlink" title="SSL协议提供的服务"></a>SSL协议提供的服务</h3><p>(1)认证用户和服务器，确保数据发送到正确的客户机和服务器<br>(2)加密数据以防止数据中途被窃取<br>(3)维护数据的完整性，确保数据在传输过程中不被改变。</p>
<h3 id="SSL协议的工作流程"><a href="#SSL协议的工作流程" class="headerlink" title="SSL协议的工作流程"></a>SSL协议的工作流程</h3><p>服务器认证阶段：<br>(1)客户端向服务器发送一个开始信息“Hello”以便开始一个新的会话连接；<br>(2)服务器根据客户的信息确定是否需要生成新的主密钥，如需要则服务器在响应客户的“Hello”信息时将包含生成主密钥所需的信息；<br>(3)客户根据收到的服务器响应信息，产生一个主密钥，并用服务器的公开密钥加密后传给服务器；<br>(4)服务器恢复该主密钥，并返回给客户一个用主密钥认证的信息，以此让客户认证服务器。</p>
<h2 id="HTTPS作用"><a href="#HTTPS作用" class="headerlink" title="HTTPS作用"></a>HTTPS作用</h2><p>主要作用可以分为两种：<br>一种是建立一个信息安全通道，来保证数据传输的安全；<br>另一种就是确认网站的真实性，凡是使用了 https 的网站，都可以通过点击浏览器地址栏的锁头标志来查看网站认证之后的真实信息，也可以通过 CA 机构颁发的安全签章来查询</p>
<h2 id="HTTPS和HTTP的区别"><a href="#HTTPS和HTTP的区别" class="headerlink" title="HTTPS和HTTP的区别"></a>HTTPS和HTTP的区别</h2><p>(1)https协议需要到ca申请证书，一般免费证书很少，需要交费。<br>(2)http是超文本传输协议，信息是明文传输，https 则是具有安全性的ssl加密传输协议。<br>(3)http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。<br>(4)http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p>
]]></content>
      
        <categories>
            
            <category> node技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
            <tag> http </tag>
            
            <tag> https </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node之queryString讲解]]></title>
      <url>/2015/05/28/Node%E4%B9%8Bquerystring%E8%AE%B2%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>在nodejs中，提供了querystring这个模块，用来做url查询参数的解析。在做node服务端开发的时候基本都会用到，使用非常简单。<br>github地址:<a href="https://github.com/manlili/node_learn" target="_blank" rel="external">https://github.com/manlili/node_learn</a>里面的lesson05</p>
<h2 id="parse方法"><a href="#parse方法" class="headerlink" title="parse方法"></a>parse方法</h2><p>作用是解析url查询参数，定义如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">querystring.parse(str[, sep[, eq[, options]]])</div></pre></td></tr></table></figure></p>
<p>使用方法①<br>先进入node控制台，然后输入querystring.parse,就可以解析这个地址<br><img src="https://manlili.github.io/img/150527/1.png" alt="图"></p>
<p>使用方法②<br>由于queryString是node自带的模块，可以直接引用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var querystring = require(<span class="string">"querystring"</span>);</div><div class="line">var a = querystring.parse(<span class="string">'foo=bra&amp;haha=lli&amp;haha=568'</span>);</div><div class="line">console.log(a);</div></pre></td></tr></table></figure></p>
<p>然后进入js所在的文件夹执行：<br><img src="https://manlili.github.io/img/150527/2.png" alt="图"></p>
<h2 id="stringify方法"><a href="#stringify方法" class="headerlink" title="stringify方法"></a>stringify方法</h2><p>作用是将对象拼接成url查询参数，定义如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">querystring.stringify(obj[, sep[, eq[, options]]])</div></pre></td></tr></table></figure></p>
<p>使用方法①<br>需要将下面的对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; foo: <span class="string">'bra'</span>, haha: [ <span class="string">'lli'</span>, <span class="string">'568'</span> ] &#125;</div></pre></td></tr></table></figure></p>
<p>拼接成url查询参数，先进入node控制台，然后输入querystring.stringify,就可以解析这个地址<br><img src="https://manlili.github.io/img/150527/3.png" alt="图"></p>
<p>使用方法②<br>由于queryString是node自带的模块，可以直接引用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var querystring = require(<span class="string">"querystring"</span>);</div><div class="line">var b = querystring.stringify(&#123; foo: <span class="string">'bra'</span>, haha: [ <span class="string">'lli'</span>, <span class="string">'568'</span> ] &#125;);</div><div class="line">console.log(b);</div></pre></td></tr></table></figure></p>
<p>然后进入js所在的文件夹执行：<br><img src="https://manlili.github.io/img/150527/4.png" alt="图"></p>
<h2 id="escape方法"><a href="#escape方法" class="headerlink" title="escape方法"></a>escape方法</h2><p>作用是转义url，定义如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">querystring.escape(str)</div></pre></td></tr></table></figure></p>
<p>使用方法①<br>假设需要转义“&lt;中文&gt;”，先进入node控制台，然后输入querystring.escape,就可以解析这个地址<br><img src="https://manlili.github.io/img/150527/5.png" alt="图"></p>
<p>使用方法②<br>由于queryString是node自带的模块，可以直接引用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var querystring = require(<span class="string">"querystring"</span>);</div><div class="line">var c = querystring.escape(<span class="string">"&lt;中文&gt;"</span>);</div><div class="line">console.log(c);</div></pre></td></tr></table></figure></p>
<p>然后进入js所在的文件夹执行：<br><img src="https://manlili.github.io/img/150527/6.png" alt="图"></p>
<h2 id="unescape方法"><a href="#unescape方法" class="headerlink" title="unescape方法"></a>unescape方法</h2><p>作用是反转义url，定义如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">querystring.unescape(str)</div></pre></td></tr></table></figure></p>
<p>使用方法①<br>假设需要反转义“%3C%E4%B8%AD%E6%96%87%3E”，先进入node控制台，然后输入querystring.unescape,就可以解析这个地址<br><img src="https://manlili.github.io/img/150527/7.png" alt="图"></p>
<p>使用方法②<br>由于queryString是node自带的模块，可以直接引用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var querystring = require(<span class="string">"querystring"</span>);</div><div class="line">var d = querystring.unescape(<span class="string">"%3C%E4%B8%AD%E6%96%87%3E"</span>);</div><div class="line">console.log(d);</div></pre></td></tr></table></figure></p>
<p>然后进入js所在的文件夹执行：<br><img src="https://manlili.github.io/img/150527/8.png" alt="图"></p>
]]></content>
      
        <categories>
            
            <category> node技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> queryString </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node之URL讲解]]></title>
      <url>/2015/05/13/Node%E4%B9%8BURL%E8%AE%B2%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>url是我们项目中最常用到的，页面间传值经常追加在url后面带过去，如果想要解析url还需要费点力气，但是node原生自带url的api，可以很方便的使用，文档地址在：<a href="https://nodejs.org/api/url.html" target="_blank" rel="external">https://nodejs.org/api/url.html</a>；<br>github地址:<a href="https://github.com/manlili/node_learn" target="_blank" rel="external">https://github.com/manlili/node_learn</a>里面的lesson04</p>
<h2 id="parse方法"><a href="#parse方法" class="headerlink" title="parse方法"></a>parse方法</h2><p>作用是解析网址，定义如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url.parse(urlString[, parseQueryString[, slashesDenoteHost]])</div></pre></td></tr></table></figure></p>
<p>使用方法①<br>先进入node控制台，然后输入url.parse,就可以解析这个地址<br><img src="https://manlili.github.io/img/150513/1.png" alt="图"></p>
<p>使用方法②<br>由于url是node自带的模块，可以直接引用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var url = require(<span class="string">"url"</span>);</div><div class="line">var a = url.parse(<span class="string">"https://github.com/manlili/node_learn?from=shanghai&amp;name=lili#123"</span>);</div><div class="line">console.log(a);</div></pre></td></tr></table></figure></p>
<p>然后进入js所在的文件夹执行：<br><img src="https://manlili.github.io/img/150513/11.png" alt="图"></p>
<p>解析后对象字段如下：<br>href: 解析前的完整原始 URL，协议名和主机名已转为小写<br>例如: ‘<a href="http://user:pass@host.com:8080/p/a/t/h?query=string#hash" target="_blank" rel="external">http://user:pass@host.com:8080/p/a/t/h?query=string#hash</a>‘</p>
<p>protocol: 请求协议，小写<br>例如: ‘http:’</p>
<p>slashes: 协议的“：”号后是否有“/”<br>例如: true or false</p>
<p>host: URL主机名，包括端口信息，小写<br>例如: ‘host.com:8080’</p>
<p>auth: URL中的认证信息<br>例如: ‘user:pass’</p>
<p>hostname: 主机名，小写<br>例如: ‘host.com’</p>
<p>port: 主机的端口号<br>例如: ‘8080’</p>
<p>pathname: URL中路径<br>例如: ‘/p/a/t/h’</p>
<p>search: 查询对象，即：queryString，包括之前的问号“?”<br>例如: ‘?query=string’</p>
<p>path: pathname 和 search的合集<br>例如: ‘/p/a/t/h?query=string’</p>
<p>query: 查询字符串中的参数部分（问号后面部分字符串），或者使用 querystring.parse() 解析后返回的对象<br>例如: ‘query=string’ or {‘query’:’string’}</p>
<p>hash: 锚点部分（即：“#”及其后的部分）<br>例如: ‘#hash’</p>
<h2 id="format方法"><a href="#format方法" class="headerlink" title="format方法"></a>format方法</h2><p>作用是将对象拼接成网址，定义如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url.format(urlObject)</div></pre></td></tr></table></figure></p>
<p>如果想将下面对象拼成url比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   protocol: <span class="string">'https:'</span>,</div><div class="line">   slashes: <span class="literal">true</span>,</div><div class="line">   auth: null,</div><div class="line">   host: <span class="string">'github.com'</span>,</div><div class="line">   port: null,</div><div class="line">   hostname: <span class="string">'github.com'</span>,</div><div class="line">   <span class="built_in">hash</span>: <span class="string">'#123'</span>,</div><div class="line">   search: <span class="string">'?form=shanghai&amp;name=lili'</span>,</div><div class="line">   query: <span class="string">'form=shanghai&amp;name=lili'</span>,</div><div class="line">   pathname: <span class="string">'/manlili/node_learn'</span>,</div><div class="line">   path: <span class="string">'/manlili/node_learn?form=shanghai&amp;name=lili'</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用方法①<br>将上面对象使用url.format方法可以生成一个URL链接，进入node控制台输入下图命令：<br><img src="https://manlili.github.io/img/150513/2.png" alt="图"></p>
<p>使用方法②<br>由于url是node自带的模块，可以直接引用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var url = require(<span class="string">"url"</span>);</div><div class="line">var obj = &#123;</div><div class="line">   protocol: <span class="string">'https:'</span>,</div><div class="line">   slashes: <span class="literal">true</span>,</div><div class="line">   auth: null,</div><div class="line">   host: <span class="string">'github.com'</span>,</div><div class="line">   port: null,</div><div class="line">   hostname: <span class="string">'github.com'</span>,</div><div class="line">   <span class="built_in">hash</span>: <span class="string">'#123'</span>,</div><div class="line">   search: <span class="string">'?form=shanghai&amp;name=lili'</span>,</div><div class="line">   query: <span class="string">'form=shanghai&amp;name=lili'</span>,</div><div class="line">   pathname: <span class="string">'/manlili/node_learn'</span>,</div><div class="line">   path: <span class="string">'/manlili/node_learn?form=shanghai&amp;name=lili'</span>,</div><div class="line">&#125;</div><div class="line">var b = url.format(obj);</div><div class="line">console.log(b);</div></pre></td></tr></table></figure></p>
<p>然后进入js所在的文件夹执行：<br><img src="https://manlili.github.io/img/150513/21.png" alt="图"></p>
<h2 id="resolve方法"><a href="#resolve方法" class="headerlink" title="resolve方法"></a>resolve方法</h2><p>作用将两个字符串拼成一个URL，定义如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">url.resolve(from, to)</div></pre></td></tr></table></figure></p>
<p>使用方法①<br>如果想将两个字符串拼成一个URL,可以使用url.resolve方法，进入node控制台输入下图命令：<br><img src="https://manlili.github.io/img/150513/3.png" alt="图"></p>
<p>使用方法②<br>由于url是node自带的模块，可以直接引用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var url = require(<span class="string">"url"</span>);</div><div class="line">var c = url.resolve(<span class="string">"https://github.com/manlili/"</span>, <span class="string">"node_learn"</span>);</div><div class="line">console.log(c);</div></pre></td></tr></table></figure></p>
<p>然后进入js所在的文件夹执行：<br><img src="https://manlili.github.io/img/150513/31.png" alt="图"></p>
]]></content>
      
        <categories>
            
            <category> node技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> URL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node回调和事件]]></title>
      <url>/2015/05/07/Node%E5%9B%9E%E8%B0%83%E5%92%8C%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>Node.js 异步编程的直接体现就是回调。<br>异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。<br>回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数。<br>举个很形象的例子：<br><img src="https://manlili.github.io/img/150507/1.png" alt="图"><br>上图可以看出，同步模式很容易遭到卡死，一旦进程卡死，后面的进程也无法执行，而且查询的过程中浪费时间，但是异步模式可以很好地解决这个问题，客户端发送请求完毕后继续做自己的事情，无需等待服务器返回，等服务器查询完毕返回结果后再去处理数据，大大节约了时间。</p>
<h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><p>(1)Node.js 是单进程单线程应用程序，但是通过事件和回调支持并发，所以性能非常高。<br>(2)Node.js 的每一个 API 都是异步的，并作为一个独立线程运行，使用异步函数调用，并处理并发。<br>(3)Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。<br>(4)Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.</p>
<h2 id="事件驱动原理"><a href="#事件驱动原理" class="headerlink" title="事件驱动原理"></a>事件驱动原理</h2><p>用一张图表达：<br><img src="https://manlili.github.io/img/150507/2.jpg" alt="图"><br>上图简单说就是Node.js 使用事件驱动模型，<br>(1)当EventEmitter发送事件请求，然后web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。<br>(2)此时会生成一个主循环来监听事件，当检测到事件返回时触发回调函数。<br>(3)回调函数将返回的数据放回处理队列，当到达队列开头，这个结果被返回给用户。<br>这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）</p>
<p>整个事件驱动的流程就是这么实现的，非常简洁。有点类似于观察者模式，事件相当于一个主题(Subject)，而所有注册到这个事件上的处理函数相当于观察者(Observer)。</p>
]]></content>
      
        <categories>
            
            <category> node技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 回调 </tag>
            
            <tag> 事件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node模块]]></title>
      <url>/2015/04/26/Node%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<p>由于js从初始诞生时就存在命名空间问题，nodejs通过加载不同的包，将变量取值范围固定在包内，加载进来后不会产生命名空间冲突，这样的包也称为模块，为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。<br><a href="https://github.com/manlili/node_learn" target="_blank" rel="external">github地址：https://github.com/manlili/node_learn里面lesson02和lesson03</a></p>
<h2 id="接口方式创建模块"><a href="#接口方式创建模块" class="headerlink" title="接口方式创建模块"></a>接口方式创建模块</h2><p>先来看下目录<br><img src="https://manlili.github.io/img/150426/1.png" alt="图"><br>Node.js 提供了exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所获取模块的 exports 对象。<br>想要在teacher.js引用student.js里面的方法，我们可以用exports方式，下面来看student.js代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> list(student) &#123;</div><div class="line">	<span class="keyword">for</span> (var i=0 ; i&lt; student.length ; i++) &#123;</div><div class="line">		console.log(<span class="string">"学生姓名:"</span>+student[i])</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">exports.print = list;</div></pre></td></tr></table></figure></p>
<p>在以上示例中，student.js 通过 exports 对象把 print 作为模块的访问接口，在teacher.js 中通过 require(‘./student’) 加载这个模块，然后就可以直接访 问 student.js 中 exports 对象的成员函数了。<br>下面来看teacher.js代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var student = require(<span class="string">'./student'</span>);</div><div class="line">student.print([<span class="string">"lili"</span>, <span class="string">"zhangtian"</span>]);</div></pre></td></tr></table></figure></p>
<p>在上面实例中，通过require就可以在teacher.js加载student.js里面的print方法。</p>
<p>然后在node控制台输入命令，运行teacher.js就可以看到效果了。<br><img src="https://manlili.github.io/img/150426/2.png" alt="图"></p>
<h2 id="对象方式创建模块"><a href="#对象方式创建模块" class="headerlink" title="对象方式创建模块"></a>对象方式创建模块</h2><p>有时候我们只是想把一个对象封装到模块中,下面来看student.js代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">print</span></span> () &#123;</div><div class="line">	this.list = <span class="keyword">function</span> (student) &#123;</div><div class="line">		<span class="keyword">for</span> (var i=0 ; i&lt; student.length ; i++) &#123;</div><div class="line">			console.log(<span class="string">"学生姓名:"</span>+student[i])</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">module.exports = <span class="built_in">print</span>;</div></pre></td></tr></table></figure></p>
<p>下面来看teacher.js里面用创建对象方式引入模块的代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var Student = require(<span class="string">'./student'</span>);</div><div class="line">student = new Student();</div><div class="line">student.list([<span class="string">"lili"</span>, <span class="string">"zhangtian"</span>]);</div></pre></td></tr></table></figure></p>
<p>在外部引用该模块时，其接口对象就是要输出的 Student 对象本身，而不是原先的 exports。<br>然后在node控制台输入命令，运行teacher.js就可以看到效果了。<br><img src="https://manlili.github.io/img/150426/3.png" alt="图"></p>
<h2 id="node自带的模块"><a href="#node自带的模块" class="headerlink" title="node自带的模块"></a>node自带的模块</h2><p>有些模块已经写入node.js内部，可以直接引入，像：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var http = require(<span class="string">"http"</span>);</div></pre></td></tr></table></figure></p>
<p>Node.js中自带了一个叫做”http”的模块，我们在我们的代码中请求它并把返回值赋给一个本地变量。<br>这把我们的本地变量变成了一个拥有所有 http 模块所提供的公共方法的对象。</p>
<h2 id="node中require加载方法"><a href="#node中require加载方法" class="headerlink" title="node中require加载方法"></a>node中require加载方法</h2><p>由于Node.js中存在4类模块（原生模块和3种文件模块），尽管require方法极其简单，但是内部的加载却是十分复杂的，其加载优先级也各自不同。如下图所示：<br><img src="https://manlili.github.io/img/150426/4.png" alt="图"></p>
]]></content>
      
        <categories>
            
            <category> node技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 模块 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Npm使用]]></title>
      <url>/2015/04/13/npm%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>npm的全称是Node Package Manager，也就是node的包管理工具，具体使用场景如下：<br>(1)允许用户从NPM服务器下载别人编写的第三方包到本地使用。<br>(2)允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。<br>(3)允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</p>
<p>由于新版的nodejs已经集成了npm，所以安装node的时候也把npm安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，出现版本提示表示安装成功:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm -v</div></pre></td></tr></table></figure></p>
<h2 id="使用-npm-命令安装模块"><a href="#使用-npm-命令安装模块" class="headerlink" title="使用 npm 命令安装模块"></a>使用 npm 命令安装模块</h2><p>学安装前需要先去<a href="https://www.npmjs.com/" target="_blank" rel="external">npm官网</a>，大致的浏览下有哪些模块包，为后面讲解做准备<br>安装语法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install 模块名字</div></pre></td></tr></table></figure></p>
<p>下面去npm官网里面随便找一个包进行下载，比如vue的<a href="https://www.npmjs.com/package/vue" target="_blank" rel="external">下载地址</a>,按照里面的英文描述，可以在右边找下vue下载额方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install vue</div></pre></td></tr></table></figure></p>
<p>安装好之后，vue 包就放在了工程目录下的 node_modules 目录中，因此在代码中只需要通过 require(‘vue’) 的方式就好，无需指定第三方包路径。</p>
<h2 id="全局安装与本地安装"><a href="#全局安装与本地安装" class="headerlink" title="全局安装与本地安装"></a>全局安装与本地安装</h2><h3 id="安装区别"><a href="#安装区别" class="headerlink" title="安装区别"></a>安装区别</h3><p>npm 的包安装分为本地安装（local）、全局安装（global）两种，从敲的命令行来看，差别只是有没有-g而已。<br>比如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install express      <span class="comment"># 本地安装</span></div><div class="line">npm install express -g   <span class="comment"># 全局安装</span></div></pre></td></tr></table></figure></p>
<h3 id="使用区别"><a href="#使用区别" class="headerlink" title="使用区别"></a>使用区别</h3><p>本地安装<br>(1)将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。<br>(2)可以通过 require() 来引入本地安装的包。</p>
<p>全局安装<br>(1)将安装包放在 /usr/local 下或者你 node 的安装目录。<br>(2)可以直接在命令行里使用。</p>
<h2 id="查看已安装的包"><a href="#查看已安装的包" class="headerlink" title="查看已安装的包"></a>查看已安装的包</h2><p>(1) 找到node_modules文件夹在里面直接查看<br>(2) 使用命令查看<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm ls -g</div></pre></td></tr></table></figure></p>
<h2 id="使用-npm-命令卸载模块"><a href="#使用-npm-命令卸载模块" class="headerlink" title="使用 npm 命令卸载模块"></a>使用 npm 命令卸载模块</h2><p>命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm uninstall 模块名</div></pre></td></tr></table></figure></p>
<h2 id="使用-npm-命令更新模块"><a href="#使用-npm-命令更新模块" class="headerlink" title="使用 npm 命令更新模块"></a>使用 npm 命令更新模块</h2><p>命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm update 模块名</div></pre></td></tr></table></figure></p>
<h2 id="使用-npm-命令搜索模块"><a href="#使用-npm-命令搜索模块" class="headerlink" title="使用 npm 命令搜索模块"></a>使用 npm 命令搜索模块</h2><p>命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm search 模块名</div></pre></td></tr></table></figure></p>
<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>package.json 位于模块的目录下，用于定义包的属性。</p>
<h3 id="主要字段说明"><a href="#主要字段说明" class="headerlink" title="主要字段说明"></a>主要字段说明</h3><p>name - 包名。<br>version - 包的版本号。<br>description - 包的描述。<br>homepage - 包的官网 url 。<br>author - 包的作者姓名。<br>contributors - 包的其他贡献者姓名。<br>dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。<br>repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。<br>main - main 字段是一个模块ID，它是一个指向你程序的主要项目。就是说，如果你包的名字叫 express，然后用户安装它，然后require(“express”)。<br>keywords - 关键字</p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>接下来让我们来看下 vue 包的 package.json 文件，位于 node_modules/vue/package.json 内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"_args"</span>: [</div><div class="line">    [</div><div class="line">      &#123;</div><div class="line">        <span class="string">"raw"</span>: <span class="string">"vue"</span>,</div><div class="line">        <span class="string">"scope"</span>: null,</div><div class="line">        <span class="string">"escapedName"</span>: <span class="string">"vue"</span>,</div><div class="line">        <span class="string">"name"</span>: <span class="string">"vue"</span>,</div><div class="line">        <span class="string">"rawSpec"</span>: <span class="string">""</span>,</div><div class="line">        <span class="string">"spec"</span>: <span class="string">"latest"</span>,</div><div class="line">        <span class="string">"type"</span>: <span class="string">"tag"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="string">"F:\\manlili"</span></div><div class="line">    ]</div><div class="line">  ],</div><div class="line">  <span class="string">"_from"</span>: <span class="string">"vue@latest"</span>,</div><div class="line">  <span class="string">"_id"</span>: <span class="string">"vue@2.1.10"</span>,</div><div class="line">  <span class="string">"_inCache"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="string">"_location"</span>: <span class="string">"/vue"</span>,</div><div class="line">  <span class="string">"_nodeVersion"</span>: <span class="string">"6.9.1"</span>,</div><div class="line">  <span class="string">"_npmOperationalInternal"</span>: &#123;</div><div class="line">    <span class="string">"host"</span>: <span class="string">"packages-12-west.internal.npmjs.com"</span>,</div><div class="line">    <span class="string">"tmp"</span>: <span class="string">"tmp/vue-2.1.10.tgz_1484673441093_0.458372725173831"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"_npmUser"</span>: &#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"yyx990803"</span>,</div><div class="line">    <span class="string">"email"</span>: <span class="string">"yyx990803@gmail.com"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"_npmVersion"</span>: <span class="string">"3.10.8"</span>,</div><div class="line">  <span class="string">"_phantomChildren"</span>: &#123;&#125;,</div><div class="line">  <span class="string">"_requested"</span>: &#123;</div><div class="line">    <span class="string">"raw"</span>: <span class="string">"vue"</span>,</div><div class="line">    <span class="string">"scope"</span>: null,</div><div class="line">    <span class="string">"escapedName"</span>: <span class="string">"vue"</span>,</div><div class="line">    <span class="string">"name"</span>: <span class="string">"vue"</span>,</div><div class="line">    <span class="string">"rawSpec"</span>: <span class="string">""</span>,</div><div class="line">    <span class="string">"spec"</span>: <span class="string">"latest"</span>,</div><div class="line">    <span class="string">"type"</span>: <span class="string">"tag"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"_requiredBy"</span>: [</div><div class="line">    <span class="string">"#USER"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"_resolved"</span>: <span class="string">"https://registry.npmjs.org/vue/-/vue-2.1.10.tgz"</span>,</div><div class="line">  <span class="string">"_shasum"</span>: <span class="string">"c9235ca48c7925137be5807832ac4e3ac180427b"</span>,</div><div class="line">  <span class="string">"_shrinkwrap"</span>: null,</div><div class="line">  <span class="string">"_spec"</span>: <span class="string">"vue"</span>,</div><div class="line">  <span class="string">"_where"</span>: <span class="string">"F:\\manlili"</span>,</div><div class="line">  <span class="string">"author"</span>: &#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"Evan You"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"bugs"</span>: &#123;</div><div class="line">    <span class="string">"url"</span>: <span class="string">"https://github.com/vuejs/vue/issues"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"dependencies"</span>: &#123;&#125;,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"Reactive, component-oriented view layer for modern web interfaces."</span>,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"babel-core"</span>: <span class="string">"^6.9.0"</span>,</div><div class="line">    <span class="string">"babel-eslint"</span>: <span class="string">"^7.1.0"</span>,</div><div class="line">    <span class="string">"babel-helper-vue-jsx-merge-props"</span>: <span class="string">"^2.0.2"</span>,</div><div class="line">    <span class="string">"babel-loader"</span>: <span class="string">"^6.2.4"</span>,</div><div class="line">    <span class="string">"babel-plugin-istanbul"</span>: <span class="string">"^3.0.0"</span>,</div><div class="line">    <span class="string">"babel-plugin-syntax-jsx"</span>: <span class="string">"^6.18.0"</span>,</div><div class="line">    <span class="string">"babel-plugin-transform-vue-jsx"</span>: <span class="string">"^3.2.0"</span>,</div><div class="line">    <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.9.0"</span>,</div><div class="line">    <span class="string">"babel-preset-flow-vue"</span>: <span class="string">"^1.0.0"</span>,</div><div class="line">    <span class="string">"buble"</span>: <span class="string">"^0.14.0"</span>,</div><div class="line">    <span class="string">"chromedriver"</span>: <span class="string">"^2.21.2"</span>,</div><div class="line">    <span class="string">"codecov.io"</span>: <span class="string">"^0.1.6"</span>,</div><div class="line">    <span class="string">"cross-spawn"</span>: <span class="string">"^5.0.1"</span>,</div><div class="line">    <span class="string">"de-indent"</span>: <span class="string">"^1.0.2"</span>,</div><div class="line">    <span class="string">"es6-promise"</span>: <span class="string">"^4.0.5"</span>,</div><div class="line">    <span class="string">"eslint"</span>: <span class="string">"^3.10.1"</span>,</div><div class="line">    <span class="string">"eslint-config-vue"</span>: <span class="string">"^2.0.1"</span>,</div><div class="line">    <span class="string">"eslint-loader"</span>: <span class="string">"^1.3.0"</span>,</div><div class="line">    <span class="string">"eslint-plugin-flowtype"</span>: <span class="string">"^2.16.0"</span>,</div><div class="line">    <span class="string">"eslint-plugin-jasmine"</span>: <span class="string">"^2.1.0"</span>,</div><div class="line">    <span class="string">"eslint-plugin-vue"</span>: <span class="string">"^1.0.0"</span>,</div><div class="line">    <span class="string">"flow-bin"</span>: <span class="string">"^0.33.0"</span>,</div><div class="line">    <span class="string">"he"</span>: <span class="string">"^1.1.0"</span>,</div><div class="line">    <span class="string">"http-server"</span>: <span class="string">"^0.9.0"</span>,</div><div class="line">    <span class="string">"jasmine"</span>: <span class="string">"^2.5.2"</span>,</div><div class="line">    <span class="string">"jasmine-core"</span>: <span class="string">"^2.5.2"</span>,</div><div class="line">    <span class="string">"karma"</span>: <span class="string">"^1.1.0"</span>,</div><div class="line">    <span class="string">"karma-chrome-launcher"</span>: <span class="string">"^2.0.0"</span>,</div><div class="line">    <span class="string">"karma-coverage"</span>: <span class="string">"^1.0.0"</span>,</div><div class="line">    <span class="string">"karma-firefox-launcher"</span>: <span class="string">"^1.0.0"</span>,</div><div class="line">    <span class="string">"karma-jasmine"</span>: <span class="string">"^1.0.2"</span>,</div><div class="line">    <span class="string">"karma-mocha-reporter"</span>: <span class="string">"^2.0.4"</span>,</div><div class="line">    <span class="string">"karma-phantomjs-launcher"</span>: <span class="string">"^1.0.0"</span>,</div><div class="line">    <span class="string">"karma-safari-launcher"</span>: <span class="string">"^1.0.0"</span>,</div><div class="line">    <span class="string">"karma-sauce-launcher"</span>: <span class="string">"^1.0.0"</span>,</div><div class="line">    <span class="string">"karma-sourcemap-loader"</span>: <span class="string">"^0.3.0"</span>,</div><div class="line">    <span class="string">"karma-webpack"</span>: <span class="string">"^1.7.0"</span>,</div><div class="line">    <span class="string">"lodash"</span>: <span class="string">"^4.17.1"</span>,</div><div class="line">    <span class="string">"nightwatch"</span>: <span class="string">"^0.9.9"</span>,</div><div class="line">    <span class="string">"nightwatch-helpers"</span>: <span class="string">"^1.2.0"</span>,</div><div class="line">    <span class="string">"phantomjs-prebuilt"</span>: <span class="string">"^2.1.1"</span>,</div><div class="line">    <span class="string">"rollup"</span>: <span class="string">"^0.36.1"</span>,</div><div class="line">    <span class="string">"rollup-plugin-alias"</span>: <span class="string">"^1.2.0"</span>,</div><div class="line">    <span class="string">"rollup-plugin-babel"</span>: <span class="string">"^2.4.0"</span>,</div><div class="line">    <span class="string">"rollup-plugin-buble"</span>: <span class="string">"^0.14.0"</span>,</div><div class="line">    <span class="string">"rollup-plugin-flow-no-whitespace"</span>: <span class="string">"^1.0.0"</span>,</div><div class="line">    <span class="string">"rollup-plugin-replace"</span>: <span class="string">"^1.1.0"</span>,</div><div class="line">    <span class="string">"rollup-watch"</span>: <span class="string">"^2.5.0"</span>,</div><div class="line">    <span class="string">"selenium-server"</span>: <span class="string">"2.53.1"</span>,</div><div class="line">    <span class="string">"typescript"</span>: <span class="string">"^2.0.9"</span>,</div><div class="line">    <span class="string">"uglify-js"</span>: <span class="string">"^2.6.2"</span>,</div><div class="line">    <span class="string">"webpack"</span>: <span class="string">"^1.13.2"</span>,</div><div class="line">    <span class="string">"weex-js-runtime"</span>: <span class="string">"^0.17.0-alpha4"</span>,</div><div class="line">    <span class="string">"weex-vdom-tester"</span>: <span class="string">"^0.1.3"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"directories"</span>: &#123;&#125;,</div><div class="line">  <span class="string">"dist"</span>: &#123;</div><div class="line">    <span class="string">"shasum"</span>: <span class="string">"c9235ca48c7925137be5807832ac4e3ac180427b"</span>,</div><div class="line">    <span class="string">"tarball"</span>: <span class="string">"https://registry.npmjs.org/vue/-/vue-2.1.10.tgz"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"files"</span>: [</div><div class="line">    <span class="string">"dist/vue.js"</span>,</div><div class="line">    <span class="string">"dist/vue.min.js"</span>,</div><div class="line">    <span class="string">"dist/vue.runtime.js"</span>,</div><div class="line">    <span class="string">"dist/vue.runtime.min.js"</span>,</div><div class="line">    <span class="string">"dist/vue.common.js"</span>,</div><div class="line">    <span class="string">"dist/vue.runtime.common.js"</span>,</div><div class="line">    <span class="string">"src"</span>,</div><div class="line">    <span class="string">"types/index.d.ts"</span>,</div><div class="line">    <span class="string">"types/options.d.ts"</span>,</div><div class="line">    <span class="string">"types/plugin.d.ts"</span>,</div><div class="line">    <span class="string">"types/vnode.d.ts"</span>,</div><div class="line">    <span class="string">"types/vue.d.ts"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"gitHead"</span>: <span class="string">"994aee4f869d68a00c3b9d87daa9c8d84623ac42"</span>,</div><div class="line">  <span class="string">"homepage"</span>: <span class="string">"https://github.com/vuejs/vue#readme"</span>,</div><div class="line">  <span class="string">"keywords"</span>: [</div><div class="line">    <span class="string">"vue"</span></div><div class="line">  ],</div><div class="line">  <span class="string">"license"</span>: <span class="string">"MIT"</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"dist/vue.runtime.common.js"</span>,</div><div class="line">  <span class="string">"maintainers"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="string">"name"</span>: <span class="string">"yyx990803"</span>,</div><div class="line">      <span class="string">"email"</span>: <span class="string">"yyx990803@gmail.com"</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="string">"name"</span>: <span class="string">"vue"</span>,</div><div class="line">  <span class="string">"optionalDependencies"</span>: &#123;&#125;,</div><div class="line">  <span class="string">"readme"</span>: <span class="string">"ERROR: No README data found!"</span>,</div><div class="line">  <span class="string">"repository"</span>: &#123;</div><div class="line">    <span class="string">"type"</span>: <span class="string">"git"</span>,</div><div class="line">    <span class="string">"url"</span>: <span class="string">"git+https://github.com/vuejs/vue.git"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"bench:ssr"</span>: <span class="string">"npm run build:ssr &amp;&amp; NODE_ENV=production node benchmarks/ssr/renderToString.js &amp;&amp; NODE_ENV=production VUE_ENV=server node benchmarks/ssr/renderToStream.js"</span>,</div><div class="line">    <span class="string">"build"</span>: <span class="string">"node build/build.js"</span>,</div><div class="line">    <span class="string">"build:ssr"</span>: <span class="string">"npm run build -- vue.runtime.common.js,vue-server-renderer"</span>,</div><div class="line">    <span class="string">"build:weex"</span>: <span class="string">"npm run build -- weex-vue-framework,weex-template-compiler"</span>,</div><div class="line">    <span class="string">"dev"</span>: <span class="string">"TARGET=web-full-dev rollup -w -c build/config.js"</span>,</div><div class="line">    <span class="string">"dev:cjs"</span>: <span class="string">"TARGET=web-runtime-cjs rollup -w -c build/config.js"</span>,</div><div class="line">    <span class="string">"dev:compiler"</span>: <span class="string">"TARGET=web-compiler rollup -w -c build/config.js"</span>,</div><div class="line">    <span class="string">"dev:ssr"</span>: <span class="string">"TARGET=web-server-renderer rollup -w -c build/config.js"</span>,</div><div class="line">    <span class="string">"dev:test"</span>: <span class="string">"karma start build/karma.dev.config.js"</span>,</div><div class="line">    <span class="string">"dev:weex"</span>: <span class="string">"TARGET=weex-framework rollup -w -c build/config.js"</span>,</div><div class="line">    <span class="string">"dev:weex:compiler"</span>: <span class="string">"TARGET=weex-compiler rollup -w -c build/config.js"</span>,</div><div class="line">    <span class="string">"flow"</span>: <span class="string">"flow check"</span>,</div><div class="line">    <span class="string">"install:hooks"</span>: <span class="string">"ln -fs ../../build/git-hooks/pre-commit .git/hooks/pre-commit"</span>,</div><div class="line">    <span class="string">"lint"</span>: <span class="string">"eslint src build test"</span>,</div><div class="line">    <span class="string">"release"</span>: <span class="string">"bash build/release.sh"</span>,</div><div class="line">    <span class="string">"release:weex"</span>: <span class="string">"bash build/release-weex.sh"</span>,</div><div class="line">    <span class="string">"sauce"</span>: <span class="string">"SAUCE=true karma start build/karma.sauce.config.js"</span>,</div><div class="line">    <span class="string">"test"</span>: <span class="string">"npm run lint &amp;&amp; flow check &amp;&amp; npm run test:types &amp;&amp; npm run test:cover &amp;&amp; npm run test:e2e -- --env phantomjs &amp;&amp; npm run test:ssr"</span>,</div><div class="line">    <span class="string">"test:cover"</span>: <span class="string">"karma start build/karma.cover.config.js"</span>,</div><div class="line">    <span class="string">"test:e2e"</span>: <span class="string">"npm run build -- vue.min.js &amp;&amp; node test/e2e/runner.js"</span>,</div><div class="line">    <span class="string">"test:sauce"</span>: <span class="string">"npm run sauce -- 0 &amp;&amp; npm run sauce -- 1 &amp;&amp; npm run sauce -- 2"</span>,</div><div class="line">    <span class="string">"test:ssr"</span>: <span class="string">"npm run build:ssr &amp;&amp; jasmine JASMINE_CONFIG_PATH=test/ssr/jasmine.json"</span>,</div><div class="line">    <span class="string">"test:types"</span>: <span class="string">"tsc -p ./types/test/tsconfig.json"</span>,</div><div class="line">    <span class="string">"test:unit"</span>: <span class="string">"karma start build/karma.unit.config.js"</span>,</div><div class="line">    <span class="string">"test:weex"</span>: <span class="string">"npm run build:weex &amp;&amp; jasmine JASMINE_CONFIG_PATH=test/weex/jasmine.json"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"typings"</span>: <span class="string">"types/index.d.ts"</span>,</div><div class="line">  <span class="string">"unpkg"</span>: <span class="string">"dist/vue.js"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"2.1.10"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h2><p>创建模块，package.json 文件是必不可少的。我们可以使用 NPM 生成 package.json 文件，生成的文件包含了基本的结果<br>命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure></p>
<p>然后根据提示一步一步输入，直到输入“yes”代表生成package.json完毕。<br>如下图所示：<br><img src="https://manlili.github.io/img/150413/1.png" alt="图"><br>接下来我们可以使用以下命令在 npm 资源库中注册用户<br>命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm adduser</div></pre></td></tr></table></figure></p>
<p>根据提示填写自己的信息，看到如下结果<br><img src="https://manlili.github.io/img/150413/2.png" alt="图"><br>接下来我们就用以下命令来发布模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm publish</div></pre></td></tr></table></figure></p>
<p>如果你以上的步骤都操作正确，你就可以跟其他模块一样使用 npm 来安装。</p>
<h2 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h2><p>使用NPM下载和发布代码时都会接触到版本号。NPM使用语义版本号来管理代码，这里简单介绍一下。<br>语义版本号分为X.Y.Z三位，分别代表主版本号、次版本号和补丁版本号。当代码变更时，版本号按以下原则更新。<br>(1)如果只是修复bug，需要更新Z位。<br>(2)如果是新增了功能，但是向下兼容，需要更新Y位。<br>(3)如果有大变动，向下不兼容，需要更新X位。<br>版本号有了这个保证后，在申明第三方包依赖时，除了可依赖于一个固定版本号外，还可依赖于某个范围的版本号。例如”argv”: “0.0.x”表示依赖于0.0.x系列的最新版argv。</p>
<h2 id="使用淘宝-NPM-镜像"><a href="#使用淘宝-NPM-镜像" class="headerlink" title="使用淘宝 NPM 镜像"></a>使用淘宝 NPM 镜像</h2><p>大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。<br>淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。<br>你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<p>这样就可以使用 cnpm 命令来安装模块了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install [name]</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> node技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node入门]]></title>
      <url>/2015/04/06/Node%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>最近有空，花点时间学下node,关于node的安装就不用说了吧，直接进入正题吧。</p>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>简单的说 Node.js 就是运行在服务端的 JavaScript。<br>(1)Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。<br>(2)Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p>
<h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><p>我们可以使用以下命令来检查是否安装了node并查看当前的 Node 版本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node -v</div></pre></td></tr></table></figure></p>
<h2 id="入门例子"><a href="#入门例子" class="headerlink" title="入门例子"></a>入门例子</h2><p>一般学习一门语言都是从“hello world”开始的，下面也写个例子，先来看文件目录<br><img src="https://manlili.github.io/img/150406/1.png" alt="图"><br>再来看hello.js的内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(<span class="string">"hello world"</span>);</div></pre></td></tr></table></figure></p>
<p>然后在lesson01下面打开gitBash命令面板，执行命令：<br><img src="https://manlili.github.io/img/150406/2.png" alt="图"><br>在上图可以看出直接把hello.js里面的内容在控制台打印出来了。<br>其实也可以在控制台计算，举个例子<br><img src="https://manlili.github.io/img/150406/5.png" alt="图"></p>
<h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><p>在我们创建 Node.js 第一个 “Hello, World!” 应用前，让我们先了解下 Node.js 应用是由哪几部分组成的：<br>(1)引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。<br>(2)创建服务器：服务器可以监听客户端的请求，类似于 Apache 、Nginx 等 HTTP 服务器。<br>(3)接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</p>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>引入 required 模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var http = require(<span class="string">"http"</span>);</div></pre></td></tr></table></figure></p>
<h3 id="创建服务器"><a href="#创建服务器" class="headerlink" title="创建服务器"></a>创建服务器</h3><p>接下来我们使用 http.createServer() 方法创建服务器，并使用 listen 方法绑定 8888 端口。 函数通过 request, response 参数来接收和响应数据。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var http = require(<span class="string">'http'</span>);</div><div class="line">http.createServer(<span class="keyword">function</span> (request, response) &#123;</div><div class="line"></div><div class="line">	// 发送 HTTP 头部 </div><div class="line">	// HTTP 状态值: 200 : OK</div><div class="line">	// 内容类型: text/plain</div><div class="line">	response.writeHead(200, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</div><div class="line"></div><div class="line">	// 发送响应数据 <span class="string">"Hello World"</span></div><div class="line">	response.end(<span class="string">'Hello World\n'</span>);</div><div class="line">&#125;).listen(8888);</div><div class="line"></div><div class="line">// 终端打印如下信息</div><div class="line">console.log(<span class="string">'Server running at http://127.0.0.1:8888/'</span>);</div></pre></td></tr></table></figure></p>
<p>来看下控制台结果：<br><img src="https://manlili.github.io/img/150406/3.png" alt="图"><br>在浏览器打印出的结果如下：<br><img src="https://manlili.github.io/img/150406/4.png" alt="图"></p>
]]></content>
      
        <categories>
            
            <category> node技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript中this]]></title>
      <url>/2015/03/27/javascript%E4%B8%ADthis/</url>
      <content type="html"><![CDATA[<p>JavaScript 是一种脚本语言，支持函数式编程、闭包、基于原型的继承等高级功能。JavaScript一开始看起来感觉会很容易入门，但是随着使用的深入，你会发现 JavaScript其实很难掌握，有些基本概念让人匪夷所思。其中JavaScript 中的 this 关键字，就是一个比较容易混乱的概念，在不同的场景下，this会化身不同的对象。有一种观点认为，只有正确掌握了 JavaScript 中的 this 关键字，才算是迈入了 JavaScript 这门语言的门槛。在主流的面向对象的语言中（例如Java,C#等)，this 含义是明确且具体的，即指向当前对象。一般在编译期绑定。而 JavaScript 中this 在运行期进行绑定的，这是JavaScript 中this 关键字具备多重含义的本质原因。<br>JavaScript由于其在运行期进行绑定的特性，JavaScript 中的 this 可以是全局对象、当前对象或者任意对象， 这完全取决于函数的调用方式。JavaScript 中函数的调用有以下几种方式：作为对象方法调用，作为函数调用，作为构造函数调用，和使用 apply 或 call 调用。常言道，字不如表，表不如图。为了让人更好的理解JavaScript this 到底指向什么？下面用一张图来进行解释：<br><img src="https://manlili.github.io/img/150327/1.jpg" alt="图"><br>上图我称之为”JavaScript this决策树”（非严格模式下）。下面通过例子来说明这个图如何来帮助我们对this进行判断：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var point = &#123; </div><div class="line"> x : 0, </div><div class="line"> y : 0, </div><div class="line"> moveTo : <span class="keyword">function</span>(x, y) &#123; </div><div class="line">     this.x = this.x + x; </div><div class="line">     this.y = this.y + y; </div><div class="line">     &#125; </div><div class="line"> &#125;;</div><div class="line">//决策树解释：point.moveTo(1,1)函数不是new进行调用，进入否决策，</div><div class="line">//是用dot(.)进行调用，则指向.moveTo之前的调用对象，即point</div><div class="line">point.moveTo(1,1); //this 绑定到当前对象,即point对象</div></pre></td></tr></table></figure></p>
<p>point.moveTo（）函数在 “JavaScript this决策树”中进行判定的过程是这样的：<br>1）point.moveTo函数调用是用new进行调用的么？这个明显不是，进入“否”分支，即函数是否用dot(.)进行调用？；<br>2）point.moveTo函数是用dot(.)进行调用的，即进入“是”分支，即这里的this指向point.moveTo中.之前的对象point;<br>图解point.moveTo函数的this指向什么的解析图如下图所示：<br><img src="https://manlili.github.io/img/150327/2.jpg" alt="图"><br>再举例，看下面的代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> func(x) &#123; </div><div class="line"> this.x = x; </div><div class="line"> &#125; </div><div class="line">func(5); //this是全局对象window，x为全局变量</div><div class="line">//决策树解析：func()函数是用new进行调用的么？为否，进入func()函数是用dot进行调用的么？为否，则 this指向全局对象window</div><div class="line">x;//x =&gt; 5</div></pre></td></tr></table></figure></p>
<p>func（）函数在 “JavaScript this决策树”中进行判定的过程是这样的：<br>1）func(5)函数调用是用new进行调用的么？这个明显不是，进入“否”分支，即函数是否用dot(.)进行调用？；<br>2）func(5)函数不是用dot(.)进行调用的，即进入“否”分支，即这里的this指向全局变量window，那么this.x实际上就是window.x;<br>图解func函数的this指向什么的解析图如下图所示：<br><img src="https://manlili.github.io/img/150327/3.jpg" alt="图"><br>针对作为函数直接调用的方式，下面看一个复杂的例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">var point = &#123; </div><div class="line"> x : 0, </div><div class="line"> y : 0, </div><div class="line"> moveTo : <span class="keyword">function</span>(x, y) &#123; </div><div class="line">     // 内部函数</div><div class="line">     var moveX = <span class="keyword">function</span>(x) &#123; </div><div class="line">     this.x = x;//this 指向什么？window</div><div class="line">    &#125;; </div><div class="line">    // 内部函数</div><div class="line">    var moveY = <span class="keyword">function</span>(y) &#123; </div><div class="line">    this.y = y;//this 指向什么？window</div><div class="line">    &#125;; </div><div class="line">    moveX(x); </div><div class="line">    moveY(y); </div><div class="line">    &#125; </div><div class="line"> &#125;; </div><div class="line"> point.moveTo(1,1); </div><div class="line"> point.x; //=&gt;0 </div><div class="line"> point.y; //=&gt;0 </div><div class="line"> x; //=&gt;1 </div><div class="line"> y; //=&gt;1</div></pre></td></tr></table></figure></p>
<p>point.moveTo(1,1)函数实际内部调用的是moveX()和moveY()函数, moveX()函数内部的this在 “JavaScript this决策树”中进行判定的过程是这样的：<br>1）moveX(1)函数调用是用new进行调用的么？这个明显不是，进入“否”分支，即函数是否用dot(.)进行调用？；<br>2）moveX(1)函数不是用dot(.)进行调用的，即进入“否”分支，即这里的this指向全局变量window，那么this.x实际上就是window.x;<br>下面看一下作为构造函数调用的例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Point(x,y)&#123; </div><div class="line">    this.x = x; // this ?</div><div class="line">    this.y = y; // this ?</div><div class="line"> &#125;</div><div class="line">var np=new Point(1,1);</div><div class="line">np.x;//1</div><div class="line">var p=Point(2,2);</div><div class="line">p.x;//error, p是一个空对象undefined</div><div class="line">window.x;//2</div></pre></td></tr></table></figure></p>
<p>Point(1,1)函数在var np=new Point(1,1)中的this在 “JavaScript this决策树”中进行判定的过程是这样的：<br>1）var np=new Point(1,1)调用是用new进行调用的么？这个明显是，进入“是”分支，即this指向np；<br>2）那么this.x=1，即np.x=1；<br>Point(2,2)函数在var p= Point(2,2)中的this在 “JavaScript this决策树”中进行判定的过程是这样的：<br>1）var p= Point(2,2)调用是用new进行调用的么？这个明显不是，进入“否”分支，即函数是否用dot(.)进行调用？；<br>2）Point(2,2)函数不是用dot(.)进行调用的？判定为否，即进入“否”分支，即这里的this指向全局变量window，那么this.x实际上就是window.x;<br>3）this.x=2即window.x=2.<br>最后看一下函数用call 和apply进行调用的例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Point(x, y)&#123; </div><div class="line">    this.x = x; </div><div class="line">    this.y = y; </div><div class="line">    this.moveTo = <span class="keyword">function</span>(x, y)&#123; </div><div class="line">        this.x = x; </div><div class="line">        this.y = y; </div><div class="line">    &#125; </div><div class="line"> &#125; </div><div class="line"></div><div class="line">var p1 = new Point(0, 0); </div><div class="line">var p2 = &#123;x: 0, y: 0&#125;; </div><div class="line">p1.moveTo.apply(p2, [10, 10]);//apply实际上为p2.moveTo(10,10)</div><div class="line">p2.x//10</div></pre></td></tr></table></figure></p>
<p>p1.moveTo.apply(p2,[10,10])函数在 “JavaScript this决策树”中进行判定的过程是这样的：<br>我们知 道，apply 和 call 这两个方法异常强大，他们允许切换函数执行的上下文环境（context），即 this 绑定的对象。p1.moveTo.apply(p2,[10,10])实际上是p2.moveTo(10,10)。那么p2.moveTo(10,10) 可解释为：<br>1）p2.moveTo(10,10)函数调用是用new进行调用的么？这个明显不是，进入“否”分支，即函数是否用dot(.)进行调用？；<br>2）p2.moveTo(10,10)函数是用dot(.)进行调用的，即进入“是”分支，即这里的this指向p2.moveTo(10,10)中.之前的对象p2,所以p2.x=10;<br>关于JavaScript函数执行环境的过程，IBM developerworks文档库中的一段描述感觉很不错，摘抄如下：<br>“JavaScript 中的函数既可以被当作普通函数执行，也可以作为对象的方法执行，这是导致 this 含义如此丰富的主要原因。一个函数被执行时，会创建一个执行环境（ExecutionContext），函数的所有的行为均发生在此执行环境中，构建该执 行环境时，JavaScript 首先会创建 arguments变量，其中包含调用函数时传入的参数。接下来创建作用域链。然后初始化变量，首先初始化函数的形参表，值为 arguments变量中对应的值，如果 arguments变量中没有对应值，则该形参初始化为 undefined。如果该函数中含有内部函数，则初始化这些内部函数。如果没有，继续初始化该函数内定义的局部变量，需要注意的是此时这些变量初始化为 undefined，其赋值操作在执行环境（ExecutionContext）创建成功后，函数执行时才会执行，这点对于我们理解 JavaScript 中的变量作用域非常重要，鉴于篇幅，我们先不在这里讨论这个话题。最后为 this变量赋值，如前所述，会根据函数调用方式的不同，赋给 this全局对象，当前对象等。至此函数的执行环境（ExecutionContext）创建成功，函数开始逐行执行，所需变量均从之前构建好的执行环境（ExecutionContext）中读取。”<br>理解这段话对于理解Javascript函数将大有好处。　</p>
<p>另外分享一篇文章，把this讲的更详细[<a href="http://www.360doc.com/content/16/0926/13/36860200_593743023.shtml" target="_blank" rel="external">http://www.360doc.com/content/16/0926/13/36860200_593743023.shtml</a>]</p>
]]></content>
      
        <categories>
            
            <category> js技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> this </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JQuery的extend]]></title>
      <url>/2015/03/03/JQuery%E7%9A%84extend/</url>
      <content type="html"><![CDATA[<p>Jquery的扩展方法extend是我们在写插件的过程中常用的方法，该方法有一些重载原型，在此，我们一起去了解了解。</p>
<h2 id="Jquery的扩展方法原型是"><a href="#Jquery的扩展方法原型是" class="headerlink" title="Jquery的扩展方法原型是:　"></a>Jquery的扩展方法原型是:　</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extend(dest,src1,src2,src3...);</div></pre></td></tr></table></figure>
<p>它的含义是将src1,src2,src3…合并到dest中,返回值为合并后的dest,由此可以看出该方法合并后，是修改了dest的结构的。如果想要得到合并的结果却又不想修改dest的结构，可以如下使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var newSrc=$.extend(&#123;&#125;,src1,src2,src3...)//也就是将<span class="string">"&#123;&#125;"</span>作为dest参数。</div></pre></td></tr></table></figure></p>
<p>这样就可以将src1,src2,src3…进行合并，然后将合并结果返回给newSrc了。如下例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var result=$.extend(&#123;&#125;,&#123;name:<span class="string">"Tom"</span>,age:21&#125;,&#123;name:<span class="string">"Jerry"</span>,sex:<span class="string">"Boy"</span>&#125;)</div></pre></td></tr></table></figure></p>
<p>那么合并后的结果是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result=&#123;name:<span class="string">"Jerry"</span>,age:21,sex:<span class="string">"Boy"</span>&#125;</div></pre></td></tr></table></figure></p>
<p> 也就是说后面的参数如果和前面的参数存在相同的名称，那么后面的会覆盖前面的参数值。</p>
<h2 id="省略dest参数"><a href="#省略dest参数" class="headerlink" title="省略dest参数"></a>省略dest参数</h2><p>上述的extend方法原型中的dest参数是可以省略的，如果省略了，则该方法就只能有一个src参数，而且是将该src合并到调用extend方法的对象中去，如：</p>
<h3 id="extend-src"><a href="#extend-src" class="headerlink" title="$.extend(src)"></a>$.extend(src)</h3><p>该方法就是将src合并到jquery的全局对象中去，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.extend(&#123;</div><div class="line">	hello:<span class="function"><span class="title">function</span></span>()&#123;alert(<span class="string">'hello'</span>);&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>上面就是将hello方法合并到jquery的全局对象中。</p>
<h3 id="fn-extend-src"><a href="#fn-extend-src" class="headerlink" title="$.fn.extend(src)"></a>$.fn.extend(src)</h3><p>该方法将src合并到jquery的实例对象中去，如:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.fn.extend(&#123;</div><div class="line">	hello:<span class="function"><span class="title">function</span></span>()&#123;alert(<span class="string">'hello'</span>);&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>就是将hello方法合并到jquery的实例对象中。</p>
<p>下面例举几个常用的扩展实例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.extend($.net,&#123;</div><div class="line">	hello:<span class="function"><span class="title">function</span></span>()&#123;alert(<span class="string">'hello'</span>);&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>这是在jquery全局对象中扩展一个net命名空间</p>
<h2 id="Jquery的extend方法还有一个重载原型"><a href="#Jquery的extend方法还有一个重载原型" class="headerlink" title="Jquery的extend方法还有一个重载原型"></a>Jquery的extend方法还有一个重载原型</h2><p>参数如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extend(boolean,dest,src1,src2,src3...)</div></pre></td></tr></table></figure></p>
<p>第一个参数boolean代表是否进行深度拷贝，其余参数和前面介绍的一致，什么叫深层拷贝，我们看一个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var result=$.extend( <span class="literal">true</span>, &#123;&#125;, </div><div class="line">&#123; name: <span class="string">"John"</span>, location: &#123;city: <span class="string">"Boston"</span>,county:<span class="string">"USA"</span>&#125; &#125;, </div><div class="line">&#123; last: <span class="string">"Resig"</span>, location: &#123;state: <span class="string">"MA"</span>,county:<span class="string">"China"</span>&#125; &#125; </div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>我们可以看出src1中嵌套子对象location:{city:”Boston”},src2中也嵌套子对象location:{state:”MA”},第一个深度拷贝参数为true，那么合并后的结果就是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result=&#123;name:<span class="string">"John"</span>,last:<span class="string">"Resig"</span>,location:&#123;city:<span class="string">"Boston"</span>,state:<span class="string">"MA"</span>,county:<span class="string">"China"</span>&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>也就是说它会将src中的嵌套子对象也进行合并，而如果第一个参数boolean为false，我们看看合并的结果是什么，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var result=$.extend( <span class="literal">false</span>, &#123;&#125;, </div><div class="line">&#123; name: <span class="string">"John"</span>, location:&#123;city: <span class="string">"Boston"</span>,county:<span class="string">"USA"</span>&#125; &#125;, </div><div class="line">&#123; last: <span class="string">"Resig"</span>, location: &#123;state: <span class="string">"MA"</span>,county:<span class="string">"China"</span>&#125; &#125; </div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>那么合并后的结果就是:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result=&#123;name:<span class="string">"John"</span>,last:<span class="string">"Resig"</span>,location:&#123;state:<span class="string">"MA"</span>,county:<span class="string">"China"</span>&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>以上就是$.extend()在项目中经常会使用到的一些细节。</p>
]]></content>
      
        <categories>
            
            <category> js技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jquery </tag>
            
            <tag> extend </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rem单位引用]]></title>
      <url>/2015/02/24/rem%E5%8D%95%E4%BD%8D%E5%BC%95%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>在W3C官网上是这样描述rem的——“font size of the root element” 。下面我们就一起来详细的了解rem。<br>rem是相对于根元素<html>，这样就意味着，我们只需要在根元素确定一个参考值，，在根元素中设置多大的字体，这完全可以根据您自己的需要。</html></p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>1、头部添加<meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"><br>2、设置根元素html的font-size作为标准，我在这里用的100px<br>3、引入自动判断屏幕的js<br>4、使用的时候记得换算具体的rem<br>测试代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"utf-8"</span> /&gt;</div><div class="line">        &lt;title&gt;&lt;/title&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</div><div class="line">            html&#123;</div><div class="line">                font-size: 100px;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">#test&#123;</span></div><div class="line">                font-size: 5rem;</div><div class="line">            &#125;</div><div class="line">        &lt;/style&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div id=<span class="string">"test"</span>&gt;</div><div class="line">            请拉动屏幕查看字体是否放大</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            ;(<span class="keyword">function</span> (doc, win) &#123;</div><div class="line">                var docEl = doc.documentElement,</div><div class="line">                  resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> window ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</div><div class="line">                  recalc = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                    var clientWidth = docEl.clientWidth;</div><div class="line">                    <span class="keyword">if</span> (!clientWidth) <span class="built_in">return</span>;</div><div class="line">                    docEl.style.fontSize = 100 * (clientWidth / 375) + <span class="string">'px'</span>;</div><div class="line">                  &#125;;</div><div class="line">            </div><div class="line">                <span class="keyword">if</span> (!doc.addEventListener) <span class="built_in">return</span>;</div><div class="line">                win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);</div><div class="line">                doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>);</div><div class="line">            &#125;)(document, window);</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>①为什么要使用CSS逻辑像素数？<br>对于苹果6手机屏幕来说，750px的页面宽度是一个安全的最大宽度，保证了移动端页面两边不会留白。注意这里的px是css逻辑像素，与设备的物理像素是有区别的。如iPhone 6使用的是Retina视网膜屏幕，使用2px x 2px的 device pixel 代表 1px x 1px 的 css pixel，所以设备像素数为750 x 1334px，而它的CSS逻辑像素数为375 x 667px。<br>如果要切移动端页面，你可以先把效果图宽度等比例缩放到375px，很好用。</p>
<p>②为什么要设置html的font-size？<br>rem就是根元素（即：html）的字体大小。html中的所有标签样式凡是涉及到尺寸的（如： height,width,padding,margin,font-size。甚至，left,top等）你都可以放心大胆的用rem作单位。<br>如果你把html的font-size设为100px，前面说过，rem就是html的字体大小，那么1rem = 100px。<br>那么一个宽60px，高40px元素样式设置如下：（需要注意设计稿上60px经过css逻辑像素数处理后是30px，即缩小2倍）<br>width=60px/2/100px=0.3rem<br>height=40px/2/100px=0.2rem</p>
<p>③为什么不一开始把html的font-size设为1px？<br>浏览器一般都有最小字体限制，比如谷歌浏览器，最小中文字体就是12px，所以实际上没有办法让1rem=1px。</p>
]]></content>
      
        <categories>
            
            <category> 心得体会 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rem </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS控制文本的长度，超过一行显示省略号]]></title>
      <url>/2015/02/12/CSS%E6%8E%A7%E5%88%B6%E6%96%87%E6%9C%AC%E7%9A%84%E9%95%BF%E5%BA%A6%EF%BC%8C%E8%B6%85%E8%BF%87%E4%B8%80%E8%A1%8C%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7/</url>
      <content type="html"><![CDATA[<p>代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div style=<span class="string">"width:100px;height:20px;text-overflow:ellipsis; white-space:nowrap; overflow:hidden; "</span>&gt;a b c d e f g h i j k l , msa sd sd sa w df f &lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>text-overflow属性仅是注解，当文本溢出时是否显示省略标记。并不具备其它的样式属性定义。我们想要实现溢出时产生省略号的效果。还必须定义：强制文本在一行内显示（white-space:nowrap）及溢出内容为隐藏（overflow:hidden）。只有这样才能实现溢出文本显示省略号的效果。<br>一、仅定义text-overflow:ellipsis; 不能实现省略号效果。　　<br>二、定义text-overflow:ellipsis; white-space:nowrap; 同样不能实现省略号效果。<br>三、同时应用： text-overflow:ellipsis; white-space:nowrap; overflow:hidden; 可实现所想要得到的溢出文本。</p>
]]></content>
      
        <categories>
            
            <category> css技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器加载的顺序]]></title>
      <url>/2015/01/21/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8A%A0%E8%BD%BD%E7%9A%84%E9%A1%BA%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h2 id="页面响应加载的顺序："><a href="#页面响应加载的顺序：" class="headerlink" title="页面响应加载的顺序："></a>页面响应加载的顺序：</h2><p>1、域名解析-&gt;加载html-&gt;加载js和css-&gt;加载图片等其他信息<br>DOM详细的步骤如下：</p>
<ul>
<li>解析HTML结构。</li>
<li>加载外部脚本和样式表文件。</li>
<li>解析并执行脚本代码。</li>
<li>构造HTML DOM模型。</li>
<li>加载图片等外部文件。</li>
<li>页面加载完毕。</li>
</ul>
<p>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</div><div class="line">&lt;head runat=<span class="string">"server"</span>&gt;</div><div class="line">    &lt;title&gt;Title&lt;/title&gt;</div><div class="line">    &lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</div><div class="line">        body</div><div class="line">        &#123;</div><div class="line">            font-sie: 12px;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">    &lt;link href=<span class="string">"style.css"</span> rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span> media=<span class="string">"all"</span> /&gt;</div><div class="line">    &lt;script src=<span class="string">"js.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">            <span class="keyword">function</span> <span class="function"><span class="title">f1</span></span>() &#123; &#125;</div><div class="line">        &lt;/script&gt;</div><div class="line">        &lt;img src=<span class="string">"1.gif"</span> /&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">        <span class="keyword">function</span> <span class="function"><span class="title">f2</span></span>() &#123; &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>上面代码的加载解析顺序为：</p>
<p> html → head → title → #text(网页标题) → style → 加载样式 → 解析样式 → link → 加载外部样式表文件 → 解析外部样式表 → script → 加载外部脚本文件 → 解析外部脚本文件 → 执行外部脚本→body → div → script → 加载脚本 → 解析脚本 → 执行脚本 → img → script → 加载脚本 → 解析脚本 → 执行脚本 → 加载外部图像文件 → 页面初始化完毕<br> jquery的Dom Ready方法在加载图片等其他信息前就可以操作Dom了,先于window.onload事件触发前执行。</p>
<h2 id="需要注意的事情："><a href="#需要注意的事情：" class="headerlink" title="需要注意的事情："></a>需要注意的事情：</h2><p>script标签很方便，只要加入网页，浏览器就会读取并运行。但是，它存在两个严重的缺陷。<br>(i)严格的读取顺序(js各段代码的依赖性问题)<br>(ii)性能问题<br>浏览器采用”同步模式”加载script标签，也就是说，页面会”堵塞”（blocking），等待javascript文件加载完成，然后再运行后面的HTML代码。当存在多个script标签时，浏览器无法同时读取，必须读取完一个再去读取另一个，造成读取时间大大延长，页面响应缓慢。 为了解决这些问题，可以使用DOM方法，动态加载Javascript文件。代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> loadScript(url)&#123; </div><div class="line">　var script = document.createElement(<span class="string">"script"</span>); </div><div class="line">　script.type = <span class="string">"text/javascript"</span>; </div><div class="line">　script.src = url; </div><div class="line">　document.body.appendChild(script); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样做的原理是，浏览器即时创造出一个script标签，然后”异步”读取Javascript文件。这样不会造成页面堵塞，但会造成另外一个问题：这样加载的Javascript文件，不在原始的DOM结构之中，因此在DOM-ready（DOMContentLoaded）事件和window.onload事件中指定的回调函数对它无效。</p>
<h2 id="缩短页面load时间方法"><a href="#缩短页面load时间方法" class="headerlink" title="缩短页面load时间方法"></a>缩短页面load时间方法</h2><h3 id="页面减肥"><a href="#页面减肥" class="headerlink" title="页面减肥"></a>页面减肥</h3><p>页面的肥瘦是影响加载速度最重要的因素,删除不必要的空格、注释,将script和css移到外部文件,可以使用HTML Tidy来给HTML减肥，还可以使用一些压缩工具来给JavaScript减肥</p>
<h3 id="减少文件数量"><a href="#减少文件数量" class="headerlink" title="减少文件数量"></a>减少文件数量</h3><p>减少页面上引用的文件数量可以减少HTTP连接数,许多JavaScript、CSS文件可以合并最好合并</p>
<h3 id="减少域名查询"><a href="#减少域名查询" class="headerlink" title="减少域名查询"></a>减少域名查询</h3><p>DNS查询和解析域名也是消耗时间的，所以要减少对外部JavaScript、CSS、图片等资源的引用，不同域名的使用越少越好</p>
<h3 id="缓存重用数据"><a href="#缓存重用数据" class="headerlink" title="缓存重用数据"></a>缓存重用数据</h3><p>使用缓存可以大大减少数据请求和渲染时间</p>
<h3 id="优化页面素加载顺序"><a href="#优化页面素加载顺序" class="headerlink" title="优化页面素加载顺序"></a>优化页面素加载顺序</h3><p>首先加载页面最初显示的内容和与之相关的JavaScript和CSS，然后加载DHTML相关的东西，像不是最初显示相关的图片、flash、视频等很肥的资源就最后加载</p>
<h3 id="减少inline-JavaScript的数量"><a href="#减少inline-JavaScript的数量" class="headerlink" title="减少inline JavaScript的数量"></a>减少inline JavaScript的数量</h3><p>浏览器parser会假设inline JavaScript会改变页面结构，所以使用inline JavaScript开销较大，不要使用document.write()这种输出内容的方法，使用现代W3C DOM方法来为现代浏览器处理页面内容</p>
<h3 id="使用现代CSS和合法的标签"><a href="#使用现代CSS和合法的标签" class="headerlink" title="使用现代CSS和合法的标签"></a>使用现代CSS和合法的标签</h3><p>使用现代CSS来减少标签和图像，例如使用现代CSS+文字完全可以替代一些只有文字的图片，使用合法的标签避免浏览器解析HTML时做“error correction”等操作，还可以被HTML Tidy来给HTML减肥</p>
<h3 id="Chunk-your-content"><a href="#Chunk-your-content" class="headerlink" title="Chunk your content"></a>Chunk your content</h3><p>不要使用嵌套tables，而使用非嵌套tables或者divs，将基于大块嵌套的tables的layout分解成小tables，这样显示时不用加载整个页面(或大table)的内容</p>
<h3 id="指定图像和tables的大小"><a href="#指定图像和tables的大小" class="headerlink" title="指定图像和tables的大小"></a>指定图像和tables的大小</h3><p>如果浏览器可以立即决定图像或tables的大小，那么它就可以马上显示页面而不要重新做一些布局安排的工作，这不仅加快了页面的显示，也预防了页面完成加载后布局的一些不当的改变，image使用height和width，或者使用csssprite合并图片</p>
]]></content>
      
        <categories>
            
            <category> 心得体会 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 浏览器加载的顺序 </tag>
            
            <tag> 加载 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[搭建iis本地测试服务器]]></title>
      <url>/2015/01/04/%E6%90%AD%E5%BB%BAiis%E6%9C%AC%E5%9C%B0%E6%B5%8B%E8%AF%95%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>在“开始”选择 “控制面板”，默认是以“类别”显示，<br><img src="https://manlili.github.io/img/150104/1.png" alt="图"></p>
<h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>改成“小图标”显示<br><img src="https://manlili.github.io/img/150104/2.png" alt="图"></p>
<h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>选择“程序和功能”<br><img src="https://manlili.github.io/img/150104/3.png" alt="图"></p>
<h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>进入界面后，点击“启动或关闭Windows功能”<br><img src="https://manlili.github.io/img/150104/4.png" alt="图"></p>
<h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>然后勾选图中的两个选框，注意一定要显示为 勾 ，不能是红色填充！<br><img src="https://manlili.github.io/img/150104/5.png" alt="图"></p>
<h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><p>大约两三分钟后，就可以自动完成结束。</p>
<h2 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h2><p>然后进入控制面板中的“管理工具”里面，选中   Internet 信息服务(IIS)管理器，<br><img src="https://manlili.github.io/img/150104/6.png" alt="图"><br><img src="https://manlili.github.io/img/150104/7.png" alt="图"></p>
<h2 id="第八步"><a href="#第八步" class="headerlink" title="第八步"></a>第八步</h2><p>此时就进入iis服务器控制台<br><img src="https://manlili.github.io/img/150104/8.png" alt="图"></p>
<h2 id="第九步"><a href="#第九步" class="headerlink" title="第九步"></a>第九步</h2><p>在左边就是网站的路径树，在网站栏目下，你可以建立你自己的网站，在建网站时，注意在右边选择“绑定”<br><img src="https://manlili.github.io/img/150104/9.png" alt="图"></p>
<h2 id="第十步"><a href="#第十步" class="headerlink" title="第十步"></a>第十步</h2><p>修改端口，实现本地多站点的分布<br><img src="https://manlili.github.io/img/150104/10.png" alt="图"></p>
<h2 id="第十一步"><a href="#第十一步" class="headerlink" title="第十一步"></a>第十一步</h2><p>此时，我们就可以在地址栏输入<a href="http://localhost" target="_blank" rel="external">http://localhost</a> :81 (默认80)<br>或者输入 <a href="http://127.0.0.1:80" target="_blank" rel="external">http://127.0.0.1:80</a>   (80表示端口号，默认80不需要输入，其他端口就需要加上 “：<em>**</em>”)</p>
]]></content>
      
        <categories>
            
            <category> 心得体会 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iis </tag>
            
            <tag> 搭建服务器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[html5新标签]]></title>
      <url>/2014/12/16/html5%E6%96%B0%E6%A0%87%E7%AD%BE/</url>
      <content type="html"><![CDATA[<p>最近在做的项目中用到了Html5的部分标签，经同事提醒感觉自己用section的次数多的有点过分，今天去找了一篇HTML5新标签的使用方法，特意贴了上来，感谢原作者的分享，方便以后自己使用。</p>
<h2 id="HTML5时代的召唤"><a href="#HTML5时代的召唤" class="headerlink" title="HTML5时代的召唤"></a>HTML5时代的召唤</h2><p>上一代的HTML的标准： HTML 4.01 和 XHTML 1.0 距离今天已经发布了10多年了，而Web端的应用也已经翻天覆地的变换。而且Web前端没有一个统一的通用的互联网标准，各个浏览器间拥有太多的不兼容，在维护这些浏览器兼容性浪费了太多的时间。再有就是之前的多媒体操作、动画等都需要第三方的插件的支持，而这就造成多平台的兼容性的问题，而这一切在HTML5中都将成为标准，这样就在根本上解决了浏览器的差异以及一些第三方插件的问题，让Web应用更加标准，通用性更强，而且更加的独立于设备。<br>HTML5并不是革命性的改变，而只是发展性的。而且对于之前HTML4的很多标准都是兼容的，所有通过最新HTML5标准制作的Web应用也可以轻松的跑在老版本的浏览器上。HTML5标准中的确是集成了很多实用的功能比如：音视频、本地存储、Socket通信、动画等都是之前应用开发中确实感觉到Web端的鸡肋才得到重视和升级的，相信如果你有相关的经验的话也会很有感触。<br>HTML5的目标是：它通过一些新标签，新功能为开发更加简、独立、标准的通用Web应用提供了标准。新的标准解决了三大问题：浏览器兼容问题，解决了文档结构不明确的问题，解决了Web应用程序功能受限等问题。</p>
<h2 id="HTML4与HTML5的区别"><a href="#HTML4与HTML5的区别" class="headerlink" title="HTML4与HTML5的区别"></a>HTML4与HTML5的区别</h2><ul>
<li>取消了一些过时的 HTML4的标签其中包括纯粹显示效果的标记，如font和center，它们已经被 CSS完全取代。其他取消的属性:acronym, applet, basefont, big, center, dir, font, frame, frameset, isindex, noframes, strike, tt。 </li>
<li>添加了一些新的元素<br>比如：更加智能的表单标签：date, email, url  等；更加合理的标签：section, video, progress, nav, meter, time, aside, canvas等。</li>
<li>新的全局属性：id, tabindex, repeat </li>
<li>文件类型声明（&lt;!DOCTYPE&gt;）仅有一型：&lt;!DOCTYPE HTML&gt;。</li>
<li>新的JS API</li>
</ul>
<p>还有很多其他的变化，后续的系列博文中我将一一介绍。</p>
<h2 id="HTML5的新结构标签"><a href="#HTML5的新结构标签" class="headerlink" title="HTML5的新结构标签"></a>HTML5的新结构标签</h2><p>在之前的HTML页面中，大家基本上都是用了Div+CSS的布局方式。而搜索引擎去抓取页面的内容的时候，它只能猜测你的某个Div内的内容是文章内容容器，或者是导航模块的容器，或者是作者介绍的容器等等。也就是说整个HTML文档结构定义不清晰，HTML5中为了解决这个问题，专门添加了：页眉、页脚、导航、文章内容等跟结构相关的结构元素标签。<br>在讲这些新标签之前，我们先看一个普通的页面的布局方式：<br><img src="https://manlili.github.io/img/141216/html4.png" alt="html4"><br>上图中我们非常清晰的看到了，一个普通的页面，会有头部，导航，文章内容，还有附着的右边栏，还有底部等模块，而我们是通过class进行区分，并通过不同的css样式来处理的。但相对来说class不是通用的标准的规范，搜索引擎只能去猜测某部分的功能，另外就是此页面程序交给视力障碍人士来阅读的话，文档结构和内容也不会很清晰。而HTML5新标签带来的新的布局则是下面这种情况：<br><img src="https://manlili.github.io/img/141216/html5.png" alt="html5"></p>
<p>代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">  &lt;header&gt;...&lt;/header&gt;</div><div class="line"></div><div class="line">  &lt;nav&gt;...&lt;/nav&gt;</div><div class="line"></div><div class="line">  &lt;article&gt;</div><div class="line"></div><div class="line">    &lt;section&gt;</div><div class="line"></div><div class="line">      ...</div><div class="line"></div><div class="line">    &lt;/section&gt;</div><div class="line"></div><div class="line">  &lt;/article&gt;</div><div class="line"></div><div class="line">  &lt;aside&gt;...&lt;/aside&gt;</div><div class="line"></div><div class="line">  &lt;footer&gt;...&lt;/footer&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure></p>
<p>有了上面的直接的感官的认识后，我们下面一一来介绍HTML5中的相关结构标签。</p>
<h3 id="section标签"><a href="#section标签" class="headerlink" title="section标签"></a>section标签</h3><p><section>标签，定义文档中的节。比如章节、页眉、页脚或文档中的其它部分。一般用于成节的内容，会在文档流中开始一个新的节。它用来表现普通的文档内容或应用区块，通常由内容及其标题组成。<strong>但section元素标签并非一个普通的容器元素，它表示一段专题性的内容，一般会带有标题。</strong><br>当我们描述一件具体的事物的时候，通常鼓励使用article来代替section；当我们使用section时，仍然可以使用h1来作为标题，而不用担心它所处的位置，以及其它地方是否用到；<strong>当一个容器需要被直接定义样式或通过脚本定义行为时，推荐使用div元素而非section。</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;section&gt;</div><div class="line"></div><div class="line">	&lt;h1&gt;section是什么？&lt;/h1&gt;</div><div class="line"></div><div class="line">	&lt;h2&gt;一个新的章节&lt;/h2&gt;</div><div class="line"></div><div class="line">	&lt;article&gt;</div><div class="line"></div><div class="line">		&lt;h2&gt;关于section&lt;/h1&gt;</div><div class="line"></div><div class="line">		&lt;p&gt;section的介绍&lt;/p&gt;</div><div class="line"></div><div class="line">		...</div><div class="line"></div><div class="line">	&lt;/article&gt;</div><div class="line"></div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure></section></p>
<h3 id="article标签"><a href="#article标签" class="headerlink" title="article标签"></a>article标签</h3><p><article>是一个特殊的section标签，它比section具有更明确的语义，它代表一个独立的、完整的相关内容块，可独立于页面其它内容使用。例如一篇完整的论坛帖子，一篇博客文章，一个用户评论等等。一般来说，article会有标题部分（通常包含在header内），有时也会包含footer。article可以嵌套，内层的article对外层的article标签有隶属关系。例如，一篇博客的文章，可以用article显示，然后一些评论可以以article的形式嵌入其中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;article&gt;</div><div class="line"></div><div class="line">	&lt;header&gt;</div><div class="line"></div><div class="line">		&lt;hgroup&gt;</div><div class="line"></div><div class="line">			&lt;h1&gt;这是一篇介绍HTML 5结构标签的文章&lt;/h1&gt;</div><div class="line"></div><div class="line">			&lt;h2&gt;HTML 5的革新&lt;/h2&gt;</div><div class="line"></div><div class="line">		&lt;/hgroup&gt;</div><div class="line"></div><div class="line">		&lt;time datetime=<span class="string">"2011-03-20"</span>&gt;2011.03.20&lt;/time&gt;</div><div class="line"></div><div class="line">	&lt;/header&gt;</div><div class="line"></div><div class="line">	&lt;p&gt;文章内容详情&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;/article&gt;</div></pre></td></tr></table></figure></article></p>
<h3 id="nav标签"><a href="#nav标签" class="headerlink" title="nav标签"></a>nav标签</h3><p>nav标签代表页面的一个部分，是一个可以作为页面导航的链接组，其中的导航元素链接到其它页面或者当前页面的其它部分，使html代码在语义化方面更加精确，同时对于屏幕阅读器等设备的支持也更好。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;nav&gt;</div><div class="line"></div><div class="line">	&lt;ul&gt;</div><div class="line"></div><div class="line">		&lt;li&gt;厚德IT&lt;/li&gt;</div><div class="line"></div><div class="line">		&lt;li&gt;FlyDragon&lt;/li&gt;</div><div class="line"></div><div class="line">		&lt;li&gt;J飞龙天惊&lt;/li&gt;</div><div class="line"></div><div class="line">	&lt;/ul&gt;</div><div class="line"></div><div class="line">&lt;/nav&gt;</div></pre></td></tr></table></figure></p>
<h3 id="aside标签"><a href="#aside标签" class="headerlink" title="aside标签"></a>aside标签</h3><p>aside标签用来装载非正文的内容，被视为页面里面一个单独的部分。它包含的内容与页面的主要内容是分开的，可以被删除，而不会影响到网页的内容、章节或是页面所要传达的信息。例如广告，成组的链接，侧边栏等等。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;aside&gt;</div><div class="line"></div><div class="line">	&lt;h1&gt;作者简介&lt;/h1&gt;</div><div class="line"></div><div class="line">	&lt;p&gt;厚德IT&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;/aside&gt;</div></pre></td></tr></table></figure></p>
<h3 id="header标签"><a href="#header标签" class="headerlink" title="header标签"></a>header标签</h3><p>header标签定义文档的页眉，通常是一些引导和导航信息。它不局限于写在网页头部，也可以写在网页内容里面。<br>通常header标签至少包含（但不局限于）一个标题标记（h1-h6），还可以包括hgroup标签，还可以包括表格内容、标识、搜索表单、nav导航等。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;header&gt;</div><div class="line"></div><div class="line">	&lt;hgroup&gt;</div><div class="line"></div><div class="line">		&lt;h1&gt;网站标题&lt;/h1&gt;</div><div class="line"></div><div class="line">		&lt;h1&gt;网站副标题&lt;/h1&gt;</div><div class="line"></div><div class="line">	&lt;/hgroup&gt;</div><div class="line"></div><div class="line">&lt;/header&gt;</div></pre></td></tr></table></figure></p>
<h3 id="footer标签"><a href="#footer标签" class="headerlink" title="footer标签"></a>footer标签</h3><p>footer标签定义section或document的页脚，包含了与页面、文章或是部分内容有关的信息，比如说文章的作者或者日期。作为页面的页脚时，一般包含了版权、相关文件和链接。它和header标签使用基本一样，可以在一个页面中多次使用，如果在一个区段的后面加入footer，那么它就相当于该区段的页脚了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;footer&gt;</div><div class="line"></div><div class="line">	COPYRIGHT@厚德IT</div><div class="line"></div><div class="line">&lt;/footer&gt;</div></pre></td></tr></table></figure></p>
<h3 id="hgroup标签"><a href="#hgroup标签" class="headerlink" title="hgroup标签"></a>hgroup标签</h3><p>hgroup标签是对网页或区段section的标题元素（h1-h6）进行组合。例如，在一区段中你有连续的h系列的标签元素，则可以用hgroup将他们括起来<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;hgroup&gt;</div><div class="line"></div><div class="line">	&lt;h1&gt;这是一篇介绍HTML 5结构标签的文章&lt;/h1&gt;</div><div class="line"></div><div class="line">	&lt;h2&gt;HTML 5的革新&lt;/h2&gt;</div><div class="line"></div><div class="line">&lt;/hgroup&gt;</div></pre></td></tr></table></figure></p>
<h3 id="figure-标签"><a href="#figure-标签" class="headerlink" title="figure 标签"></a>figure 标签</h3><p>用于对元素进行组合。多用于图片与图片描述组合。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;figure&gt;</div><div class="line"></div><div class="line">	&lt;img src=<span class="string">"img.gif"</span> alt=<span class="string">"figure标签"</span>  title=<span class="string">"figure标签"</span> /&gt;</div><div class="line">	&lt;figcaption&gt;这儿是图片的描述信息&lt;/figcaption&gt;</div><div class="line"></div><div class="line">&lt;/figure&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 心得体会 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> html5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css3实现页面遮罩效果]]></title>
      <url>/2014/12/05/css3%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E9%81%AE%E7%BD%A9%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<p>今天把页面遮罩的效果发一下，之前遮罩都是用JS实现的，忽然发现CSS3里面的box-shadow属性除了做立体阴影外，还可以做页面的遮罩.<br>下面来看一下完成的动态效果：<br><img src="https://manlili.github.io/img/141205/mask.gif" alt="黑色遮罩"><br>从上图可以看出，就是当鼠标悬浮在按钮上时，会出现整个页面的遮罩，当然调一下透明度就是网页中经常看到的当鼠标悬浮在一张图片上时，周围的其他图片都被遮罩了，这样就达到了突出这张图片的效果，其实这个效果做出来很简单.</p>
<h2 id="主体程序"><a href="#主体程序" class="headerlink" title="主体程序"></a>主体程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"utf-8"</span> /&gt;</div><div class="line">        &lt;title&gt;&lt;/title&gt;</div><div class="line">        &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"css/mask_layer.css"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;p&gt;&lt;/p&gt;</div><div class="line">        &lt;div class=<span class="string">"mask_layer"</span>&gt;</div><div class="line">            &lt;a href=<span class="string">"#"</span> target=<span class="string">"_blank"</span>&gt;透明遮罩&lt;/a&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h2><p>先来说一下原理：<br>box-shadow属性: 水平阴影的位置 垂直阴影的位置 阴影模糊的程序 阴影的尺寸 阴影的颜色 是否为内阴影;<br>既然知道了原理，那么我们就可以在鼠标悬浮在框架上的时候让阴影的尺寸比这个页面还大，这样就可以遮盖了.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">.mask_layer&#123;</div><div class="line">    width: 200px;</div><div class="line">    height: 30px;</div><div class="line">    border: 1px <span class="comment">#7ed2ed solid;</span></div><div class="line">    background: <span class="comment">#7ed2ed;</span></div><div class="line">    text-align: center;</div><div class="line">    line-height: 30px;</div><div class="line">    position: relative;</div><div class="line">    z-index: 999;</div><div class="line">&#125;</div><div class="line">.mask_layer a&#123;</div><div class="line">    text-decoration:none;</div><div class="line">    color: <span class="comment">#323232;</span></div><div class="line">    font-weight: bold;</div><div class="line">&#125;</div><div class="line">.mask_layer:hover&#123;</div><div class="line">    box-shadow:0 0 0 9999px rgba(0,0,0,.4);</div><div class="line">    -webkit-box-shadow:0 0 0 9999px rgba(0,0,0,.4);</div><div class="line">   -moz-box-shadow:0 0 0 9999px rgba(0,0,0,.4);</div><div class="line">   -ms-box-shadow:0 0 0 9999px rgba(0,0,0,.4);</div><div class="line">   -o-box-shadow:0 0 0 9999px rgba(0,0,0,.4);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>额…….看完样式是不是想吐血，太简单了,写出来我都不好意思了,需要注意框架需要置于最上方，所以需要用到z-index属性。</p>
]]></content>
      
        <categories>
            
            <category> css技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css3 </tag>
            
            <tag> 遮罩 </tag>
            
            <tag> box-shadow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[父层与子层的 position 属性在不同组合下的情况]]></title>
      <url>/2014/11/29/%E7%88%B6%E5%B1%82%E4%B8%8E%E5%AD%90%E5%B1%82%E7%9A%84-position-%E5%B1%9E%E6%80%A7%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%BB%84%E5%90%88%E4%B8%8B%E7%9A%84%E6%83%85%E5%86%B5/</url>
      <content type="html"><![CDATA[<p>对position属性的relative和absolute总是很迷糊，今天就花了半天时间对各种情况进行尝试并做了比较。<br>初始状态一个父层、两个子层，都设置宽高、边框、背景色和定位的left和top；<br>html内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"fu"</span>&gt;  </div><div class="line">	父层  </div><div class="line">	&lt;div class=<span class="string">"zi1"</span>&gt;子层1&lt;/div&gt;  </div><div class="line">	&lt;div class=<span class="string">"zi2"</span>&gt;子层2&lt;/div&gt;  </div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>css代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">.fu &#123;</div><div class="line">    background-color: <span class="comment">#CCC;</span></div><div class="line">    height: 300px;</div><div class="line">    width: 400px;</div><div class="line">    border: 5px dotted <span class="comment">#0F0;</span></div><div class="line">    left: 200px;</div><div class="line">    top: 300px;</div><div class="line">    margin: 0px;</div><div class="line">    padding: 0px;</div><div class="line">&#125;</div><div class="line">.zi1 &#123;</div><div class="line">    height: 80px;</div><div class="line">    width: 100px;</div><div class="line">    border: 3px dashed <span class="comment">#96F;</span></div><div class="line">    background-color: <span class="comment">#3F9;</span></div><div class="line">    left: 50px;</div><div class="line">    top: 50px;</div><div class="line">    margin: 0px;</div><div class="line">    padding: 0px;</div><div class="line">&#125;</div><div class="line">.zi2 &#123;</div><div class="line">    height: 150px;</div><div class="line">    width: 100px;</div><div class="line">    border: 3px solid <span class="comment">#CC3;</span></div><div class="line">    background-color: <span class="comment">#F60;</span></div><div class="line">    left: 100px;</div><div class="line">    top: 100px;</div><div class="line">    margin: 0px;</div><div class="line">    padding: 0px;</div><div class="line">&#125;</div><div class="line">body &#123;</div><div class="line">    background-color: <span class="comment">#FF9;</span></div><div class="line">    margin: 0px;</div><div class="line">    padding: 0px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="父层position属性为absolute"><a href="#父层position属性为absolute" class="headerlink" title="父层position属性为absolute"></a>父层position属性为absolute</h2><p>A.父、子层都为空（即初始状态），如图：<br><img src="https://manlili.github.io/img/141129/1.png" alt="图片轮播"></p>
<p>B.父：absolute；子：都为空<br>父层相对浏览器 left：200，top：300；<br>子层全部随着父层走，相对父层位置不变。<br><img src="https://manlili.github.io/img/141129/2.png" alt="图片轮播"></p>
<p>C.父：absolute；子1：absolute；子2：空父层相对浏览器 left：200，top：300；与B相比，子1发生变化：相对父层的边框内边缘左上角left：50，top：50；<br>子2层位置变化，并被子1遮住部分。<br><img src="https://manlili.github.io/img/141129/3.png" alt="图片轮播"></p>
<p>D.父：absolute；子1：relative；子2：空<br>与C相比，子1变化：相对“父层”这两个字的的左下角的点left：50，top：50。<br>子2变化，因为子1用relative虽然偏移了原来的位置，但是仍占着原来的位置空间，所以子2的状态仍然保持为A时初始状态。<br><img src="https://manlili.github.io/img/141129/4.png" alt="图片轮播"></p>
<p>E.父：absolute；子1：relative；子2：absolute；<br>与D相比，子1不变，子2变化至：相对父层的边框内边缘左上角left：100，top：100；<br><img src="https://manlili.github.io/img/141129/5.png" alt="图片轮播"></p>
<p>F.父：absolute；子1：absolute；子2：absolute；<br>变化和预想中的一样，<br>相对于E，子1变回了C中的情况：相对父层的边框内边缘左上角left：50，top：50；<br><img src="https://manlili.github.io/img/141129/6.png" alt="图片轮播"></p>
<p>G.父：absolute；子1：absolute；子2：relative；<br>子2下移，和D中的子1情况相似，相对“父层”这两个字的的左下角的点left：100，top：100。<br><img src="https://manlili.github.io/img/141129/7.png" alt="图片轮播"></p>
<h2 id="父层position变为relative"><a href="#父层position变为relative" class="headerlink" title="父层position变为relative"></a>父层position变为relative</h2><p>H.父：relative；子：都为空<br>此处的参照位置应选成A，父层(联带着两个子层)的位置相对于A(即正常流中的位置)：left:200,top:300;<br><img src="https://manlili.github.io/img/141129/8.png" alt="图片轮播"></p>
<p>I.父：relative；子1：absolute；子2：空<br>与H相比，子1发生变化：相对父层的边框内边缘左上角left：50，top：50；<br>子2层位置变化，并被子1遮住部分。<br>父层内部与C相似。<br><img src="https://manlili.github.io/img/141129/9.png" alt="图片轮播"></p>
<p>J.父：absolute；子1：relative；子2：空<br>与I相比，子1变化：相对“父层”这两个字的的左下角的点left：50，top：50。<br>子2变化，因为子1用relative虽然偏移了原来的位置，但是仍占着原来的位置空间，所以子2的状态仍然保持为A时初始状态<br><img src="https://manlili.github.io/img/141129/10.png" alt="图片轮播"></p>
<p>K.父：relative；子1：relative；子2：absolute；<br>与J相比，子1不变，子2变化至：相对父层的边框内边缘左上角left：100，top：100；<br><img src="https://manlili.github.io/img/141129/11.png" alt="图片轮播"></p>
<p>至此可以发现，父层的position属性为relative或absolute只会影响到 父层(联带着两个子层) 的位置，而对浮层内部的布局内有影响。</p>
<h2 id="父层的position属性设为空"><a href="#父层的position属性设为空" class="headerlink" title="父层的position属性设为空"></a>父层的position属性设为空</h2><p>M.父：空；子1：absolute；子2：空<br>这时会发现，子1 脱离了正常的文档流，相对浏览器左上角的位置left:50,top:50；<br>而父层与子2层还是保持正常文档流的位置。<br><img src="https://manlili.github.io/img/141129/12.png" alt="图片轮播"></p>
<p>N.父：空；子1：relative；子2：空<br>这种情况的父层内部的布局与父层的position属性不为空时内部的布局一样。<br><img src="https://manlili.github.io/img/141129/13.png" alt="图片轮播"></p>
<p>O.父：空；子1：relative；子2：absolute；<br>相对d，子1保持不动，子2脱离正常文档流，相对浏览器左上角的位置left:100,top:100；<br><img src="https://manlili.github.io/img/141129/14.png" alt="图片轮播"></p>
<p>P.父：空；子1：absolute；子2：absolute；<br>相对初始状态，子1和子2都脱离了正常文档流，进入绝对位置，<br>两个层相互叠加，如果需要调控两者前后位置，需要用到Z-index属性，不在本文记录范围。<br><img src="https://manlili.github.io/img/141129/15.png" alt="图片轮播"></p>
<p>Q.父：空；子1：absolute；子2：relative；<br>子2回归正常文档流，进入相对位置。<br><img src="https://manlili.github.io/img/141129/16.png" alt="图片轮播"></p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>1.当父层position属性为空或默认时，内部的子元素如果为absolute，则将会不再受父层的限制。<br>2.如果父层position为relative或absolute，则父层(联带内部子层)根据相应规则进行移动。<br>3.由H、I、J、K等可知，当层position属性为relative时，虽然层的位置会变化，但是该层原本的位置还会被占着，而且可能会覆盖在其他元素上面。<br>4.relative为相对定位，即相对于处于正常流位置。<br>5.absolute为据对定位，相对于上级已经定好位的元素，如果上一级没有定好位的元素，则相对于body定位。<br>6.TOP、RIGHT、BOTTOM、LEFT属性只有当设定了position属性才有效,可以是relative或者absolute。</p>
]]></content>
      
        <categories>
            
            <category> css技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> position </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jquery实现图片轮播]]></title>
      <url>/2014/11/23/jquery%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E8%BD%AE%E6%92%AD/</url>
      <content type="html"><![CDATA[<p>写了一个轮播图练练手，先写了一个手动点击轮播的轮播图，随后我会慢慢接着深入写自动轮播图和鼠标悬浮图片停止移动轮播图等,不能找借口放松自己，原地踏步也算后退.<br>下面来看看最终做的手动点击轮播效果：<br><img src="https://manlili.github.io/img/141123/carousel.gif" alt="图片轮播"></p>
<h2 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h2><p>（1）首先是轮播图的架构，我采用了一个最外边的大div包住两个小div，一个小div里面放四张图片，另一个小div里面放四个数字按钮<br>（2）对最外边的大div设置的宽度为图片的宽度，超出大div宽度的都需要隐藏，但是对于盛放图片的小div设置宽度为2000px，大一点方便四张图左浮动布局<br>（3）当数字按钮点击时，获取按钮的索引值，这样就可以知道每张图片左移多少宽度</p>
<p>好吧，我觉得纯文字说明有点淡淡的忧伤，估计你们也不好理解，我闲的无聊就做了一张搞笑的原理说明图，我要放大招了~~~~<br><img src="https://manlili.github.io/img/141123/carousel.jpg" alt="图片轮播"></p>
<h2 id="主体程序"><a href="#主体程序" class="headerlink" title="主体程序"></a>主体程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"utf-8"</span> /&gt;</div><div class="line">        &lt;title&gt;轮播图①（手动点击轮播）&lt;/title&gt;</div><div class="line">        &lt;link <span class="built_in">type</span>=<span class="string">"text/css"</span> rel=<span class="string">"stylesheet"</span> href=<span class="string">"css/layout.css"</span>  /&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"slideShow"</span>&gt;</div><div class="line">            &lt;!--图片布局开始--&gt;</div><div class="line">            &lt;ul&gt;</div><div class="line">                &lt;li&gt;&lt;a href=<span class="string">"#"</span>&gt;&lt;img src=<span class="string">"img/picture01.jpg"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">                &lt;li&gt;&lt;a href=<span class="string">"#"</span>&gt;&lt;img src=<span class="string">"img/picture02.jpg"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">                &lt;li&gt;&lt;a href=<span class="string">"#"</span>&gt;&lt;img src=<span class="string">"img/picture03.jpg"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">                &lt;li&gt;&lt;a href=<span class="string">"#"</span>&gt;&lt;img src=<span class="string">"img/picture04.jpg"</span> /&gt;&lt;/a&gt;&lt;/li&gt;</div><div class="line">            &lt;/ul&gt;</div><div class="line">            &lt;!--图片布局结束--&gt;</div><div class="line">            </div><div class="line">            &lt;!--按钮布局开始--&gt;</div><div class="line">            &lt;div class=<span class="string">"showNav"</span>&gt;</div><div class="line">                &lt;span class=<span class="string">"active"</span>&gt;1&lt;/span&gt;</div><div class="line">                &lt;span&gt;2&lt;/span&gt;</div><div class="line">                &lt;span&gt;3&lt;/span&gt;</div><div class="line">                &lt;span&gt;4&lt;/span&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;!--按钮布局结束--&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;script src=<span class="string">"js/jquery-1.11.3.js"</span>&gt;&lt;/script&gt;</div><div class="line">        &lt;script src=<span class="string">"js/layout.js"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>上面布局我已经在原理中说明了，感兴趣的自己看原理.</p>
<h2 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">*&#123;</div><div class="line">    margin: 0;</div><div class="line">    padding: 0;</div><div class="line">&#125;</div><div class="line">ul&#123;</div><div class="line">    list-style: none;</div><div class="line">&#125;</div><div class="line">.slideShow&#123;</div><div class="line">    width: 346px;</div><div class="line">    height: 210px;     /*其实就是图片的高度*/</div><div class="line">    border: 1px <span class="comment">#eeeeee solid;</span></div><div class="line">    margin: 100px auto;</div><div class="line">    position: relative;</div><div class="line">    overflow: hidden;    /*此处需要将溢出框架的图片部分隐藏*/</div><div class="line">&#125;</div><div class="line">.slideShow ul&#123;</div><div class="line">    width: 2000px;</div><div class="line">    position: relative;     /*此处需注意relative : 对象不可层叠，但将依据left，right，top，bottom等属性在正常文档流中偏移位置，如果没有这个属性，图片将不可左右移动*/</div><div class="line">&#125;</div><div class="line">.slideShow ul li&#123;</div><div class="line">    <span class="built_in">float</span>: left;     /*让四张图片左浮动，形成并排的横着布局，方便点击按钮时的左移动*/</div><div class="line">    width: 346px;</div><div class="line">&#125;</div><div class="line">.slideShow .showNav&#123;     /*用绝对定位给数字按钮进行布局*/</div><div class="line">    position: absolute;</div><div class="line">    right: 10px;</div><div class="line">    bottom: 5px;</div><div class="line">    text-align:center;</div><div class="line">    font-size: 12px;    </div><div class="line">    line-height: 20px;</div><div class="line">&#125;</div><div class="line">.slideShow .showNav span&#123;</div><div class="line">    cursor: pointer;</div><div class="line">    display: block;</div><div class="line">    <span class="built_in">float</span>: left;</div><div class="line">    width: 20px;</div><div class="line">    height: 20px;</div><div class="line">    background: <span class="comment">#ff5a28;</span></div><div class="line">    margin-left: 2px;</div><div class="line">    color: <span class="comment">#fff;</span></div><div class="line">&#125;</div><div class="line">.slideShow .showNav .active&#123;</div><div class="line">    background: <span class="comment">#b63e1a;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面样式我已经备注出来很重要的地方了，相信有基础的很容易看懂，刚开始我在.slideShow ul样式里面忘了写position: relative;导致后面的jquery程序图片一直无法移动，耽误了很长时间才找出这个错误，希望大家可以注意这个地方.</p>
<h2 id="手动轮播图的jquery程序"><a href="#手动轮播图的jquery程序" class="headerlink" title="手动轮播图的jquery程序"></a>手动轮播图的jquery程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    var slideShow=$(<span class="string">".slideShow"</span>),     //获取最外层框架的名称</div><div class="line">        ul=slideShow.find(<span class="string">"ul"</span>),      </div><div class="line">        showNumber=slideShow.find(<span class="string">".showNav span"</span>),//获取按钮</div><div class="line">        oneWidth=slideShow.find(<span class="string">"ul li"</span>).eq(0).width();   //获取每个图片的宽度</div><div class="line">        </div><div class="line">        showNumber.on(<span class="string">"click"</span>,<span class="function"><span class="title">function</span></span>()&#123;           //为每个按钮绑定一个点击事件      </div><div class="line">            $(this).addClass(<span class="string">"active"</span>).siblings().removeClass(<span class="string">"active"</span>);   //按钮被点击时为这个按钮添加高亮状态，并且将其他按钮高亮状态去掉</div><div class="line">            var index=$(this).index();  //获取哪个按钮被点击，也就是找到被点击按钮的索引值</div><div class="line">            ul.animate(&#123;</div><div class="line">                <span class="string">"left"</span>:-oneWidth*index,   //注意此处用到left属性，所以ul的样式里面需要设置position: relative; 让ul左移N个图片大小的宽度，N根据被点击的按钮索引值index确定</div><div class="line">            &#125;)</div><div class="line">        &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>上面只是手动点击时的轮播，但是想进一步实现定时轮播，下面来看一下分析</p>
<h2 id="定时轮播图的jquery程序"><a href="#定时轮播图的jquery程序" class="headerlink" title="定时轮播图的jquery程序"></a>定时轮播图的jquery程序</h2><p>首先说一下定时自动轮播的原理：<br>1、首先得开一个定时器，假设定时器的时间设置为2000ms，也就是2S定时器执行一次操作<br>2、定时器每隔2S执行的操作就是模拟按次序点击数字按钮，也就是触发click事件，让图片左移</p>
<p>先来看大体效果实现的jQuery代码一：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var timer=null;   //定时器返回值，主要用于关闭定时器</div><div class="line">        var iNow=0;      //iNow为正在展示的图片索引值，当用户打开网页时首先显示第一张图，即索引值为0</div><div class="line">        timer=<span class="built_in">set</span>Interval(<span class="function"><span class="title">function</span></span>()&#123;        //打开定时器</div><div class="line">            iNow++;                          //让图片的索引值次序加1，这样就可以实现顺序轮播图片</div><div class="line">            showNumber.eq(iNow).trigger(<span class="string">"click"</span>);    //模拟触发数字按钮的click事件</div><div class="line">        &#125;,2000);   //2000为轮播的时间</div></pre></td></tr></table></figure></p>
<p>上面的程序可以实现每隔2S图片的轮播效果，但是轮播到最后一张图的时候会停止，因为没有判断iNow是否到达最后一张图，所以有了下面的代码二：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var timer=null;   //定时器返回值，主要用于关闭定时器</div><div class="line">var iNow=0;      //iNow为正在展示的图片索引值，当用户打开网页时首先显示第一张图，即索引值为0</div><div class="line">timer=<span class="built_in">set</span>Interval(<span class="function"><span class="title">function</span></span>()&#123;        //打开定时器</div><div class="line">	iNow++;                          //让图片的索引值次序加1，这样就可以实现顺序轮播图片</div><div class="line">	<span class="keyword">if</span>(iNow&gt;showNumber.length-1)&#123;    //当到达最后一张图的时候，让iNow赋值为第一张图的索引值，轮播效果跳转到第一张图重新开始</div><div class="line">		iNow=0;</div><div class="line">	&#125;</div><div class="line">	showNumber.eq(iNow).trigger(<span class="string">"click"</span>);    //模拟触发数字按钮的click</div><div class="line">&#125;,2000);   //2000为轮播的时间</div></pre></td></tr></table></figure></p>
<p>所以自动jQuery程序的完整代码程序如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    var slideShow=$(<span class="string">".slideShow"</span>),     //获取最外层框架的名称</div><div class="line">        ul=slideShow.find(<span class="string">"ul"</span>),      </div><div class="line">        showNumber=slideShow.find(<span class="string">".showNav span"</span>),//获取按钮</div><div class="line">        oneWidth=slideShow.find(<span class="string">"ul li"</span>).eq(0).width();   //获取每个图片的宽度</div><div class="line">        var timer=null;   //定时器返回值，主要用于关闭定时器</div><div class="line">        var iNow=0;      //iNow为正在展示的图片索引值，当用户打开网页时首先显示第一张图，即索引值为0</div><div class="line">        </div><div class="line">        showNumber.on(<span class="string">"click"</span>,<span class="function"><span class="title">function</span></span>()&#123;           //为每个按钮绑定一个点击事件      </div><div class="line">            $(this).addClass(<span class="string">"active"</span>).siblings().removeClass(<span class="string">"active"</span>);   //按钮点击时为这个按钮添加高亮状态，并且将其他按钮高亮状态去掉</div><div class="line">            var index=$(this).index();  //获取哪个按钮被点击，也就是找到被点击按钮的索引值</div><div class="line">            ul.animate(&#123;</div><div class="line">                <span class="string">"left"</span>:-oneWidth*iNow,   //注意此处用到left属性，所以ul的样式里面需要设置position: relative; 让ul左移N个图片大小的宽度，N根据被点击的按钮索引值index确定</div><div class="line">            &#125;)</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        timer=<span class="built_in">set</span>Interval(<span class="function"><span class="title">function</span></span>()&#123;        //打开定时器</div><div class="line">            iNow++;                          //让图片的索引值次序加1，这样就可以实现顺序轮播图片</div><div class="line">            <span class="keyword">if</span>(iNow&gt;showNumber.length-1)&#123;    //当到达最后一张图的时候，让iNow赋值为第一张图的索引值，轮播效果跳转到第一张图重新开始</div><div class="line">                iNow=0;</div><div class="line">            &#125;</div><div class="line">            showNumber.eq(iNow).trigger(<span class="string">"click"</span>);    //模拟触发数字按钮的click</div><div class="line">        &#125;,2000);   //2000为轮播的时间</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>上面的注释写的很详细了，主要是为了方便想学习的小伙伴看，但是实际上我写程序不会注释的那么详细，都是很简单的内容啦，看到这里你可能以为jQuery程序就完了，那就大错特错了，因为自动轮播效果是正确的，但是手动点击时就会出错，图片自动轮播时，你就算点击按钮它也只是附和你一下，跳转到你点击的按钮，但是仅仅持续一会还是按它轮播的次序，不理会你点击的按钮后应该走的轮播次序，至于原因嘛,是因为手动点击时index的值未赋值给定时器的图片索引iNow，这样iNow就无法存储你点击的按钮索引值，也就是不知道你点击的哪个按钮，既然知道了原因，那么下面就需要进行修改了：<br>修改完成后的jQuery程序最终版就是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    var slideShow=$(<span class="string">".slideShow"</span>),     //获取最外层框架的名称</div><div class="line">        ul=slideShow.find(<span class="string">"ul"</span>),      </div><div class="line">        showNumber=slideShow.find(<span class="string">".showNav span"</span>),//获取按钮</div><div class="line">        oneWidth=slideShow.find(<span class="string">"ul li"</span>).eq(0).width();   //获取每个图片的宽度</div><div class="line">        var timer=null;   //定时器返回值，主要用于关闭定时器</div><div class="line">        var iNow=0;      //iNow为正在展示的图片索引值，当用户打开网页时首先显示第一张图，即索引值为0</div><div class="line">        </div><div class="line">        showNumber.on(<span class="string">"click"</span>,<span class="function"><span class="title">function</span></span>()&#123;           //为每个按钮绑定一个点击事件      </div><div class="line">            $(this).addClass(<span class="string">"active"</span>).siblings().removeClass(<span class="string">"active"</span>);   //按钮点击时为这个按钮添加高亮状态，并且将其他按钮高亮状态去掉</div><div class="line">            var index=$(this).index();  //获取哪个按钮被点击，也就是找到被点击按钮的索引值</div><div class="line">            iNow=index;</div><div class="line">            ul.animate(&#123;</div><div class="line">                <span class="string">"left"</span>:-oneWidth*iNow,   //注意此处用到left属性，所以ul的样式里面需要设置position: relative; 让ul左移N个图片大小的宽度，N根据被点击的按钮索引值iNOWx确定</div><div class="line">            &#125;)</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        timer=<span class="built_in">set</span>Interval(<span class="function"><span class="title">function</span></span>()&#123;        //打开定时器</div><div class="line">            iNow++;                          //让图片的索引值次序加1，这样就可以实现顺序轮播图片</div><div class="line">            <span class="keyword">if</span>(iNow&gt;showNumber.length-1)&#123;    //当到达最后一张图的时候，让iNow赋值为第一张图的索引值，轮播效果跳转到第一张图重新开始</div><div class="line">                iNow=0;</div><div class="line">            &#125;</div><div class="line">            showNumber.eq(iNow).trigger(<span class="string">"click"</span>);    //模拟触发数字按钮的click</div><div class="line">        &#125;,2000);   //2000为轮播的时间</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>来看一下最终实现的效果<br><img src="https://manlili.github.io/img/141123/carousel02.gif" alt="图片轮播"><br>总算写完了,很有成就感，但是鼠标悬浮在轮播图上方时图片停止轮播，鼠标移走后图片接着进行轮播的代码还是要研究一下，毕竟PC端很常见。</p>
<h2 id="鼠标悬浮轮播图暂停"><a href="#鼠标悬浮轮播图暂停" class="headerlink" title="鼠标悬浮轮播图暂停"></a>鼠标悬浮轮播图暂停</h2><p>先说一下鼠标悬浮图片轮播停止，鼠标移走图片轮播开始的原理：<br>1、当鼠标悬浮在框架上方时，清除定时器即用clearInterval(timer)关闭定时器，使自动轮播停止<br>2、当鼠标离开框架上方时，重新启动定时器<br>3、鼠标的悬浮和离开借助于hover函数</p>
<p> hover(over,out)一个模仿悬停事件（鼠标移动到一个对象上面及移出这个对象）的方法。这是一个自定义的方法，它为频繁使用的任务提供了一种“保持在其中”的状态。<br>参数:</p>
<ul>
<li>over (Function) : 鼠标移到元素上要触发的函数。</li>
<li>out (Function): 鼠标移出元素要触发的函数。</li>
</ul>
<p>下面来看jQuery程序：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/*定时自动轮播图片代码开始*/</div><div class="line">        <span class="keyword">function</span> <span class="function"><span class="title">autoPlay</span></span>()&#123;</div><div class="line">            timer=<span class="built_in">set</span>Interval(<span class="function"><span class="title">function</span></span>()&#123;        //打开定时器</div><div class="line">            iNow++;                          //让图片的索引值次序加1，这样就可以实现顺序轮播图片</div><div class="line">            <span class="keyword">if</span>(iNow&gt;showNumber.length-1)&#123;    //当到达最后一张图的时候，让iNow赋值为第一张图的索引值，轮播效果跳转到第一张图重新开始</div><div class="line">                iNow=0;</div><div class="line">            &#125;</div><div class="line">            showNumber.eq(iNow).trigger(<span class="string">"click"</span>);    //模拟触发数字按钮的click</div><div class="line">            &#125;,2000);   //2000为轮播的时间</div><div class="line">        &#125;</div><div class="line">        autoPlay();</div><div class="line"> /*定时自动轮播图片代码结束*/</div></pre></td></tr></table></figure></p>
<p>定义完成后不要忘记调用这个函数，即autoPlay();</p>
<p>那么最终版的jQuery程序如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">$(document).ready(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    var slideShow=$(<span class="string">".slideShow"</span>),     //获取最外层框架的名称</div><div class="line">        ul=slideShow.find(<span class="string">"ul"</span>),      </div><div class="line">        showNumber=slideShow.find(<span class="string">".showNav span"</span>),//获取按钮</div><div class="line">        oneWidth=slideShow.find(<span class="string">"ul li"</span>).eq(0).width();   //获取每个图片的宽度</div><div class="line">        var timer=null;   //定时器返回值，主要用于关闭定时器</div><div class="line">        var iNow=0;      //iNow为正在展示的图片索引值，当用户打开网页时首先显示第一张图，即索引值为0</div><div class="line">        </div><div class="line">        /*手动点击按钮进行图片轮播代码开始*/</div><div class="line">        showNumber.on(<span class="string">"click"</span>,<span class="function"><span class="title">function</span></span>()&#123;           //为每个按钮绑定一个点击事件      </div><div class="line">            $(this).addClass(<span class="string">"active"</span>).siblings().removeClass(<span class="string">"active"</span>);   //按钮点击时为这个按钮添加高亮状态，并且将其他按钮高亮状态去掉</div><div class="line">            var index=$(this).index();  //获取哪个按钮被点击，也就是找到被点击按钮的索引值</div><div class="line">            iNow=index;</div><div class="line">            ul.animate(&#123;</div><div class="line">                <span class="string">"left"</span>:-oneWidth*iNow,   //注意此处用到left属性，所以ul的样式里面需要设置position: relative; 让ul左移N个图片大小的宽度，N根据被点击的按钮索引值iNow确定</div><div class="line">            &#125;)</div><div class="line">        &#125;);</div><div class="line">        /*手动点击按钮进行图片轮播代码结束*/</div><div class="line">        </div><div class="line">        </div><div class="line">        /*定时自动轮播图片代码开始*/</div><div class="line">        <span class="keyword">function</span> <span class="function"><span class="title">autoPlay</span></span>()&#123;</div><div class="line">            timer=<span class="built_in">set</span>Interval(<span class="function"><span class="title">function</span></span>()&#123;        //打开定时器</div><div class="line">            iNow++;                          //让图片的索引值次序加1，这样就可以实现顺序轮播图片</div><div class="line">            <span class="keyword">if</span>(iNow&gt;showNumber.length-1)&#123;    //当到达最后一张图的时候，让iNow赋值为第一张图的索引值，轮播效果跳转到第一张图重新开始</div><div class="line">                iNow=0;</div><div class="line">            &#125;</div><div class="line">            showNumber.eq(iNow).trigger(<span class="string">"click"</span>);    //模拟触发数字按钮的click</div><div class="line">            &#125;,2000);   //2000为轮播的时间</div><div class="line">        &#125;</div><div class="line">        autoPlay();</div><div class="line">        /*定时自动轮播图片代码结束*/</div><div class="line">        </div><div class="line">        /*鼠标悬浮图片停止轮播代码开始*/</div><div class="line">        slideShow.hover(</div><div class="line">            <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">                clearInterval(timer);</div><div class="line">            &#125;,autoPlay</div><div class="line">        );</div><div class="line">        /*鼠标悬浮图片停止轮播代码结束*/</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>来看一下最终实现的效果<br><img src="https://manlili.github.io/img/141123/carousel03.gif" alt="图片轮播"><br>已经把轮播图写的差不多了，基本上满足了我明天项目上的应用,有时间再把轮播图的其他功能完善一下吧,还是周末好，可以自由自在的写代.</p>
]]></content>
      
        <categories>
            
            <category> js技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> juery </tag>
            
            <tag> 轮播图 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript学习的思维导图]]></title>
      <url>/2014/11/11/javascript%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>今天逛博客园，发现了好东西，我给偷过来了，那就是javascript学习的思维导图，比自己整理更快速。</p>
<h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p>思维导图小tips：<br>　　思维导图又叫心智图，是表达发射性思维的有效的图形思维工具 ，它简单却又极其有效，是一种革命性的思维工具。思维导图运用图文并重的技巧，把各级主题的关系用相互隶属与相关的层级图表现出来，把主题关键词与图像、 颜色等建立记忆链接，思维导图充分运用左右脑的机能，利用记忆、阅读、思维的规律，协助人们在科学与艺术、逻辑与想象之间平衡发展，从而开启人类大脑的无 限潜能。思维导图因此具有人类思维的强大功能</p>
<p>分别归类为：</p>
<ul>
<li>javascript变量</li>
<li>javascript运算符</li>
<li>javascript数组</li>
<li>javascript流程语句</li>
<li>javascript字符串函数</li>
<li>javascript函数基础</li>
<li>javascript基础DOM操作</li>
<li>javascript正则表达式</li>
</ul>
<h3 id="javascript变量"><a href="#javascript变量" class="headerlink" title="javascript变量"></a>javascript变量</h3><p><img src="https://manlili.github.io/img/141111/1.png" alt="图"></p>
<h3 id="javascript运算符"><a href="#javascript运算符" class="headerlink" title="javascript运算符"></a>javascript运算符</h3><p><img src="https://manlili.github.io/img/141111/2.png" alt="图"></p>
<h3 id="javascript数组"><a href="#javascript数组" class="headerlink" title="javascript数组"></a>javascript数组</h3><p><img src="https://manlili.github.io/img/141111/3.png" alt="图"></p>
<h3 id="javascript流程语句"><a href="#javascript流程语句" class="headerlink" title="javascript流程语句"></a>javascript流程语句</h3><p><img src="https://manlili.github.io/img/141111/4.png" alt="图"></p>
<h3 id="javascript字符串函数"><a href="#javascript字符串函数" class="headerlink" title="javascript字符串函数"></a>javascript字符串函数</h3><p><img src="https://manlili.github.io/img/141111/5.png" alt="图"></p>
<h3 id="javascript函数基础"><a href="#javascript函数基础" class="headerlink" title="javascript函数基础"></a>javascript函数基础</h3><p><img src="https://manlili.github.io/img/141111/6.png" alt="图"></p>
<h3 id="javascript基础DOM操作"><a href="#javascript基础DOM操作" class="headerlink" title="javascript基础DOM操作"></a>javascript基础DOM操作</h3><p><img src="https://manlili.github.io/img/141111/7.png" alt="图"></p>
<h3 id="javascript正则表达式"><a href="#javascript正则表达式" class="headerlink" title="javascript正则表达式"></a>javascript正则表达式</h3><p><img src="https://manlili.github.io/img/141111/8.png" alt="图"></p>
]]></content>
      
        <categories>
            
            <category> 心得体会 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[animation steps属性实现帧动画]]></title>
      <url>/2014/11/01/animation-steps%E5%B1%9E%E6%80%A7%E5%AE%9E%E7%8E%B0%E5%B8%A7%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<p>用如下的图来实现帧动画<br><img src="https://manlili.github.io/img/141101/1.png" alt="图"><br>下面来看下实现的代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"utf-8"</span> /&gt;</div><div class="line">        &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"</span> /&gt;</div><div class="line">        &lt;title&gt;&lt;/title&gt;</div><div class="line">        &lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</div><div class="line">            .test&#123;</div><div class="line">                width: 140px;</div><div class="line">                height: 150px;</div><div class="line">                background: url(img/sprites.png) no-repeat;</div><div class="line">                animation: lily 0.6s steps(12)  infinite;</div><div class="line">            &#125;</div><div class="line">            @keyframes lily&#123;</div><div class="line">                0%&#123;</div><div class="line">                    background-position: 0 0;</div><div class="line">                &#125;</div><div class="line">                100%&#123;</div><div class="line">                    background-position: -1680px 0;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &lt;/style&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">             </div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> css技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css3 </tag>
            
            <tag> 帧动画 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS3实现左右摇摆跳动的心动画]]></title>
      <url>/2014/10/20/css3%E5%AE%9E%E7%8E%B0%E5%B7%A6%E5%8F%B3%E6%91%87%E6%91%86%E8%B7%B3%E5%8A%A8%E7%9A%84%E5%BF%83%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<p>还在为无法表达内心澎湃的心情而着急吗？还在为制作跳动的心而烦恼吗？哈哈,今天我就把代码全部奉上，为你们追妹子添点贡献，下面来看最终的动态效果（事先说明一下：我用的截屏gif制作软件是绿色版的，所以gif动态图心的抖动效果会有点慢而且卡卡的，但是实际效果很棒,不信你可以粘贴代码看看呗）<br><img src="https://manlili.github.io/img/141020/heart.gif" alt="跳动的心"><br>其实上面的动画类似于我们小时候荡的秋千，也叫作“秋千动画”，一般用在想让用户点击这个图标的时候，不仅仅限制于表白用O(∩_∩)O，比如企业招聘时想让求职者点击投简历的图标进入另一个页面等。<br>书写这段程序的思路：<br>（1）先要定义一个动画，在10%，20%，30%…….100%时心形图的不同状态，当然时间段和状态都是看自己的需要设定<br>（2）调用动画，然后设置为无限死循环播放</p>
<h2 id="主体结构"><a href="#主体结构" class="headerlink" title="主体结构"></a>主体结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"utf-8"</span> /&gt;</div><div class="line">        &lt;title&gt;心动时左右摇摆&lt;/title&gt;</div><div class="line">        &lt;link <span class="built_in">type</span>=<span class="string">"text/css"</span> rel=<span class="string">"stylesheet"</span> href=<span class="string">"css/animate.css"</span> /&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;img class=<span class="string">"heart"</span> src=<span class="string">"img/heart.png"</span>  /&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>下面来分析下上面的思路</p>
<h3 id="css3里面translate属性"><a href="#css3里面translate属性" class="headerlink" title="css3里面translate属性"></a>css3里面translate属性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">transform: none|transform-functions;</div></pre></td></tr></table></figure>
<p>关于transform具体的值如下：</p>
<ul>
<li>none    定义不进行转换。</li>
<li>matrix(n,n,n,n,n,n)    定义 2D 转换，使用六个值的矩阵。    </li>
<li>matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)    定义 3D 转换，使用 16 个值的 4x4 矩阵。    </li>
<li>translate(x,y)    定义 2D 转换。    </li>
<li>translate3d(x,y,z)    定义 3D 转换。    </li>
<li>translateX(x)    定义转换，只是用 X 轴的值。    </li>
<li>translateY(y)    定义转换，只是用 Y 轴的值。    </li>
<li>translateZ(z)    定义 3D 转换，只是用 Z 轴的值。    </li>
<li>scale(x,y)    定义 2D 缩放转换。    </li>
<li>scale3d(x,y,z)    定义 3D 缩放转换。    </li>
<li>scaleX(x)    通过设置 X 轴的值来定义缩放转换。    </li>
<li>scaleY(y)    通过设置 Y 轴的值来定义缩放转换。    </li>
<li>scaleZ(z)    通过设置 Z 轴的值来定义 3D 缩放转换。    </li>
<li>rotate(angle)    定义 2D 旋转，在参数中规定角度。    </li>
<li>rotate3d(x,y,z,angle)    定义 3D 旋转。    </li>
<li>rotateX(angle)    定义沿着 X 轴的 3D 旋转。    </li>
<li>rotateY(angle)    定义沿着 Y 轴的 3D 旋转。    </li>
<li>rotateZ(angle)    定义沿着 Z 轴的 3D 旋转。    </li>
<li>skew(x-angle,y-angle)    定义沿着 X 和 Y 轴的 2D 倾斜转换。    </li>
<li>skewX(angle)    定义沿着 X 轴的 2D 倾斜转换。    </li>
<li>skewY(angle)    定义沿着 Y 轴的 2D 倾斜转换。    </li>
<li>perspective(n)    为 3D 转换元素定义透视视图。</li>
</ul>
<p>上面这些测试例子可参考[<a href="http://www.w3school.com.cn/cssref/pr_transform.asp" target="_blank" rel="external">http://www.w3school.com.cn/cssref/pr_transform.asp</a>]</p>
<p>结合本次跳动心的主题可知用到的是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">transform:scale(1) rotate(0)</div></pre></td></tr></table></figure></p>
<h2 id="css样式"><a href="#css样式" class="headerlink" title="css样式"></a>css样式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">/*定义一个名字叫heartAnimate的动画，实现心形图的放大以及旋转效果*/</div><div class="line">@keyframes heartAnimate&#123; </div><div class="line">    0%,100%&#123;transform:scale(1) rotate(0);&#125;                       /*0%,100%时保持图形的原大小且不旋转*/</div><div class="line">    10%,30%&#123;transform: scale(0.9) rotate(3deg);&#125;                  /*10%,30%时图形缩小成0.9倍，并且顺时针旋转3度*/</div><div class="line">    20%,40%,60%,80%&#123;transform:scale(1.1) rotate(-3deg);&#125;         /*20%,40%,60%,80%时图形扩大成1.1倍，并且逆时针旋转3度*/</div><div class="line">    50%,70%&#123; transform:scale(1.1) rotate(3deg);&#125;                 /*50%,70%时图形扩大成1.1倍，并且顺时针旋转3度*/</div><div class="line">&#125;</div><div class="line">@-webkit-keyframes heartAnimate&#123;</div><div class="line">    0%,100%&#123;-webkit-transform: scale(1) rotate(0);&#125;</div><div class="line">    10%,30%&#123;-webkit-transform:scale(0.9) rotate(3deg);&#125;</div><div class="line">    20%,40%,60%,80%&#123;-webkit-transform: scale(1.1) rotate(-3deg);&#125;</div><div class="line">    50%,70%&#123;-webkit-transform: scale(1.1) rotate(3deg);&#125;</div><div class="line">&#125;</div><div class="line">@-moz-keyframes heartAnimate&#123;</div><div class="line">    0%,100%&#123;-moz-transform:scale(1) rotate(0);&#125;</div><div class="line">    10%,30%&#123;-moz-transform: scale(0.9) rotate(3deg);&#125;</div><div class="line">    20%,40%,60%,80%&#123;-moz-transform:scale(1.1) rotate(-3deg);&#125;</div><div class="line">    50%,70%&#123; -moz-transform:scale(1.1) rotate(3deg);&#125;</div><div class="line">&#125;</div><div class="line">@-o-keyframes heartAnimate&#123;</div><div class="line">    0%,100%&#123;-o-transform:scale(1) rotate(0);&#125;</div><div class="line">    10%,30%&#123;-o-transform: scale(0.9) rotate(3deg);&#125;</div><div class="line">    20%,40%,60%,80%&#123;-o-transform:scale(1.1) rotate(-3deg);&#125;</div><div class="line">    50%,70%&#123; -o-transform:scale(1.1) rotate(3deg);&#125;</div><div class="line">&#125;</div><div class="line">@-ms-keyframes heartAnimate&#123;</div><div class="line">    0%,100%&#123;-ms-transform:scale(1) rotate(0);&#125;</div><div class="line">    10%,30%&#123;-ms-transform: scale(0.9) rotate(3deg);&#125;</div><div class="line">    20%,40%,60%,80%&#123;-ms-transform:scale(1.1) rotate(-3deg);&#125;</div><div class="line">    50%,70%&#123; -ms-transform:scale(1.1) rotate(3deg);&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.heart&#123;</div><div class="line">    -webkit-animation: heartAnimate 1s ease infinite;    /*调用名称为heartAnimate的动画，全程1s，速度曲线是ease，无限循环播放*/</div><div class="line">    -moz-animation: heartAnimate 1s ease infinite;</div><div class="line">    -o-animation: heartAnimate 1s ease infinite;</div><div class="line">    -ms-animation: heartAnimate 1s ease infinite;</div><div class="line">    animation: heartAnimate 1s ease infinite;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的程序我的注释也写得很清楚了，感兴趣的可以自己试试看，主要就是css3中scale的放大功能和rotate的旋转功能应用，把握好状态的设置，动画效果还是很Q的.</p>
]]></content>
      
        <categories>
            
            <category> css技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css3 </tag>
            
            <tag> 动画 </tag>
            
            <tag> translate </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用github pages + hexo搭建自己的博客]]></title>
      <url>/2014/10/16/%E5%88%A9%E7%94%A8github%20pages%20+%20hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>之前也搭了自己的网站，但是每个月都需要花费一定的费用去维护网站，后来发现在github可以建立自己的免费博客，觉得很划算，就试一试，结果发现效果还是很好的，还可以自定义主题和样式在，很方便。</p>
<h3 id="为什么选择GitHub-Pages"><a href="#为什么选择GitHub-Pages" class="headerlink" title="为什么选择GitHub Pages"></a>为什么选择GitHub Pages</h3><ul>
<li>域名是github的二级域名，不用给空间付费，不用给域名付费</li>
<li>多主题可选，自由编辑样式和代码</li>
<li>支持本地编写、本地预览</li>
<li>seo优化上，github在google上权重高</li>
</ul>
<h3 id="准备步骤-自己点击链接安装"><a href="#准备步骤-自己点击链接安装" class="headerlink" title="准备步骤(自己点击链接安装)"></a>准备步骤(自己点击链接安装)</h3><ul>
<li>安装<a href="https://nodejs.org/en/" target="_blank" rel="external">node.js</a></li>
<li>安装<a href="https://git-for-windows.github.io/" target="_blank" rel="external">git</a></li>
<li>注册<a href="https://github.com/" target="_blank" rel="external">github</a></li>
</ul>
<h3 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h3><h4 id="第一步：获取SSH-keys"><a href="#第一步：获取SSH-keys" class="headerlink" title="第一步：获取SSH keys"></a>第一步：获取SSH keys</h4><ul>
<li>Git是分布式的代码管理工具，远程的代码管理是基于SSH的，所以要使用远程的Git则需要SSH的配置。建立博客之前要先用SSH keys让我们的本地git项目与远程的github建立联系。首先我们需要检查你电脑上现有的ssh key。</li>
</ul>
<p>①设置Git的user name和email：右键打开Git Bash，输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"你的英文名字"</span></div><div class="line">$ git config --global user.email <span class="string">"邮件地址@youremail.com"</span></div></pre></td></tr></table></figure></p>
<p>②查看是否有SSH keys<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/.ssh</div></pre></td></tr></table></figure></p>
<p>如果提示：No such file or directory 说明你是第一次使用git。第一次使用git的话需要我们生成SSH keys，在Git Bash输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"邮件地址@youremail.com"</span></div></pre></td></tr></table></figure></p>
<p>然后系统会要你输入密码。这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入，最好密码设为空。<br>接着输入命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ls</div></pre></td></tr></table></figure></p>
<p>会出现id_rsa 和 id_rsa.pub ，这里我们主要是需要公钥 id_rsa.pub内容,输入命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat  id_rsa.pub</div></pre></td></tr></table></figure></p>
<p>会得到一串字符串，这就是SSH keys记得复制保存</p>
<h4 id="第二步：将SSH-keys添加到Github上"><a href="#第二步：将SSH-keys添加到Github上" class="headerlink" title="第二步：将SSH keys添加到Github上"></a>第二步：将SSH keys添加到Github上</h4><p>登陆github系统。点击右上角的图像—&gt;Settings —&gt; SSH and GPG keys。如下图<br><img src="https://manlili.github.io/img/141016/1.png" alt="Alt text"><br><img src="https://manlili.github.io/img/141016/2.png" alt="Alt text"><br>点击右上角New SSH key，把你刚刚复制SSH keys黏贴到里面（Key文本框中）， 点击Add SSH key就ok了<br>测试一下</p>
<p>可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<p>然后输入yes，就会看到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi manlili! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></div></pre></td></tr></table></figure></p>
<h4 id="第三步：开始建立博客"><a href="#第三步：开始建立博客" class="headerlink" title="第三步：开始建立博客"></a>第三步：开始建立博客</h4><p>①与GitHub建立好链接之后，就可以方便的使用它提供的Pages服务，GitHub Pages分两种，<br>一种是你的GitHub用户名建立的username.github.io这样的用户&amp;组织页（站），另一种是依附项目的pages。<br>想建立个人博客是用的第一种，形如<a href="https://manlili.github.io/" target="_blank" rel="external">https://manlili.github.io/</a>这样的可访问的站，每个用户名下面只能建立一个。</p>
<p>②Github上建立仓库<br>登陆Github，建立一个名为manlili.github.io的仓库。<br>注意！Github Pages的Repository名字是特定的，比如我Github账号是manlili，那么我Github Pages Repository名字就是manlili.github.io。<br>详细建立仓库过程略过。</p>
<p>③安装Hexo<br>Hexo是一个简单、快速、强大的博客发布工具，支持Markdown格式。<br>打开Git Bash<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo</div></pre></td></tr></table></figure></p>
<p>安装完毕后，在我的电脑随便一个位置中建立一个名字叫hexo的文件夹，然后在此文件夹中右键打开Git Bash。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure></p>
<p>Hexo随后会自动在目标文件夹建立网站所需要的所有文件。<br>现在我们已经搭建起本地的hexo博客了。<br>在hexo目录下输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo s</div></pre></td></tr></table></figure></p>
<p>然后到浏览器输入localhost:4000看看，可以看到默认主题下的博客，这就实现了本地预览了。</p>
<p>④配置Hexo（更换主题，添加用户图片，字体，颜色等）<br>详情请见<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">配置连接</a>,自己看看官网手册，想做的多炫都可以</p>
<p>⑤上传到Github仓库<br>打开hexo根目录下的_config.yml，拉到最下面<br>配置为这样子,只需要把manlili改为你自己的github用户名就可以了。（注意格式，冒号后要有空格，你可以直接复制以下代码再作修改）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: https://github.com/manlili/manlili.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>然后执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g <span class="comment">#generate生成</span></div><div class="line">$ hexo d <span class="comment">#deploy开发环境</span></div></pre></td></tr></table></figure></p>
<p>如果看到结果最后一行是INFO Deploy done:git则没有问题。否则，则可以把上面的配置改为下面这种使用SSH方式的提交，把用户名改为你自己的用户名<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Deployment</span></div><div class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: git@github.com:manlili/manlili.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>再次执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g <span class="comment">#generate生成</span></div><div class="line">$ hexo d <span class="comment">#deploy开发环境</span></div></pre></td></tr></table></figure></p>
<p>如果在执行 hexo deploy 后,出现 error deployer not found:github 的错误，网上说是hexo 更新到3.0之后的一个坑，则需要安装hexo-deployer-git<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>安装好在执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g <span class="comment">#generate生成</span></div><div class="line">$ hexo d <span class="comment">#deploy开发环境</span></div></pre></td></tr></table></figure></p>
<p>最后你就可以看到自己的博客样子了，比如<a href="https://manlili.github.io/" target="_blank" rel="external">我的博客https://manlili.github.io/</a></p>
]]></content>
      
        <categories>
            
            <category> 心得体会 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 搭建博客 </tag>
            
            <tag> github pages </tag>
            
            <tag> blogs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS3实现文字淡入的动画]]></title>
      <url>/2014/10/07/CSS3%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E6%B7%A1%E5%85%A5%E7%9A%84%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<p>今天有空把css3里面动画研究一下，都是一些简单的东西，但是千里之行始于足下，我虽然走的慢，但是未停下前进的脚步,<br>下来看下我做的“淡入的文字”最终动态效果：<br><img src="https://manlili.github.io/img/141007/wordanimate.gif" alt="文字淡入"><br>上面这个动画效果制作的过程是：<br>（1）先自定义一个透明度从0到1变化的动画，然后在animation中调用这个动画效果<br>（2）注意不同行文字出现的时间先后，这个通过animation中延时属性可以实现<br>（3）规定文字最终动态为动画的最终显示状态，否则文字显示完会自动消失，这个用animation-fill-mode可以实现</p>
<h2 id="主体结构"><a href="#主体结构" class="headerlink" title="主体结构"></a>主体结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=<span class="string">"utf-8"</span> /&gt;</div><div class="line">        &lt;title&gt;淡入的文字&lt;/title&gt;</div><div class="line">        &lt;link <span class="built_in">type</span>=<span class="string">"text/css"</span> rel=<span class="string">"stylesheet"</span> href=<span class="string">"css/animate.css"</span> /&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div class=<span class="string">"fade-in-words"</span>&gt;</div><div class="line">            &lt;div class=<span class="string">"first-words"</span>&gt;山一程，水一程，&lt;/div&gt;</div><div class="line">            &lt;div class=<span class="string">"second-words"</span>&gt;身向榆关那畔行，&lt;/div&gt;</div><div class="line">            &lt;div class=<span class="string">"third-words"</span>&gt;夜深千帐灯。&lt;/div&gt;</div><div class="line">            &lt;div class=<span class="string">"four-words"</span>&gt;风一更，雪一更，&lt;/div&gt;</div><div class="line">            &lt;div class=<span class="string">"five-words"</span>&gt;聒碎乡心梦不成，&lt;/div&gt;</div><div class="line">            &lt;div class=<span class="string">"six-words"</span>&gt;故园无此声。&lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>由于只是单纯的练习css，暂时不牵扯太多js，文字都是提前布局好的，先来看下知识点</p>
<h3 id="css3中动画属性"><a href="#css3中动画属性" class="headerlink" title="css3中动画属性"></a>css3中动画属性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">animation: name duration timing-function delay iteration-count direction;</div></pre></td></tr></table></figure>
<p>其中各种属性含义</p>
<ul>
<li>animation-name    规定需要绑定到选择器的 keyframe 名称。</li>
<li>animation-duration    规定完成动画所花费的时间，以秒或毫秒计。（必须设置）</li>
<li>animation-timing-function    规定动画的速度曲线。</li>
<li>animation-delay    规定在动画开始之前的延迟。</li>
<li>animation-iteration-count    规定动画应该播放的次数。</li>
<li>animation-direction    规定是否应该轮流反向播放动画。</li>
</ul>
<h4 id="animation-name"><a href="#animation-name" class="headerlink" title="animation-name"></a>animation-name</h4><p> animation-name是@keyframes动画规定名称,关于keyframes用法如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@keyframes mymove</div><div class="line">&#123;</div><div class="line">	from &#123;width:10px;&#125;</div><div class="line">	to &#123;width:200px;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@keyframes mymove</div><div class="line">&#123;</div><div class="line">	0% &#123;width:10px;&#125;</div><div class="line">	50% &#123;width: 150px&#125;</div><div class="line">	100% &#123;width:200px;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结合本次写的主题是文字淡入，即透明度从0到1的动画，那么写一个fade-in的动画<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@keyframes fade-in</div><div class="line">&#123;</div><div class="line">	0%&#123; opacity: 0;&#125;</div><div class="line">    100%&#123;opacity:1;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="animation-duration"><a href="#animation-duration" class="headerlink" title="animation-duration"></a>animation-duration</h4><p>动画完成所需花费的全部时间，默认值为0，如果想做动画，则时间不能为0，要不然看不到效果</p>
<h4 id="animation-timing-function"><a href="#animation-timing-function" class="headerlink" title="animation-timing-function"></a>animation-timing-function</h4><p>animation-timing-function 使用名为三次贝塞尔（Cubic Bezier）函数的数学函数，来生成速度曲线。您能够在该函数中使用自己的值，也可以预定义的值</p>
<ul>
<li>linear    动画从头到尾的速度是相同的。</li>
<li>ease    默认。动画以低速开始，然后加快，在结束前变慢。</li>
<li>ease-in    动画以低速开始。</li>
<li>ease-out    动画以低速结束。</li>
<li>ease-in-out    动画以低速开始和结束。</li>
<li>cubic-bezier(n,n,n,n)    在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。<br>关于贝塞尔曲线，网上有很多帮助生成曲线的工具，可以自己搜索一下</li>
</ul>
<h4 id="animation-delay"><a href="#animation-delay" class="headerlink" title="animation-delay"></a>animation-delay</h4><p>规定在动画开始之前的延迟。为负值代表跳过多少秒的动画立马开始</p>
<h4 id="animation-iteration-count"><a href="#animation-iteration-count" class="headerlink" title="animation-iteration-count"></a>animation-iteration-count</h4><ul>
<li>n    定义动画播放次数的数值。</li>
<li>infinite    规定动画应该无限次播放。</li>
</ul>
<h4 id="animation-direction"><a href="#animation-direction" class="headerlink" title="animation-direction"></a>animation-direction</h4><ul>
<li>normal    默认值。动画应该正常播放。</li>
<li>alternate    动画应该轮流反向播放。</li>
</ul>
<p>结合本次写的淡入文字的题目，总体来说animate代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">animation: fade-in 4s ease 0s 1;</div></pre></td></tr></table></figure></p>
<h4 id="animation-fill-mode"><a href="#animation-fill-mode" class="headerlink" title="animation-fill-mode"></a>animation-fill-mode</h4><p>这个是最重要的，让动画停在某个状态，以本次淡入文字为例，文字透明状态从0变为1，最后需要停在1状态，需要用到这个属性</p>
<ul>
<li>none    不改变默认行为。</li>
<li>forwards    当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。</li>
<li>backwards    在 animation-delay 所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。</li>
<li>both    向前和向后填充模式都被应用。</li>
</ul>
<h2 id="全部的css"><a href="#全部的css" class="headerlink" title="全部的css"></a>全部的css</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line">.fade-in-words&#123;</div><div class="line">    width: 200px;</div><div class="line">    margin: 0 auto;</div><div class="line">    text-align: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*自定义一个透明度从0到1的动画，它的名称是fade-in*/</div><div class="line">@keyframes fade-in&#123;  </div><div class="line">    0%&#123; opacity: 0;&#125;</div><div class="line">    100%&#123;opacity:1;&#125;</div><div class="line">&#125;</div><div class="line">@-webkit-keyframes fade-in&#123;</div><div class="line">    0%&#123; opacity: 0;&#125;</div><div class="line">    100%&#123;opacity:1;&#125;</div><div class="line">&#125;</div><div class="line">@-ms-keyframes fade-in&#123;</div><div class="line">    0%&#123; opacity: 0;&#125;</div><div class="line">    100%&#123;opacity:1;&#125;</div><div class="line">&#125;</div><div class="line">@-o-keyframes fade-in&#123;</div><div class="line">    0%&#123; opacity: 0;&#125;</div><div class="line">    100%&#123;opacity:1;&#125;</div><div class="line">&#125;</div><div class="line">@-moz-keyframes fade-in&#123;</div><div class="line">    0%&#123; opacity: 0;&#125;</div><div class="line">    100%&#123;opacity:1;&#125;</div><div class="line">&#125;</div><div class="line">.first-words&#123; </div><div class="line">    opacity: 0;      /*实先规定文字的状态是不显示的*/</div><div class="line">    animation: fade-in 4s ease 0s 1;    /*调用名称为fade-in的动画，全程动画显示时间4S，进入方式为ease，延时0S进入，播放次数1次*/</div><div class="line">    -webkit-animation: fade-in 4s ease 0s 1;</div><div class="line">    -moz-animation: fade-in 4s ease 0s 1;</div><div class="line">    -o-animation: fade-in 4s ease 0s 1;</div><div class="line">    -ms-animation: fade-in 4s ease 0s 1;</div><div class="line">    </div><div class="line">    /*规定动画的最后状态为结束状态*/</div><div class="line">    animation-fill-mode:forwards;</div><div class="line">    -webkit-animation-fill-mode: forwards;  </div><div class="line">      -o-animation-fill-mode: forwards; </div><div class="line">      -ms-animation-fill-mode: forwards;   </div><div class="line">      -moz-animation-fill-mode: forwards; </div><div class="line">&#125;</div><div class="line">.second-words&#123; </div><div class="line">    opacity: 0;    </div><div class="line">    animation: fade-in 4s ease 2s 1;</div><div class="line">    -webkit-animation: fade-in 4s ease 2s 1;</div><div class="line">    -moz-animation: fade-in 4s ease 2s 1;</div><div class="line">    -o-animation: fade-in 4s ease 2s 1;</div><div class="line">    -ms-animation: fade-in 4s ease 2s 1;</div><div class="line">    </div><div class="line">    /*规定动画的最后状态为结束状态*/</div><div class="line">    animation-fill-mode:forwards;</div><div class="line">    -webkit-animation-fill-mode: forwards;  </div><div class="line">      -o-animation-fill-mode: forwards; </div><div class="line">      -ms-animation-fill-mode: forwards;   </div><div class="line">      -moz-animation-fill-mode: forwards; </div><div class="line">&#125;</div><div class="line">.third-words&#123; </div><div class="line">    opacity: 0;    </div><div class="line">    animation: fade-in 4s ease 4s 1;</div><div class="line">    -webkit-animation: fade-in 4s ease 4s 1;</div><div class="line">    -moz-animation: fade-in 4s ease 4s 1;</div><div class="line">    -o-animation: fade-in 4s ease 4s 1;</div><div class="line">    -ms-animation: fade-in 4s ease 4s 1;</div><div class="line">    </div><div class="line">    /*规定动画的最后状态为结束状态*/</div><div class="line">    animation-fill-mode:forwards;</div><div class="line">    -webkit-animation-fill-mode: forwards;  </div><div class="line">      -o-animation-fill-mode: forwards; </div><div class="line">      -ms-animation-fill-mode: forwards;   </div><div class="line">      -moz-animation-fill-mode: forwards; </div><div class="line">&#125;</div><div class="line">.four-words&#123; </div><div class="line">    opacity: 0;    </div><div class="line">    animation: fade-in 4s ease 6s 1;</div><div class="line">    -webkit-animation: fade-in 4s ease 6s 1;</div><div class="line">    -moz-animation: fade-in 4s ease 6s 1;</div><div class="line">    -o-animation: fade-in 4s ease 6s 1;</div><div class="line">    -ms-animation: fade-in 4s ease 6s 1;</div><div class="line">    </div><div class="line">    /*规定动画的最后状态为结束状态*/</div><div class="line">    animation-fill-mode:forwards;</div><div class="line">    -webkit-animation-fill-mode: forwards;  </div><div class="line">      -o-animation-fill-mode: forwards; </div><div class="line">      -ms-animation-fill-mode: forwards;   </div><div class="line">      -moz-animation-fill-mode: forwards; </div><div class="line">&#125;</div><div class="line">.five-words&#123; </div><div class="line">    opacity: 0;    </div><div class="line">    animation: fade-in 4s ease 8s 1;</div><div class="line">    -webkit-animation: fade-in 4s ease 8s 1;</div><div class="line">    -moz-animation: fade-in 4s ease 8s 1;</div><div class="line">    -o-animation: fade-in 4s ease 8s 1;</div><div class="line">    -ms-animation: fade-in 4s ease 8s 1;</div><div class="line">    </div><div class="line">    /*规定动画的最后状态为结束状态*/</div><div class="line">    animation-fill-mode:forwards;</div><div class="line">    -webkit-animation-fill-mode: forwards;  </div><div class="line">      -o-animation-fill-mode: forwards; </div><div class="line">      -ms-animation-fill-mode: forwards;   </div><div class="line">      -moz-animation-fill-mode: forwards; </div><div class="line">&#125;</div><div class="line">.six-words&#123; </div><div class="line">    opacity: 0;    </div><div class="line">    animation: fade-in 4s ease 10s 1;</div><div class="line">    -webkit-animation: fade-in 4s ease 10s 1;</div><div class="line">    -moz-animation: fade-in 4s ease 10s 1;</div><div class="line">    -o-animation: fade-in 4s ease 10s 1;</div><div class="line">    -ms-animation: fade-in 4s ease 10s 1;</div><div class="line">    </div><div class="line">    /*规定动画的最后状态为结束状态*/</div><div class="line">    animation-fill-mode:forwards;</div><div class="line">    -webkit-animation-fill-mode: forwards;  </div><div class="line">      -o-animation-fill-mode: forwards; </div><div class="line">      -ms-animation-fill-mode: forwards;   </div><div class="line">      -moz-animation-fill-mode: forwards; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>面的程序我在注释里面都写得很清楚，感兴趣的可以看我写的注释，我觉得比较简单，没有难度，但是需要注意浏览器前缀的添加，否则你懂得.</p>
]]></content>
      
        <categories>
            
            <category> css技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css3 </tag>
            
            <tag> 动画 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css样式表中的样式覆盖顺序]]></title>
      <url>/2014/09/24/css%E6%A0%B7%E5%BC%8F%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%A0%B7%E5%BC%8F%E8%A6%86%E7%9B%96%E9%A1%BA%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>有时候在写CSS的过程中，某些限制总是不起作用，这就涉及了CSS样式覆盖的问题，查找一些教材中（w3schools等），只说css的顺序是“元素上的style” &gt; “文件头上的style元素” &gt;“外部样式文件”，但对于样式文件中的多个相同样式的优先级怎样排列，没有详细说明。经过测试和继续搜索，得知优先级如下排列：</p>
<h2 id="样式表的元素选择器"><a href="#样式表的元素选择器" class="headerlink" title="样式表的元素选择器"></a>样式表的元素选择器</h2><p>举个例子:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#navigator &#123;  </span></div><div class="line">    height: 100%;  </div><div class="line">    width: 200;  </div><div class="line">    position: absolute;  </div><div class="line">    left: 0;  </div><div class="line">    border: solid 2 <span class="comment">#EEE;  </span></div><div class="line">&#125;  </div><div class="line">.current_block &#123;  </div><div class="line">    border: solid 2 <span class="comment">#AE0;  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>样式表的元素选择器选择越精确则其中的样式优先级越高：<br>id选择器指定的样式 &gt; 类选择器指定的样式 &gt; 元素类型选择器指定的样式<br>所以上例中，某个元素同时采用class=”current_block”和id=”navigator” ，#navigator的样式优先级大于.current_block的优先级，就算.current_block是最新添加的，也不起作用。</p>
<h2 id="相同类型选择器"><a href="#相同类型选择器" class="headerlink" title="相同类型选择器"></a>相同类型选择器</h2><p>对于相同类型选择器制定的样式，在样式表文件中，越靠后的优先级越高<br>注意，这里是样式表文件中越靠后的优先级越高，而不是在元素class出现的顺序。比如.class2 在样式表中出现在.class1之后：<br>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.class1 &#123;  </div><div class="line">    color: black;  </div><div class="line">&#125;   </div><div class="line">.class2 &#123;  </div><div class="line">    color: red;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而某个元素指定class时采用 class=”class2 class1”这种方式指定，此时虽然class1在元素中指定时排在class2的后面，但因为在样式表文件中class1处于class2前面，此时仍然是class2的优先级更高，color的属性为red，而非black。</p>
<h2 id="让某个样式的优先级变高"><a href="#让某个样式的优先级变高" class="headerlink" title="让某个样式的优先级变高"></a>让某个样式的优先级变高</h2><p>如果要让某个样式的优先级变高，可以使用!important来指定<br>举个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.class1 &#123;  </div><div class="line">    color: black !important;  </div><div class="line">&#125;   </div><div class="line">.class2 &#123;  </div><div class="line">    color: red;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而某个元素指定class时采用 class=”class2 class1”这种方式指定，此时class将使用black，而非red。</p>
]]></content>
      
        <categories>
            
            <category> css技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[input表单元素的默认padding不一致问题]]></title>
      <url>/2014/09/07/input%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0%E7%9A%84%E9%BB%98%E8%AE%A4padding%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>最近做的项目，发现一堆问题，input type=“text”和type=“button”</p>
<p>（1）在无文字的时候高度是一致的，分别写入相同大小的文字type=“button”高度&gt;type=“text”，查找的资料是padding在不同浏览器的表现不一致，尤其是chrome，具体文章见<a href="http://www.cnblogs.com/cpfsdut/articles/4745040.html" target="_blank" rel="external">http://www.cnblogs.com/cpfsdut/articles/4745040.html</a></p>
<p>（2）一旦给input type=“text”设置line-height,光标会两次变化，找的原因是：</p>
<p>IE：不管该行有没有文字，光标高度与font-size一致。</p>
<p>FF：该行有文字时，光标高度与font-size一致。该行无文字时，光标高度与input的height一致。</p>
<p>Chrome：该行无文字时，光标高度与line-height一致；该行有文字时，光标高度从input顶部到文字底部(这两种情况都是在有设定line-height的时候)，如果没有line-height，则是与font-size一致。</p>
<p>（3）解决的方法是，三个都是必须条件：</p>
<p>①一定要设置高度height: 0.4rem;不要设置line-height，因为input默认文字是垂直居中的；</p>
<p>②如果不想让光标充满整个input高度，直接设置font-size大小便可控制光标；</p>
<p>③一定要用box-sizing控制默认的padding在设置的高度内部。</p>
]]></content>
      
        <categories>
            
            <category> css技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[margin和padding在块元素、内联元素中的区别]]></title>
      <url>/2014/08/16/margin%E5%92%8Cpadding%E5%9C%A8%E5%9D%97%E5%85%83%E7%B4%A0%E3%80%81%E5%86%85%E8%81%94%E5%85%83%E7%B4%A0%E4%B8%AD%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h2 id="元素分类"><a href="#元素分类" class="headerlink" title="元素分类"></a>元素分类</h2><p>HTML（这里说的是html标准，而不是xhtml）里分两种基本元素，即block和inline。顾名思义，block元素就是以”块”表现的元素（block-like elements），inline元素即是以”行”表现的元素（character level elements and text strings）。<br>二者表现的主要差别在于，在页面文档中block元素另起一行开始，并独占一行。inline元素则同其他inline元素共处一行。</p>
<h3 id="block元素"><a href="#block元素" class="headerlink" title="block元素"></a>block元素</h3><p>block元素（块元素）大致有：P|H1|H2|H3|H4|H5|H6|UL|OL|PRE| DL | DIV | NOSCRIPT | BLOCKQUOTE | FORM | HR | TABLE | FIELDSET | ADDRESS(随着html5标准的推进，一些元素将被废除，而一些新的元素将被引入)注意的是并非所有的block元素的默认display属性都是block，像table这种display:table的元素也是block元素。</p>
<h3 id="inline元素"><a href="#inline元素" class="headerlink" title="inline元素"></a>inline元素</h3><p>inline元素（内联元素）大致有：| TT | I | B | BIG | SMALL|EM | STRONG | DFN | CODE |SAMP | KBD | VAR | CITE | ABBR | ACRONYM|A | IMG | OBJECT | BR | SCRIPT | MAP | Q | SUB | SUP | SPAN | BDO|INPUT | SELECT | TEXTAREA | LABEL | BUTTON</p>
<h3 id="可置换元素"><a href="#可置换元素" class="headerlink" title="可置换元素"></a>可置换元素</h3><p>其中有类特殊的元素：如img|input|select|textarea|button|label等，他们被称为可置换元素（Replaced element）。他们区别一般inline元素（相对而言，称non-replaced element）是：这些元素拥有内在尺寸(intrinsic dimensions),他们可以设置width/height属性。他们的性质同设置了display:inline-block的元素一致。</p>
<h2 id="margin在块元素、内联元素中的区别"><a href="#margin在块元素、内联元素中的区别" class="headerlink" title="margin在块元素、内联元素中的区别"></a>margin在块元素、内联元素中的区别</h2><h3 id="margin对块元素影响"><a href="#margin对块元素影响" class="headerlink" title="margin对块元素影响"></a>margin对块元素影响</h3><p>margin在块级元素下，他的性能可以完全体现，上下左右任你设定。且记住块级元素的margin的参照基准是前一个元素即相对于自身之前的元素有margin距离。如果元素是第一个元素，则就是相对于父元素的margin距离（但第一个元素相对于父元素margin-top而父元素又没有设定padding-top/border-top的话要需要印证上面的垂直外边距合并的知识）。</p>
<h3 id="margin对内联元素影响"><a href="#margin对内联元素影响" class="headerlink" title="margin对内联元素影响"></a>margin对内联元素影响</h3><p>margin也能用于内联元素，这是规范所允许的，但是margin-top和margin-bottom对内联元素（对行）的高度没有影响，并且由于边界效果(margin效果)是透明的，他也没有任何的视觉影响。<br>这是因为边界应用于内联元素时不改变元素的行高度，如果你要改变内联元素的行高即类似文本的行间距，那么你只能使用这三个属性：line-height，fong-size，vertical-align。<br>请记住，这个影响内联元素高度的是line-height而不是height，因为内联元素是一行行的，定一个height的话，那这到底是整段inline元素的高呢？还是inline元素一行的高呢？这都说不准，所以统一都给每行定一个高，只能是line-height了。</p>
<p>总结：margin-top/margin-bottom对内联元素没有多大实际效果，不过margin-left/margin-right还是能够对内联元素产生影响的。应用margin:10px 20px 30px 40px;，左边这个css如果写在inline元素上，他的效果大致是，上下无效果，左边离他相邻元素或者文本距离为40px，右边离他相邻元素或者文本距离为20px。你可以自行尝试一番。</p>
<h3 id="margin对可置换元素影响"><a href="#margin对可置换元素影响" class="headerlink" title="margin对可置换元素影响"></a>margin对可置换元素影响</h3><p>这些个元素img|input|select|textarea|button|label虽然是内联元素，但具有block功能，所以margin依旧可以影响到他的上下左右！</p>
<h2 id="padding在块元素、内联元素中的区别"><a href="#padding在块元素、内联元素中的区别" class="headerlink" title="padding在块元素、内联元素中的区别"></a>padding在块元素、内联元素中的区别</h2><h3 id="padding对块元素影响"><a href="#padding对块元素影响" class="headerlink" title="padding对块元素影响"></a>padding对块元素影响</h3><p>padding在块级元素下，他的性能可以完全体现，上下左右任你设定。</p>
<h3 id="padding对内联元素影响"><a href="#padding对内联元素影响" class="headerlink" title="padding对内联元素影响"></a>padding对内联元素影响</h3><p>padding-top和padding-bottom对内联元素没作用，只有padding-left和padding-right起作用。</p>
<h3 id="padding对可置换元素影响"><a href="#padding对可置换元素影响" class="headerlink" title="padding对可置换元素影响"></a>padding对可置换元素影响</h3><p>这些个元素img|input|select|textarea|button|label虽然是内联元素，但具有block功能，所以padding依旧可以影响到他的上下左右！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>margin, padding对块元素和可置换元素上下左右都起作用，对内联元素只左右起作用，上下不起作用。</p>
]]></content>
      
        <categories>
            
            <category> css技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
